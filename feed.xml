<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://yolken.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yolken.net/" rel="alternate" type="text/html" /><updated>2021-10-03T15:53:34-07:00</updated><id>https://yolken.net/feed.xml</id><title type="html">Benjamin Yolken</title><subtitle>Random thoughts from the perspective of a software engineer, particularly around tech careers and development processes.</subtitle><entry><title type="html">My NYC Bike-cation</title><link href="https://yolken.net/blog/my-nyc-bike-cation" rel="alternate" type="text/html" title="My NYC Bike-cation" /><published>2021-10-03T11:37:00-07:00</published><updated>2021-10-03T11:37:00-07:00</updated><id>https://yolken.net/blog/my-nyc-bike-cation</id><content type="html" xml:base="https://yolken.net/blog/my-nyc-bike-cation">&lt;p&gt;I recently got back from a vacation to the East Coast of the US. For two days during my trip,
I biked around New York City and explored various neighborhoods, parks, and bridges.&lt;/p&gt;

&lt;p&gt;In this post (my first that’s not about tech!), I want to share my routes and also some observations
from the perspective of someone who has done most of their biking in the San Francisco Bay Area.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/nyc_biking_street.jpg&quot; alt=&quot;Street in upper Manhattan&quot; /&gt;
  &lt;figcaption style=&quot;font-size:0.8em&quot;&gt;
    View from my bike camera in upper Manhattan.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;logistics&quot;&gt;Logistics&lt;/h2&gt;

&lt;p&gt;New York has a massive bike share program, &lt;a href=&quot;https://citibikenyc.com/homepage&quot;&gt;Citi Bike&lt;/a&gt;, with
stations all over the city. These bikes are relatively cheap to rent ($15 / day), but they’re heavy
and not designed for steep hills, so I decided to go a little more upscale and rent a nicer bike
each day from a &lt;a href=&quot;https://bikerent.nyc/&quot;&gt;bike rental kiosk&lt;/a&gt; in
&lt;a href=&quot;https://en.wikipedia.org/wiki/Central_Park&quot;&gt;Central Park&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The kiosk bikes were still not amazing as they were designed more for cruising than hardcore rides,
but at least they had more gears, better brakes, and lighter frames.&lt;/p&gt;

&lt;p&gt;Each day, I walked from my hotel in Times Square to the rental kiosk, paid $40 for a day-long
rental, and then was off riding within a few minutes. Central Park, as implied by its name,
is centrally located, so it was easy to go off in various directions based on the plan for the
day.&lt;/p&gt;

&lt;h2 id=&quot;day-1-manhattan&quot;&gt;Day 1: Manhattan&lt;/h2&gt;

&lt;p&gt;On the first day, I did Manhattan Island from end-to-end:&lt;/p&gt;

&lt;figure&gt;
  &lt;img height=&quot;600&quot; src=&quot;/assets/nyc_ride1_small.png&quot; alt=&quot;Manhattan ride map&quot; /&gt;
  &lt;figcaption style=&quot;font-size:0.8em&quot;&gt;
    &lt;strong&gt;Total distance:&lt;/strong&gt; 40.36 miles.&lt;br /&gt;
    &lt;strong&gt;Net elevation gain:&lt;/strong&gt; 1,086 feet.&lt;br /&gt;
    See &lt;a href=&quot;https://www.strava.com/activities/5981756660&quot;&gt;Strava&lt;/a&gt; for more details.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Starting in at the kiosk in the southwest corner of Central Park, I went up through the park
then took local streets from the north side of the park to the upper tip of Manhattan. This
took me through the neighborhoods of &lt;a href=&quot;https://en.wikipedia.org/wiki/Harlem&quot;&gt;Harlem&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Washington_Heights,_Manhattan&quot;&gt;Washington Heights&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inwood,_Manhattan&quot;&gt;Inwood&lt;/a&gt;, ending up at the beautiful
&lt;a href=&quot;https://en.wikipedia.org/wiki/Inwood_Hill_Park&quot;&gt;Inwood Hill Park&lt;/a&gt; at the northwestern corner
of the island.&lt;/p&gt;

&lt;p&gt;I then took the &lt;a href=&quot;https://ride.citibikenyc.com/rides/hudson-river-greenway&quot;&gt;Hudson River Greenway&lt;/a&gt;,
a paved, off-street bike trail, down the entire west side of Manhattan to
&lt;a href=&quot;https://en.wikipedia.org/wiki/The_Battery_(Manhattan)&quot;&gt;The Battery&lt;/a&gt; at the southern tip of the
island.&lt;/p&gt;

&lt;p&gt;Finally, I took local streets back up to midtown Manhattan, doing some loops among the
high-rises of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Upper_East_Side&quot;&gt;Upper East Side&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Midtown_Manhattan&quot;&gt;Midtown&lt;/a&gt; before turning my bike in at the end
of the day.&lt;/p&gt;

&lt;h2 id=&quot;day-2-brooklyn&quot;&gt;Day 2: Brooklyn&lt;/h2&gt;

&lt;p&gt;On day two, I did a big loop through the Brooklyn Borough, bounded by some mileage in Queens and
Manhattan:&lt;/p&gt;

&lt;figure&gt;
  &lt;img height=&quot;600&quot; src=&quot;/assets/nyc_ride2_small.png&quot; alt=&quot;Brooklyn ride map&quot; /&gt;
  &lt;figcaption style=&quot;font-size:0.8em&quot;&gt;
    &lt;strong&gt;Total distance:&lt;/strong&gt; 40.89 miles.&lt;br /&gt;
    &lt;strong&gt;Net elevation gain:&lt;/strong&gt; 1,086 feet.&lt;br /&gt;
    See &lt;a href=&quot;https://www.strava.com/activities/5987844467&quot;&gt;Strava&lt;/a&gt; for more details.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I started by going east across Midtown and then over the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Queensboro_Bridge&quot;&gt;Queensboro Bridge&lt;/a&gt; into Queens. I then went
south into Brooklyn, passing by the hip and expensive new housing developments along the riverfront
in &lt;a href=&quot;https://en.wikipedia.org/wiki/Greenpoint,_Brooklyn&quot;&gt;Greenpoint&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Williamsburg,_Brooklyn&quot;&gt;Williamsburg&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I then cut island and looped around some less gentrified areas of Brooklyn, including the
neighborhoods of &lt;a href=&quot;https://en.wikipedia.org/wiki/Crown_Heights,_Brooklyn&quot;&gt;Crown Heights&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Flatbush,_Brooklyn&quot;&gt;Flatbush&lt;/a&gt;,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Borough_Park,_Brooklyn&quot;&gt;Borough Park&lt;/a&gt;, and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Sunset_Park,_Brooklyn&quot;&gt;Sunset Park&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This was definitely the most interesting part of my ride. Far away from the touristy and yuppified
parts of Manhattan, there was an incredible diversity of architecture, businesses, and people.
Based on the specific location, the population varied from Orthodox Jews to Chinese immigrants,
and the building stock from concrete high-rises to beautiful, suburban-like, single family
homes.&lt;/p&gt;

&lt;p&gt;In Sunset Park, I turned back north and ended up in Downtown Brooklyn. After a quick break, I
crossed over the &lt;a href=&quot;https://en.wikipedia.org/wiki/Brooklyn_Bridge&quot;&gt;Brooklyn Bridge&lt;/a&gt; back into
Manhattan, took local streets back up to Midtown, and then did some loops around
&lt;a href=&quot;https://en.wikipedia.org/wiki/Hell%27s_Kitchen,_Manhattan&quot;&gt;Hell’s Kitchen&lt;/a&gt; and the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Upper_West_Side&quot;&gt;Upper West Side&lt;/a&gt; before returning my bike.&lt;/p&gt;

&lt;h2 id=&quot;observations&quot;&gt;Observations&lt;/h2&gt;

&lt;h4 id=&quot;bike-infrastructure-has-improved-a-lot&quot;&gt;Bike infrastructure has improved a lot&lt;/h4&gt;

&lt;p&gt;The last time I rode in New York City was in 2004. At the time, there were paths along the rivers,
in the parks, and over the bridges, but most other areas of the city were a biking wasteland- street
riding was really the realm of hardcore bike messengers and others not afraid to weave
in and out of speeding taxis and perform other, death-defying stunts.&lt;/p&gt;

&lt;p&gt;Now there is much improved, street-level bike infrastructure, particularly on some of the big,
north/south avenues in Manhattan. Bikers often have an entire lane, and the street markings and
traffic lights are designed so that turning drivers are forced to yield to bikes.&lt;/p&gt;

&lt;p&gt;The lanes are definitely less dense and less protected outside of Lower and Midtown Manhattan. But
at least they’re there and an improvement over riding in the middle of a busy street. Hopefully,
the network will be expanded more in the future.&lt;/p&gt;

&lt;h4 id=&quot;there-are-a-ton-of-bikers&quot;&gt;There are a ton of bikers&lt;/h4&gt;

&lt;p&gt;As a result of the improved infrastructure, there were &lt;em&gt;a lot&lt;/em&gt; of bikers, particularly in
Central Park and along the Hudson River in lower Manhattan. At times, I felt like I was in
one of those giant, densely-packed racing groups in the Tour de France.&lt;/p&gt;

&lt;p&gt;It was nice to see so many bikers (I’ve never seen so many anywhere else), but at the same time it
felt a little confining. Clearly, there is a ton of demand for bike infrastructure, so the city
should devote more space to bikes in these neighborhoods. Until then, I’d advise avoiding
these areas at peak times unless you don’t mind crowds.&lt;/p&gt;

&lt;h4 id=&quot;the-bike-routes-in-google-maps-are-amazing&quot;&gt;The bike routes in Google Maps are amazing&lt;/h4&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/nyc_biking_google_maps.png&quot; alt=&quot;Google Maps screenshot&quot; /&gt;
  &lt;figcaption style=&quot;font-size:0.8em&quot;&gt;
    Screenshot of the NYC bike route layer in Google Maps.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The bike route layer in Google Maps is absolutely amazing for New York City. Not only does it show
which streets have bike lanes, but it also allows you to navigate through the road labyrinths that
obscure bike path entrances, like the ones at the bases of the East River bridges.&lt;/p&gt;

&lt;p&gt;I used Google Maps for planning my NYC routes, and I found &lt;em&gt;zero&lt;/em&gt; inaccuracies while on the road.
I’ve had similar experiences with the bike route layers in other US cities like San Francisco
and Washington, DC. Google has done a great job here, and hopefully this coverage will expand
to more cities around the world.&lt;/p&gt;

&lt;h4 id=&quot;bikers-dont-follow-traffic-laws&quot;&gt;Bikers don’t follow traffic laws&lt;/h4&gt;

&lt;p&gt;Bikers in San Francisco will definitely roll through stop signs and do other, “minor”
violations when it’s convenient. However, the amount of traffic law breaking I saw in NYC was just
at a completely different level. Even at big intersections, many bikers would routinely sail through
red lights as if they were yield signs. I also saw some fun behaviors I had never seen elsewhere
before, like motorcycles driving on off-street bike paths (super dangerous!).&lt;/p&gt;

&lt;p&gt;According to a friend of mine who bikes in NYC a lot, enforcement is pretty rare. However, the
police will sometimes set up “stings” at high traffic places like outside Penn Station. Apparently,
those efforts aren’t sufficient to improve adherence to the rules.&lt;/p&gt;

&lt;h4 id=&quot;non-protected-bike-lanes-are-routinely-ignored-by-cars&quot;&gt;Non-protected bike lanes are routinely ignored by cars&lt;/h4&gt;

&lt;p&gt;Bikers weren’t the only ones violating traffic laws. In particular, the amount of disregard for
bike lanes by cars was also above and beyond anything I had seen elsewhere. Non-protected lanes
(i.e., the ones at the side of the road between the traffic and parking lanes), were routinely
treated as loading zones and parking spots. In some neighborhoods, there were multiple obstructions
per block, making the lanes themselves almost unusable.&lt;/p&gt;

&lt;p&gt;As with bikers violating traffic laws, I saw zero enforcement of cars violating the rules. I guess
New York is kind of just a free-for-all for both sides.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I had a ton of fun biking around New York City. There is definitely room for
improvement in terms of infrastructure and enforcement, but the city has come a long, long way
over the last 15 years and is now a super interesting and relatively safe place to ride.&lt;/p&gt;

&lt;p&gt;The city is huge, and I only got to explore a small portion of it on this trip. On my next
vacation, I want to go back and ride around more!&lt;/p&gt;</content><author><name></name></author><category term="biking" /><summary type="html">I recently got back from a vacation to the East Coast of the US. For two days during my trip, I biked around New York City and explored various neighborhoods, parks, and bridges. In this post I want to share my routes and also my observations from the perspective of someone who has done most of their biking in San Francisco Bay Area.</summary></entry><entry><title type="html">Jira makes me want to cry</title><link href="https://yolken.net/blog/jira-makes-me-want-to-cry" rel="alternate" type="text/html" title="Jira makes me want to cry" /><published>2021-09-06T18:25:00-07:00</published><updated>2021-09-06T18:25:00-07:00</updated><id>https://yolken.net/blog/jira-makes-me-want-to-cry</id><content type="html" xml:base="https://yolken.net/blog/jira-makes-me-want-to-cry">&lt;p&gt;Every company I’ve worked at in the last 9 years, from small startups
to multi-thousand-person public corporations, has used
&lt;a href=&quot;https://www.atlassian.com/software/jira&quot;&gt;Jira&lt;/a&gt; for managing software
projects internally.&lt;/p&gt;

&lt;p&gt;While the goals of this system are admirable, I’ve found it to be a huge
pain to use in practice. In this post, I want to explain what Jira is and why
interacting with it makes me feel frustrated and unproductive at work.&lt;/p&gt;

&lt;h2 id=&quot;aside-what-is-jira&quot;&gt;Aside: What is Jira?&lt;/h2&gt;

&lt;p&gt;Jira is an online project management system created by
&lt;a href=&quot;https://www.atlassian.com/&quot;&gt;Atlassian&lt;/a&gt;, an Australian company that
makes some other productivity tools as well.&lt;/p&gt;

&lt;p&gt;A company’s Jira account is divided into “projects” which, at many companies,
map 1:1 with teams. Within each project/team, users create issues (sometimes
referred to as “tickets”) to represent individual things that need to be done,
e.g. bugs to fix or new features to add in the company’s products.&lt;/p&gt;

&lt;p&gt;Issues can be listed, categorized, and reordered within a number of different
high-level views depending on how the associated project is
configured. For instance, there might be a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Kanban_board&quot;&gt;Kanban board&lt;/a&gt; that lists issues
in columns by status (example below) or a “roadmap” view that shows a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Gantt_chart&quot;&gt;Gantt-chart&lt;/a&gt;-like summary of when issues
are projected to be done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jira_kanban.png&quot; alt=&quot;Jira Kanban board&quot; width=&quot;800&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each issue is assigned to a single member of the team, who’s then responsible
for working on it. As they do this, they update the status of the ticket in the UI
so that others at the company can track the progress. Finally,
when the work is complete, the ticket is marked as “Done” and the assignee moves on
to the next ticket in the team’s queue.&lt;/p&gt;

&lt;h2 id=&quot;what-its-supposed-to-do&quot;&gt;What it’s supposed to do&lt;/h2&gt;

&lt;p&gt;Managing software projects is tedious. Once you get beyond a handful of people
working on something, you need some structure so that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;There’s a well-known place to file bugs and TODOs so that people don’t forget
  about them&lt;/li&gt;
  &lt;li&gt;Bugs/tickets/issues (whatever you want to call them) can be prioritized by teams
  so that the more important things are worked on before the less important ones&lt;/li&gt;
  &lt;li&gt;Issues can be assigned to developers so that each person knows what to do next and
  work isn’t duplicated&lt;/li&gt;
  &lt;li&gt;Managers of various types (including project, program, product, and engineering)
  can see the big picture, make promises to customers, and reallocate resources
  as needed&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These requirements could be handled by post-its on a whiteboard or rows in a
spreadsheet, but these quick-and-dirty solutions don’t scale too well when you have
hundreds of people around the world, simultaneously working on dozens of interdependent
projects.&lt;/p&gt;

&lt;p&gt;Jira, in theory, provides this structure at scale. It aims to allow companies
of all sizes to manage the chaos around software development and keep teams
well-organized, productive, and responsive to customer issues as they go about their
day-to-day work.&lt;/p&gt;

&lt;h2 id=&quot;the-reality&quot;&gt;The reality&lt;/h2&gt;

&lt;p&gt;Although Jira is nice in theory, the reality in my experience is very suboptimal.
There’s lots of other material out there that enumerates all of the problems
(someone even made &lt;a href=&quot;https://whyjirasucks.com/&quot;&gt;https://whyjirasucks.com&lt;/a&gt;), so
I’m not going to rehash every one here. Instead, I want to focus on my top
three frustrations.&lt;/p&gt;

&lt;h4 id=&quot;1-its-slow&quot;&gt;(1) It’s slow&lt;/h4&gt;

&lt;p&gt;Every operation in my work team’s Jira project, whether loading the details a
single issue, doing a search across all of our issues, or updating the status
on an issue, feels sluggish. It’s like I’m browsing the Internet through a modem
in 1998.&lt;/p&gt;

&lt;p&gt;But wait, you might say, that’s just because your employer’s account is so
big and has lots of optional add-ons installed (Jira, like many other enterprise
SaaS products, offers a lot of customization). Well, I created a vanilla personal
account through &lt;a href=&quot;https://jira.com&quot;&gt;jira.com&lt;/a&gt; too, and, while it’s a bit better,
the performance still isn’t great.&lt;/p&gt;

&lt;p&gt;The problem with the Jira sluggishness is that users are doing many operations
per session. When I go in, for instance, I might need to review a couple dozen
issues, mark some of these as done, create a few new issues, then reorder the
updated corpus. If each operation involves multiple seconds of latency, it
adds up to a lot of wasted time.&lt;/p&gt;

&lt;h4 id=&quot;2-creating-new-issues-is-heavyweight&quot;&gt;(2) Creating new issues is heavyweight&lt;/h4&gt;

&lt;p&gt;Creating issues is a key activity in an issue tracking system, so ideally
the process should be fast and lightweight. Unfortunately, Jira’s ticket
creation flow is about as fluid as filling out a tax form; here’s a screenshot
from my personal test account:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jira_create_issue.png&quot; alt=&quot;Creating an issue&quot; width=&quot;500&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are so many fields that I had to shrink down my browser font
to fit everything in a single screen.&lt;/p&gt;

&lt;p&gt;Not all fields are required. However, if some of the optional fields
aren’t set correctly, then the issue might not show up in the team’s
Kanban board or be associated with the correct epic, which means that I’ll
need to waste time in the future trying to find it and categorize it
correctly.&lt;/p&gt;

&lt;h4 id=&quot;3-there-are-too-many-ways-of-doing-things&quot;&gt;(3) There are too many ways of doing things&lt;/h4&gt;

&lt;p&gt;As with other complex software products, there are many ways to accomplish
the same thing in Jira (e.g., updating the title of a ticket). The problem
with Jira’s design, however, is that the different ways of doing things are
often confusing and inconsistent. A few examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;In some text boxes, I can use &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; to
  format the text, but in others I have to use
  &lt;a href=&quot;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&quot;&gt;Jira’s proprietary markup language&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;I can reorder issues in the Kanban and Roadmap pages, but not in the epic view, which
  where I typically go to see all tickets for a particular subproject&lt;/li&gt;
  &lt;li&gt;Clicking on an issue in the Roadmap page opens up a side panel where I can see and edit
  the details, but in the Issues view I have to open a new page to do the same thing&lt;/li&gt;
  &lt;li&gt;Different pages have different search UIs. In some, all I get is a box (Google-style),
  whereas in others I also have the option (obligation?) to filter on issue fields like the
  assignee.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;

&lt;p&gt;The end result of all this is that many engineers, myself included, avoid using Jira
when possible. Is there a bug that will just take an hour to fix? Eh, just write it down
on a notepad or, even better, commit it to memory. Are there lots of old issues in the
project that could use some pruning and reorganization? Eh, it’s too much of a hassle, just
leave them as-is for now.&lt;/p&gt;

&lt;p&gt;It’s really sad because I generally like organizing things (including my closet, my books,
the pens on my desk, etc.) and I would love to spend lots of time doing the same for my
team’s engineering work, but Jira just takes the joy out of it.&lt;/p&gt;

&lt;p&gt;These avoidances end up having snowball effects. As others on the team also stop looking
at Jira regularly, each person’s incentive to contribute goes down. After a while,
both ICs and managers lose trust in the quality of the information in the system and have
to bother coworkers with theoretically-Jira-answerable questions such as “what’s the status
of the project?” and “what should I be working on next?”. The system that was designed
to keep everyone focused and organized becomes an administrative burden that reduces
the team’s focus and organization.&lt;/p&gt;

&lt;h2 id=&quot;where-to-go-from-here&quot;&gt;Where to go from here&lt;/h2&gt;

&lt;p&gt;Jira is such a productivity drain that I think companies should seriously consider
replacing it with something else. Atlassian has had many many years to fix the
problems above and hasn’t, so why continue supporting them?&lt;/p&gt;

&lt;p&gt;Unfortunately, I don’t have a lot of hands-on experience with the alternatives, so I can’t
give precise recommendations at this time. I’ve heard some good things about
&lt;a href=&quot;https://clubhouse.io/&quot;&gt;Clubhouse&lt;/a&gt;, so this is one option that I plan on exploring
in the future. For small companies, even the simple task-tracking features
built-in to &lt;a href=&quot;https://github.com/features/issues/&quot;&gt;Github&lt;/a&gt; would be a reasonable
choice.&lt;/p&gt;

&lt;p&gt;Whichever alternative you pick, your employees will thank you.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Every company I've worked at in the last 9 years, from small startups to multi-thousand-person public corporations, has used Jira for managing software projects internally. In this post, I want to explain what Jira is and why interacting with it at work makes me feel frustrated and unproductive.</summary></entry><entry><title type="html">Most core values are meaningless</title><link href="https://yolken.net/blog/most-core-values-are-meaningless" rel="alternate" type="text/html" title="Most core values are meaningless" /><published>2021-08-07T20:03:00-07:00</published><updated>2021-08-07T20:03:00-07:00</updated><id>https://yolken.net/blog/most-core-values-are-meaningless</id><content type="html" xml:base="https://yolken.net/blog/most-core-values-are-meaningless">&lt;p&gt;Over the last few years, many tech companies have embraced “core values”
with religious fervor. Although this process is done with good intentions,
the result is often a bland mixture of generic, feel-good principles that
do little to distinguish the company or improve employee behavior.&lt;/p&gt;

&lt;p&gt;In this post, I want to explain what core values are, why most are meaningless,
and what can be done to make them better.&lt;/p&gt;

&lt;h2 id=&quot;what-are-core-values&quot;&gt;What are core values?&lt;/h2&gt;

&lt;p&gt;Core values are a set of behavioral, non-job-specific traits that companies
expect or aspire their employees to uphold. They’re most commonly a mixture of
rules for civilized behavior (e.g., “treat your coworkers with respect”),
tips for getting things done in a productive way (e.g., “be resourceful”, “be rigorous”,
etc.), and aspirations that are never fully attainable (e.g. “never settle”, “only hire the best”,
and “simplify to the core”).&lt;/p&gt;

&lt;p&gt;Although the term “core values” seems to be the most common one, some companies refer to these
lists of traits by other names like “operating guidelines” or “leadership principles”. When I use
the term “core values” in this post, I’m also including the latter.&lt;/p&gt;

&lt;p&gt;The idea is to not just write down core values on a page in the employee handbook
but rather to “live” them day-to-day. Companies do this by posting their
values prominently on their webpages (examples from companies I’ve worked or interviewed
at: &lt;a href=&quot;https://careers.airbnb.com/&quot;&gt;Airbnb&lt;/a&gt;,
&lt;a href=&quot;https://stripe.com/jobs/culture&quot;&gt;Stripe&lt;/a&gt;,
&lt;a href=&quot;https://www.facebook.com/careers/facebook-life/&quot;&gt;Facebook&lt;/a&gt;,
&lt;a href=&quot;https://www.microsoft.com/en-us/about/corporate-values&quot;&gt;Microsoft&lt;/a&gt;,
&lt;a href=&quot;https://slack.com/careers&quot;&gt;Slack&lt;/a&gt;), evaluating
candidates against them during the interview process, holding multi-hour-long
sessions about them during new hire orientation, inserting examples of them
into company all-hands meetings, and using them to grade employees during the
performance evaluation process.&lt;/p&gt;

&lt;h2 id=&quot;why-most-are-meaningless&quot;&gt;Why most are meaningless&lt;/h2&gt;

&lt;p&gt;The vast majority of corporate core values map to one of the following
buckets:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Be nice to your coworkers&lt;/li&gt;
  &lt;li&gt;Be nice to your customers / consider their needs&lt;/li&gt;
  &lt;li&gt;Be innovative / resourceful / bold&lt;/li&gt;
  &lt;li&gt;Be productive / get things done / prioritize&lt;/li&gt;
  &lt;li&gt;Be rigorous / thoughtful / don’t be sloppy&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Don’t get me wrong, these are all great things. However, they’re behaviors
that &lt;em&gt;all&lt;/em&gt; tech companies should expect from their employees. If a company
didn’t value one or more of these, then it would not be a good place to work
and would have trouble attracting and retaining both employees and customers.&lt;/p&gt;

&lt;p&gt;Because these values are so universal and because they’re so obviously
associated with good employee behavior no matter which company you’re at,
they’re typically non-actionable. I’ve never at any point in my career
had a tough decision where, for instance, the choice was between being nice
to my coworkers and being nasty to them. Even if I wanted to be mean (which
I don’t), it’s unlikely that having a core value of “be nice to your coworkers”
would dissuade me from doing this; the actual disincentive would be losing
my job for violating the standard norms of good behavior.&lt;/p&gt;

&lt;p&gt;Overall, values in the five buckets above are generally meaningless.
They’re the same at most companies, they don’t inform decisions in people’s
day-to-day work, and no matter how companies try to spin them, they’re not
magical, special, or unique.&lt;/p&gt;

&lt;h2 id=&quot;better-core-values&quot;&gt;Better core values&lt;/h2&gt;

&lt;p&gt;So, given that “most” core values are meaningless, what makes meaningful ones?&lt;/p&gt;

&lt;p&gt;I think the most important feature of good core values is that they’re &lt;em&gt;actionable&lt;/em&gt;, i.e.
they actually help people make decisions when the correct choice isn’t obvious. As an example,
Airbnb (one of my former employers) had a core value of “every frame matters”, which
effectively meant that how things looked was really important. Thus, if I were an
engineer there and was trying to decide between making my product 30% prettier or 30%
faster, the former would be the superior choice. Google, on the other hand (another of my
former employers) had a value that “fast is better than slow”; there, the same engineer
in the same situation would be incentivized to make the opposite choice.&lt;/p&gt;

&lt;p&gt;A second feature of good core values is that they really help to &lt;em&gt;distinguish&lt;/em&gt; a company
from its peers. Airbnb’s value of “every frame matters” actually reflected how design-oriented
the company was and how obsessed they were with their brand and how users perceived them.
This was a key differentiator against the bland, poorly-designed travel portals created by
competitors like Expedia and Priceline. Another example is Google’s early value of “it’s best to do
one thing really, really well”. At the time, Google was competing against companies like Yahoo
that did search in addition to many other things too (personals, games, finance, email, etc.).
Google’s focus on search allowed it to win over users and eventually dominate the space.&lt;/p&gt;

&lt;h2 id=&quot;some-other-tips&quot;&gt;Some other tips&lt;/h2&gt;

&lt;p&gt;In addition to making core values actionable and distinguishable as just described, there are a
few other things that I think can help make them more meaningful.&lt;/p&gt;

&lt;h4 id=&quot;keep-the-count-low&quot;&gt;Keep the count low&lt;/h4&gt;

&lt;p&gt;Having too many core values makes them harder to remember and may also reflect poorly on
the company’s ability to prioritize (ironically, many companies that have a large number of
core values include “prioritize” as one of them). I think 4-5 is a good number
in most cases.&lt;/p&gt;

&lt;p&gt;Just because something isn’t a core value doesn’t mean that it’s not important to the company.
Many other things, including the more generic behavioral guidelines discussed previously, can
also be valued, put on the website, used for candidate and employee evaluations, and so forth.&lt;/p&gt;

&lt;h4 id=&quot;avoid-or-at-least-explain-any-contradictions&quot;&gt;Avoid (or at least explain) any contradictions&lt;/h4&gt;

&lt;p&gt;One of my former employers had values of both “get things done quickly” and “be super
rigorous”. Hypothetically then, one could release horribly buggy software quickly, or
spend 3 months changing the color of a single button in the UI, or do anything between
these two extremes, and all of these behaviors would be defensible using some subset
of the core values.&lt;/p&gt;

&lt;p&gt;Ideally, values shouldn’t contradict each other. Or, if they do, it should be very carefully
explained how to achieve a balance between them.&lt;/p&gt;

&lt;h4 id=&quot;dont-apply-core-values-where-they-arent-appropriate&quot;&gt;Don’t apply core values where they aren’t appropriate&lt;/h4&gt;

&lt;p&gt;Core values, no matter how important they are, are not, by themselves, sufficient conditions
for a company to be successful or for a person to be a good employee. There are many, many other,
non-behavioral things required at both the company and individual level.&lt;/p&gt;

&lt;p&gt;This principle is often violated in the context of employee or candidate evaluations.
At one former employer, it was decided to remove all of the technical feedback from the engineer
performance evaluation process and just have questions about how well each person embodied the
company’s core values. At other places, I’ve been asked to evaluate job candidates on the
company’s core values, even for non-behavioral interviews like coding questions.&lt;/p&gt;

&lt;p&gt;A good software engineer is strong on both technical and behavioral dimensions. A good company
has good values but also has solid technology and products that customers like. Values are necessary
but not sufficient conditions for success.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Many tech companies have adopted core values, but unfortunately only a subset of these
are meaningful. Values like “be rigorous” and “be respectful” sound nice but don’t set your
company apart or inspire people to behave in a way that they wouldn’t otherwise.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Over the last few years, many tech companies have embraced &quot;core values&quot; with religious fervor. In this post, I want to explain what core values are, why most are meaningless, and what can be done to make them better.</summary></entry><entry><title type="html">Non-optimal tech offices</title><link href="https://yolken.net/blog/non-optimal-tech-offices" rel="alternate" type="text/html" title="Non-optimal tech offices" /><published>2021-05-31T15:02:00-07:00</published><updated>2021-05-31T15:02:00-07:00</updated><id>https://yolken.net/blog/non-optimal-tech-offices</id><content type="html" xml:base="https://yolken.net/blog/non-optimal-tech-offices">&lt;p&gt;For the last year, I’ve been working from home (and mostly liking it!). As pandemic
restrictions ease over the next few months, however, I, along with many others in the tech
world, may be headed back to the office.&lt;/p&gt;

&lt;p&gt;Looking back over the last decade, I’ve had a lot of great experiences in the offices
of my employers and for the most part these spaces have been comfortable. However,
there are certain office features that I’ve encountered at company after company that are not
optimal and end up unnecessarily lowering productivity and happiness.&lt;/p&gt;

&lt;p&gt;In this post, I want to call these features out and describe how they can be fixed.&lt;/p&gt;

&lt;h2 id=&quot;non-optimal-office-features&quot;&gt;Non-optimal office features&lt;/h2&gt;

&lt;figure&gt;
  &lt;img src=&quot;/assets/open_office.jpg&quot; alt=&quot;Open office&quot; /&gt;
  &lt;figcaption&gt;
    Stock photograph of a high-density, overly open office with non-adjustable, countertop surfaces.
  &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;overly-open-offices&quot;&gt;Overly open offices&lt;/h3&gt;

&lt;p&gt;Let’s start with the giant elephant in the room- the trend of throwing hundreds of desks
in a giant, open space, with no visual or auditory blockers between people. Companies
claim that creating spaces as open as aircraft hangars “improves collaboration” but the research
&lt;a href=&quot;https://www.workfront.com/blog/what-science-says-about-open-offices&quot;&gt;consistently shows that open offices are a net negative&lt;/a&gt;,
and common sense dictates that a big motivation is saving money on real estate costs.&lt;/p&gt;

&lt;p&gt;At this point, I realize that we’re not all going to get private offices- real estate in tech hubs
like San Francisco is just too expensive for that to be feasible. However, at the
very least open spaces should be broken up so that the noise I hear is from people that I
directly collaborate with on my team and not from some random person 200 feet away who’s doing sales
calls for an unrelated product.&lt;/p&gt;

&lt;p&gt;The best shared office layout I had was when I was working for Google in Paris. The building was
really old and thus had lots of internal walls and other, “old-fashioned” architectural features
that couldn’t be completely torn out. Thus, by no other choice, each team was given a private room
or semi-private alcove to share, and it was great! We could collaborate as a team when we needed to
while at the same time not disturbing everyone else in the office. And yet, it was still open
enough that you could walk around and see what others were doing.&lt;/p&gt;

&lt;p&gt;It would be great if other offices, even more modern ones, had the same approach to open space.&lt;/p&gt;

&lt;h3 id=&quot;desks-next-to-noise-sources&quot;&gt;Desks next to noise sources&lt;/h3&gt;

&lt;p&gt;Related to the trend of open space, some offices put desks immediately adjacent to large
sources of non-work-related noise including cafeterias, all-hands meeting spaces, open atria,
office circulation paths, and service help desks.&lt;/p&gt;

&lt;p&gt;Over the years, I’ve been seated next to break-area coffee grinders (that noise drives me crazy!),
tech support desks (hearing people complaining about the slow WiFi on their laptops over and over),
and busy walkways (including frequent and very noisy tours being given to visitors). By far the
worst experience, though, was a job where I sat directly next to the kitchen and had to spend all
day listening to the head chef plan his menus and discipline the cafeteria staff.&lt;/p&gt;

&lt;p&gt;Unless you’re trying to encourage collaboration between your product team and your food team,
there’s no rational reason to do this, and it just causes frustration on both sides. Desk areas
should be completely separated from the places where food is prepared and served, where meetings
are held, and where every person in the building needs to walk by to get to or from their work
areas.&lt;/p&gt;

&lt;h3 id=&quot;non-adjustable-desks&quot;&gt;Non-adjustable desks&lt;/h3&gt;

&lt;p&gt;A decade ago, height-adjustable desks were exotic and expensive, and thus very few offices
had them. In 2021, though, they’re cheap and ubiquitous (even
&lt;a href=&quot;https://www.ikea.com/us/en/p/bekant-desk-sit-stand-white-s49022538/&quot;&gt;Ikea sells them&lt;/a&gt;!), and thus
there’s no excuse to not have them.&lt;/p&gt;

&lt;p&gt;For me, the biggest benefit of these “standing desks” isn’t the standing part but rather that I can
make the surface very low. Since I’m shorter than average, the “standard” desk
height is too high for me and makes it uncomfortable to type for long periods. Other people
are most productive when work surfaces are higher than “standard” or at full standing height, so
these desks can make everyone happy.&lt;/p&gt;

&lt;p&gt;Even worse than individual, non-adjustable desks is the “shared countertop” layout that became
popular a few years ago. These not only have the issue that the height is non-optimal, but also
that you can feel the surface vibrate with each keystroke made by your neighbors. At one job,
these vibrations were so distracting that I just couldn’t get any work done; thankfully, after
multiple rounds of escalation, I managed to get a “private” desk that was attached to nothing else
but the floor.&lt;/p&gt;

&lt;h3 id=&quot;overly-decorated-offices&quot;&gt;Overly decorated offices&lt;/h3&gt;

&lt;p&gt;Decorations like plants and wall artwork can really improve the environment in an office.
Some companies, however, take the decoration process too far, to the point that the form
overwhelms the function and makes it harder to get work done.&lt;/p&gt;

&lt;p&gt;At this point, I’m going to abandon my normal discretion here and name names- Airbnb’s headquarters
in San Francisco (where I worked for two years) was really suboptimal in this regard. The main issue
was that nearly every conference room was outfitted not like a normal conference room but rather as
an actual Airbnb listing from somewhere around the world.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong,
&lt;a href=&quot;https://officesnapshots.com/2019/01/29/airbnb-headquarters-san-francisco/&quot;&gt;the office was absolutely beautiful&lt;/a&gt;,
and it was really fun to explore the various rooms and admire the cute furniture and clever touches
that were included in the designs. But, it’s just not optimal to have long business meetings in a
replica Moroccan hut with limited whiteboard space or a fake Spanish dining room with seating on
shared wooden benches. At the time, I was suffering from back and neck issues, so these non-standard
designs were particularly painful- I spent many meetings sitting on the floor with my back against
the wall since this was the least uncomfortable place to be in many of these rooms.&lt;/p&gt;

&lt;p&gt;Decorations are nice, but at a certain point they’re just too much. Regular conference rooms
and desk areas may look “boring”, but when your goal is to create a space where people can get
work done, boring (while still being neat and pretty) is probably better.&lt;/p&gt;

&lt;h2 id=&quot;why-it-matters&quot;&gt;Why it matters&lt;/h2&gt;

&lt;p&gt;Over the years, I’ve gotten a surprising amount of pushback when advocating for improved office
environments. Even when requesting relatively minor things like better window shades so the sun
doesn’t blind me at my desk, I’m sometimes told that the fixes are “too expensive”, “not that
important”, or will “reduce the aesthetics of the office”.&lt;/p&gt;

&lt;p&gt;The main flaw in these arguments, and the one that gets people to change their minds (sometimes)
is that reduced productivity due to a poor office environment is &lt;em&gt;extremely&lt;/em&gt; expensive. In a
high-cost location like California, for instance, the fully loaded cost of an engineer
including taxes, benefits, food, office space, etc. can be more than $300 / hour. If loud noises,
uncomfortable chairs, bright sunlight, or other annoyances reduce the productivity, say, of
100 people by 10%, the cost will be around $24,000 per day, which works out to several million per
year. Installing new window coverings or putting up glass around a noisy atrium is going to be
significantly cheaper.&lt;/p&gt;

&lt;p&gt;The costs are even higher if you consider other, less direct effects, like people being less
happy at work and thus more likely to switch jobs. Although I’ve never quit a job solely due to a
suboptimal office environment, it’s certainly been a factor that’s made me less excited about
my work and more willing to interview elsewhere. In a tight employment market, companies need
to do everything they can to keep their employees happy and productive.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tech offices can be beautiful and productive places, but in many cases the push to increase
density while still looking spacious and “cutting edge” can lead to problems, particularly
when it comes to noise.&lt;/p&gt;

&lt;p&gt;It’s understandable that smaller companies with limited resources won’t be able to optimize
every aspect of their office environments. However, it’s really frustrating when large,
multi-billion dollar companies deliberately build out offices with suboptimal designs.&lt;/p&gt;

&lt;p&gt;At least now, even the most traditional companies are open to remote work. If I encounter a
noisy or unproductive office in the future, I’m just going to return to working from home. Hopefully
others will have the same flexibility.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Looking back over the last decade, I've had a lot of great experiences in the offices of my employers and for the most part these spaces have been comfortable. However, there are certain office features that I've encountered at company after company that are not optimal and end up unnecessarily lowering productivity and happiness. In this post, I want to call these features out and describe how they can be fixed.</summary></entry><entry><title type="html">Migrating to Kubernetes, part 2: Why it’s hard</title><link href="https://yolken.net/blog/migrating-to-kubernetes-is-hard" rel="alternate" type="text/html" title="Migrating to Kubernetes, part 2: Why it’s hard" /><published>2021-04-18T16:47:00-07:00</published><updated>2021-04-18T16:47:00-07:00</updated><id>https://yolken.net/blog/migrating-to-kubernetes-is-hard</id><content type="html" xml:base="https://yolken.net/blog/migrating-to-kubernetes-is-hard">&lt;p&gt;In my &lt;a href=&quot;/blog/migrating-to-kubernetes-legacy-service-platforms&quot;&gt;previous post&lt;/a&gt;, I described
how migrating to Kubernetes involves transitioning an organization’s infrastructure from a
legacy service platform (LeSP) to a Kubernetes service platform (KuSP). In this post, I want
to go into more details on why this migration is hard and what you can do to reduce the pain.&lt;/p&gt;

&lt;p&gt;Unlike my previous post on &lt;a href=&quot;/blog/service-meshes&quot;&gt;why service meshes are hard&lt;/a&gt;, my goal
here is not to dissuade you from doing the migration in the first place, but rather to
make it clear that there are a lot of decisions to be made and lots of work to be done.
Migrating to Kubernetes can be very valuable, but you need to be prepared!&lt;/p&gt;

&lt;h2 id=&quot;why-its-hard&quot;&gt;Why it’s hard&lt;/h2&gt;

&lt;h3 id=&quot;youre-migrating-a-platform-not-a-system&quot;&gt;You’re migrating a platform, not a system&lt;/h3&gt;

&lt;p&gt;The main reason that migrating to Kubernetes is hard is that you’re not just updating a single
component- you’re migrating to an entirely new &lt;em&gt;platform&lt;/em&gt;, the KuSP, that
has its own set of assumptions, requirements, and interfaces.&lt;/p&gt;

&lt;p&gt;As described in &lt;a href=&quot;/blog/migrating-to-kubernetes-legacy-service-platforms&quot;&gt;part 1&lt;/a&gt;, the biggest shift
in going from a LeSP to a KuSP is in the use of containers. Containers require images, which means
that you need new workflows for defining, building, testing, and storing these. Containers usually
have a different networking setup than that of “regular” LeSP application processes, which means
that your networking infrastructure (how you allocate IPs, how service discovery works, how certs
are provisioned, etc.) may have to change.&lt;/p&gt;

&lt;p&gt;Having containers and orchestrating them via Kubernetes will typically also require changes to
whatever frameworks you’re using for logging, metrics, secrets, performance monitoring, deploys,
and other app lifecycle tooling. Although it’s possible to keep using the LeSP
equivalents for these, at a minimum the interfaces will be slightly different; logs, for
instance, will be written into a different place in the file system, and in a different format,
which means that whatever log collector/forwarder you’re using will need to be reconfigured.&lt;/p&gt;

&lt;p&gt;Many of these updates aren’t scary when considered independently. However, there are a lot of
them to do and there are a lot of problems that can be encountered along the way, so the whole
process can take a long time from end-to-end. And, it’s hard to run any mission-critical services in
the KuSP in production before you have at least some basic implementations in place for each of the
core platform components.&lt;/p&gt;

&lt;h3 id=&quot;identity-is-at-a-different-granularity&quot;&gt;Identity is at a different granularity&lt;/h3&gt;

&lt;p&gt;As mentioned in &lt;a href=&quot;/blog/migrating-to-kubernetes-legacy-service-platforms&quot;&gt;part 1&lt;/a&gt;, a KuSP typically
separates machine identity from application identity.
While this is nice from a security and isolation standpoint, it can be a huge pain, particularly
if legacy systems have ingrained the idea that machines map 1:1 to identities.&lt;/p&gt;

&lt;p&gt;In the AWS world, for instance, IAM roles and network interfaces (with their associated IP
addresses and security group designations) are typically tied to EC2 instances. Supporting
container-level roles, externally addressable IPs, security groups, etc. is possible and has been
getting slightly better over time, but is not yet super easy.&lt;/p&gt;

&lt;p&gt;If you’re running a service mesh, then you’ll need to worry about pod-level certificates
and proxies. Third party frameworks like &lt;a href=&quot;https://istio.io/&quot;&gt;Istio&lt;/a&gt; can help here, but
they’re non-trivial to deploy and operate.&lt;/p&gt;

&lt;h3 id=&quot;configuration-is-complex&quot;&gt;Configuration is complex&lt;/h3&gt;

&lt;p&gt;The Kubernetes configuration for a simple, single-container application is
&lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/#creating-and-exploring-an-nginx-deployment&quot;&gt;not too terrible&lt;/a&gt;.
However, as you add in init and sidecar containers, shared volumes, scheduling constraints,
health probes, and other features that production systems might need, these configs can get
pretty hairy.&lt;/p&gt;

&lt;p&gt;This complexity leads to at least two problems when adopting Kubernetes. First, you need
to figure out how to set all of the knobs that the configs expose, which can require reading a
lot of documentation and going through a lot of trial and error. Second, when multiplied out across
dozens (or hundreds) of apps running across different environments, manually creating and updating
the corpus of Kubernetes configs for an organization can become really tedious- you need some
tooling to help.&lt;/p&gt;

&lt;p&gt;Most companies address the second issue with a combination of YAML templating (via systems like
&lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;) and higher-level, organization-specific config generation tools. These
help, but none of the existing options here is really perfect. See
&lt;a href=&quot;https://segment.com/blog/kubernetes-configuration/&quot;&gt;this post&lt;/a&gt; that
I wrote for the Segment engineering blog last year for more detail.&lt;/p&gt;

&lt;p&gt;As part of the migration process, you need to evaluate the various approaches here and either
adopt a third-party tool or write you own, which can be a non-trivial amount of work.&lt;/p&gt;

&lt;h3 id=&quot;some-batteries-not-included&quot;&gt;Some batteries not included&lt;/h3&gt;

&lt;p&gt;Kubernetes includes a powerful set of base API primitives and tooling. However, the pieces it
includes don’t cover 100% of what you need to run Kubernetes in production. Several big chunks,
most significantly
&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/networking/&quot;&gt;service networking&lt;/a&gt;, are
specified in high-level terms but not actually implemented.&lt;/p&gt;

&lt;p&gt;Thankfully, there are solid, third-party solutions available for these missing pieces. As with the
identity mapping issues described above, however, there may be a lot of work involved to
evaluate the various options, make a decision about which ones to use, and deploy them in your
clusters.&lt;/p&gt;

&lt;h2 id=&quot;tips-for-a-smoother-migration&quot;&gt;Tips for a smoother migration&lt;/h2&gt;

&lt;h3 id=&quot;pad-your-estimates&quot;&gt;Pad your estimates&lt;/h3&gt;

&lt;p&gt;Migrating to Kubernetes in any medium-to-large organization is a really big, multi-year
project. If you estimate that it will only take two quarters of work from two engineers, then
you’re probably a bit off the mark unless you’re at a small company.&lt;/p&gt;

&lt;p&gt;Estimating realistically at the beginning isn’t just for the team’s sanity- it’s also really
important for setting expectations among your (internal) customers, who may be eagerly awaiting
Kubernetes to address the pain points they’re facing in the organization’s LeSP. If they
believe that the KuSP can be flicked on with a switch and that it will magically wash away
all of their infrastructure management woes, then they’re bound to be disappointed when
reality sets in down the line.&lt;/p&gt;

&lt;h3 id=&quot;identify-key-customers&quot;&gt;Identify key customers&lt;/h3&gt;

&lt;p&gt;Rather than make Kubernetes work for everyone from the beginning, it’s helpful to initially
focus on a small number of “key customers”. Ideally, these are engineering teams that are:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Frustrated by one or more limitations in the existing LeSP&lt;/li&gt;
  &lt;li&gt;Technically savvy when it comes to infrastructure&lt;/li&gt;
  &lt;li&gt;Enthusiastic about Kubernetes in general&lt;/li&gt;
  &lt;li&gt;Eager to get their hands dirty and make the project a success!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By working with just these customers, the team running the migration can focus on a limited
subset of use cases and get active help on improving the associated tools and processes.
Once these customers are migrated and happy with the results (hopefully), they can serve as examples
of how to use the KuSP and also help evangelize the migration within the organization.&lt;/p&gt;

&lt;p&gt;At Airbnb, we initially worked with the team that was running
&lt;a href=&quot;https://airbnb.io/projects/superset/&quot;&gt;Superset&lt;/a&gt; internally. At Stripe, we partnered with the teams
that were building the company’s
&lt;a href=&quot;https://stripe.com/blog/railyard-training-models&quot;&gt;machine learning training pipelines&lt;/a&gt; and
using these models to detect fraud in incoming charge requests. At both companies, doing these
initial migrations was critical for proving that Kubernetes could work and provide value.&lt;/p&gt;

&lt;h3 id=&quot;involve-the-entire-organization&quot;&gt;Involve the entire organization&lt;/h3&gt;

&lt;p&gt;Migrating customers in a 1:1, “white glove” manner is fine, but unless you have a 30 person
migration team, this high-touch approach won’t efficiently scale. Once you’re migrated
the initial “key customers”, proved that Kubernetes will work, and worked out the initial bugs, you
need to get help from the larger organization.&lt;/p&gt;

&lt;p&gt;Ideally, most teams are responsible for migrating their services themselves. This frees up the
Kubernetes team to answer questions, monitor the shared infrastructure, improve general usability
and reliability, and focus on the hairier migrations that need more hand-holding.&lt;/p&gt;

&lt;p&gt;Unfortunately, some teams might prioritize other things above helping out with a messy
infrastructure migration that doesn’t directly benefit them. This is where management really needs
to step in, set priorities, and make it clear that product features will be pushed back to
make room for migration work. If management isn’t willing to this this, then that’s fine, but
they’ll need to understand that the project will go on for a very, very long time without this
help.&lt;/p&gt;

&lt;h3 id=&quot;dont-just-focus-on-the-long-tail&quot;&gt;Don’t just focus on the long tail&lt;/h3&gt;

&lt;p&gt;It’s tempting when doing a Kubernetes migration to start with small, non-critical services and then
gradually work up to the big, “monster” services that lots of people work on and are key for
delivering the company’s products.&lt;/p&gt;

&lt;p&gt;While it’s fine to focus on the long tail at the beginning, I think procrastinating too much on
attacking whatever “the beasts” are at an organization (e.g., that old, crufty service that
handles all the API requests) can really be a detriment and reduce the project’s momentum.&lt;/p&gt;

&lt;p&gt;First, these larger services are typically where there’s the most pain and where a migration
can have the biggest impact on engineer productivity. Second, the only way to really flush out
the bugs and rough edges, both in terms of usability and also in terms of the performance and
reliability of the technology, is to exercise the KuSP in a high-usage, high-traffic environment.&lt;/p&gt;

&lt;p&gt;If you’re only using Kubernetes for the less critical components of your stack, then it’s hard
to claim that Kubernetes (and, by extension, your team’s work) is critical to the success of your
company.&lt;/p&gt;

&lt;h3 id=&quot;avoid-scope-creep&quot;&gt;Avoid scope creep&lt;/h3&gt;

&lt;p&gt;Handling just the “must haves” in a Kubernetes migration is hard enough. Resist the temptation
to treat this as an opportunity to fix every other legacy platform component that’s in a
non-optimal state, particularly if the migration makes these things no worse than before.&lt;/p&gt;

&lt;p&gt;While it would be great to get Kubernetes bundled with a new networking stack, a new secrets system,
a new logging system, etc. each of these extra dimensions adds more things that will be
unfamiliar to users, and more things that can break in production. Focus on what is needed to
migrate successfully, then handle the “nice to haves” in later phases of the project.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Migrating to Kubernetes is a big deal because it’s a complicated system, and it touches on so many
different aspects of the “platform” that apps run on in an organization.&lt;/p&gt;

&lt;p&gt;Even with strong execution, the migration can take years and require contributions from
engineering teams across the company. It’s hard work, and there are definitely still some rough
edges in the Kubernetes ecosystem, but I think the end result can really improve developer
happiness and productivity if implemented in a sensible way. Good luck!&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">In my previous post, I described how migrating to Kubernetes involves transitioning an organization's infrastructure from a legacy service platform (LeSP) to a Kubernetes service platform (KuSP). In this post, I want to go into more details on why this migration is hard and what you can do to reduce the pain associated with this transition.</summary></entry><entry><title type="html">Migrating to Kubernetes, part 1: Moving on from the legacy service platform</title><link href="https://yolken.net/blog/migrating-to-kubernetes-legacy-service-platforms" rel="alternate" type="text/html" title="Migrating to Kubernetes, part 1: Moving on from the legacy service platform" /><published>2021-04-17T13:06:00-07:00</published><updated>2021-04-17T13:06:00-07:00</updated><id>https://yolken.net/blog/migrating-to-kubernetes-legacy-service-platforms</id><content type="html" xml:base="https://yolken.net/blog/migrating-to-kubernetes-legacy-service-platforms">&lt;p&gt;Over the last few years, I’ve worked on
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; migrations at several companies-
Airbnb, Stripe, and, most recently, Segment (my current employer). In this post, I want to talk
about why these migrations are done and what they involve from the platform standpoint.&lt;/p&gt;

&lt;p&gt;Note that this post is the first of two in my “migrating to Kubernetes” series. Once you’re
read this one, check out &lt;a href=&quot;/blog/migrating-to-kubernetes-is-hard&quot;&gt;part 2&lt;/a&gt; on why these
migrations are hard and some tips for a smoother transition to Kubernetes.&lt;/p&gt;

&lt;h2 id=&quot;why-migrate&quot;&gt;Why migrate?&lt;/h2&gt;

&lt;p&gt;There’s lots of existing documentation about what Kubernetes is and how it works (e.g.,
&lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&quot;&gt;this one&lt;/a&gt;), so
I won’t cover those here. It is worth noting, however, the primary reasons that many companies
decide to migrate to Kubernetes from their legacy platforms (discussed more in the next section):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;The ecosystem:&lt;/em&gt; A vast ecosystem of tools and apps has developed around
  Kubernetes over the last few years. By using Kubernetes internally, it’s easier to take
  advantage of the work that others have done, both in the infrastructure layer (e.g.,
  for networking, service discovery, etc.) and in the applications that are
  being run on top.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Vendor agnosticism:&lt;/em&gt; Kubernetes provides a layer of abstraction on top of whatever
  you’re using to provision individual machines and the associated infrastructure (networking,
  persistent disks, etc.). In theory, switching to Kubernetes makes it easier to do things
  like switch between cloud providers, although in practice this is still hard because
  of all the non-Kubernetes-related infrastructure you need to migrate as well.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Easier, more self-service workload management:&lt;/em&gt; Kubernetes exposes a rich set of APIs
  and controllers for deploying applications, ensuring that they run reliably, and enabling
  developers to debug them when things go wrong. In theory, developers can take advantage
  of these features “out of the box”, without worrying about low-level machine details,
  writing lots of custom tooling, or depending on a separate “infra” team in the organization
  to set things up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;legacy-service-platforms&quot;&gt;Legacy service platforms&lt;/h2&gt;

&lt;p&gt;The process for migrating to Kubernetes depends a lot on what you’re migrating from.
This includes not just whatever is being used to build and deploy applications, but
also the wider set of infrastructure and tooling used for managing application environments
in production.&lt;/p&gt;

&lt;p&gt;By analogy to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Platform_as_a_service&quot;&gt;PaaS&lt;/a&gt; products that are
offered by some cloud providers, I’ll call this pre-Kubernetes “bundle of stuff” a
&lt;em&gt;legacy service platform&lt;/em&gt; or &lt;em&gt;LeSP&lt;/em&gt; for short. Normally I hate the term “platform” since it’s so
overused (seems like it’s super trendy at the moment for companies to be building “platforms”
instead of “products”), but in this case I think it’s actually appropriate- the LeSP is literally a
base on which applications in an organization are created and run.&lt;/p&gt;

&lt;p&gt;The exact details of the LeSP will vary a lot from company to company. Typically, though,
they have some common characteristics.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img src=&quot;/assets/kubernetes1.png&quot; alt=&quot;legacy service platform&quot; width=&quot;700&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;its-about-machines&quot;&gt;It’s about machines&lt;/h4&gt;

&lt;p&gt;In a LeSP, the main unit of compute is a &lt;em&gt;machine&lt;/em&gt;, either a virtual machine (VM) like
one provided by &lt;a href=&quot;https://aws.amazon.com/ec2&quot;&gt;AWS EC2&lt;/a&gt; or a physical box sitting in a data
center somewhere.&lt;/p&gt;

&lt;p&gt;Machines are provisioned from a &lt;em&gt;base image&lt;/em&gt; that includes the operating system and other,
low-level software. There is then a &lt;em&gt;configuration management&lt;/em&gt; process, typically orchestrated
by a framework like &lt;a href=&quot;https://www.chef.io&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;https://puppet.com/&quot;&gt;Puppet&lt;/a&gt;, that
installs the higher-level tools and systems needed to run applications on the box- these might
include language runtimes for things like Python and Ruby, log and metrics collectors, performance
monitoring tools, and company-specific automation scripts, among other things.&lt;/p&gt;

&lt;h4 id=&quot;applications-and-identities&quot;&gt;Applications and identities&lt;/h4&gt;

&lt;p&gt;Each machine is configured and provisioned for a specific application. So, if you have ten different
services running in production, you’ll typically have ten different machine variants, each
running in a separate pool. The “zebra” service will have “zebra machines” that contain
the specific things it needs to run (maybe a
&lt;a href=&quot;https://www.infoworld.com/article/3304858/what-is-the-jre-introduction-to-the-java-runtime-environment.html&quot;&gt;JRE&lt;/a&gt;),
the “cheetah” service will have “cheetah machines” that contain what it needs (maybe a Ruby
interpreter and an Nginx process), and so forth.&lt;/p&gt;

&lt;p&gt;Identity, as it pertains to networking and authentication, is at the granularity of a
machine. All processes running on the same host use the same IP address(es), the same cloud role,
the same x509 certificates, etc. So, the “zebra machines” will run with the “zebra” role,
use a “zebra” certificate, live in a “zebra” network security group, etc.&lt;/p&gt;

&lt;h4 id=&quot;deploys&quot;&gt;Deploys&lt;/h4&gt;

&lt;p&gt;The primary application processes on each instance are typically created and updated by a
higher-level &lt;em&gt;deploy system&lt;/em&gt;. So, for instance, if a developer wants to update the
“zebra” service in production from version 1234 to version 1235, they would give the deploy system
the new version (or this would be automatically detected), and then the latter system would
handle getting onto each of the “zebra machines”, pulling down an updated artifact, extracting out
whatever binaries, scripts, and configs the application needs to run the new version, and
restarting the app.&lt;/p&gt;

&lt;p&gt;These deploy systems are typically pretty complicated because they need to support all of the
various rules, workflows, and infrastructure quirks specific to each organization. A few, like
Netflix’s &lt;a href=&quot;https://spinnaker.io/&quot;&gt;Spinnaker&lt;/a&gt;, have been open-sourced, but many companies still end
up building their own because of the amount of customization required.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-service-platforms&quot;&gt;Kubernetes service platforms&lt;/h2&gt;

&lt;p&gt;When you migrate to Kubernetes, you’re replacing the LeSP with a new, Kubernetes-based service
platform. Following the same naming style, let’s call this thing a &lt;em&gt;Kubernetes service platform&lt;/em&gt;
or &lt;em&gt;KuSP&lt;/em&gt; for short.&lt;/p&gt;

&lt;p&gt;KuSPs have a few big differences from LeSPs, which are described in the sections below.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img src=&quot;/assets/kubernetes2.png&quot; alt=&quot;kubernetes service platform&quot; width=&quot;700&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;its-about-containers&quot;&gt;It’s about containers&lt;/h4&gt;

&lt;p&gt;In the KuSP, as opposed to the LeSP, the main unit of compute is a &lt;em&gt;container&lt;/em&gt;, not a machine.
At a high level, a container is just a semi-isolated process. Each container runs from an &lt;em&gt;image&lt;/em&gt;,
which is effectively a layered, read-only bundle that contains the binaries, tools, and configs
needed to create the environment in which the container runs.&lt;/p&gt;

&lt;p&gt;Containers run in machines, so you still need to provision them, but the configuration for these
machines can be simpler and more generic. The main requirement is to install
a container runtime such as &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. Once the latter is in place, you can
use it to run containers for your applications and various helper services (for logs, metrics,
networking, etc.). You can still use Chef or Puppet if you want to, but these are less important
because much of the heavy lifting is now done in the higher-level container and orchestration
layers.&lt;/p&gt;

&lt;h4 id=&quot;applications-and-identities-1&quot;&gt;Applications and identities&lt;/h4&gt;

&lt;p&gt;In a container-based service platform, applications are less coupled to specific
machine variants. The “zebra” service can still have its own, “zebra machine” pool, but this
is less necessary than before because most of the service-specific components can be baked into the
service image as opposed to being installed on the instances on which the container runs.&lt;/p&gt;

&lt;p&gt;Identity also moves from the machine to the container layer. Each container can now have its own
IP address, x509 certificate, cloud service role, etc. independent of the identity of the host
that it’s running on. This isn’t a drop-dead requirement (containers can use the host network,
for instance), but it’s considered best practice from a security and isolation standpoint to
enforce this separation.&lt;/p&gt;

&lt;h4 id=&quot;orchestration-via-kubernetes&quot;&gt;Orchestration via Kubernetes&lt;/h4&gt;

&lt;p&gt;Containers by themselves are fairly low-level and specific to individual machines. Kubernetes
adds yet another level of abstraction on top of containers that &lt;em&gt;orchestrates&lt;/em&gt; changes across
containers in a &lt;em&gt;cluster&lt;/em&gt; of machines. With Kubernetes, applications are updated by changing
the associated resources in the Kubernetes API. The Kubernetes control plane then figures
out which containers on which instances need to be changed, and a special agent on each machine,
the &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&quot;&gt;&lt;em&gt;kubelet&lt;/em&gt;&lt;/a&gt;,
actually carries out the updates.&lt;/p&gt;

&lt;p&gt;Although it’s still possible to have a custom deploy system for managing workflows and such,
this system ends up delegating most of the low-level details of each update to the Kubernetes API.&lt;/p&gt;

&lt;p&gt;Kubernetes doesn’t just handle image updates for individual containers. It provides a ton of
other functionality as well including bundling containers together as a unit (i.e. a
&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/&quot;&gt;&lt;em&gt;pod&lt;/em&gt;&lt;/a&gt;),
configuring container networking, mounting container disk volumes, storing and exposing application
secrets (e.g., DB passwords), monitoring container health, restarting failed containers, exposing
APIs for viewing logs, allowing developers to “exec” into containers for debugging purposes, etc.&lt;/p&gt;

&lt;p&gt;Not all of these things are required. You may, for instance, be able to keep using your LeSP
secrets system instead of migrating to Kubernetes secrets. But, there are a lot of choices to
be made here, and using non-standard or non-Kubernetes-aware solutions here might require some
extra work.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Migrating to Kubernetes involves moving from a machine-based, legacy service platform (LeSP)
to a shiny, new, container-based one (the KuSP). This transition doesn’t just change how
processes are executed at a low-level, but also affects higher-level things like application
identity and deploys.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;/blog/migrating-to-kubernetes-is-hard&quot;&gt;next post&lt;/a&gt; in this series describes why
the migration is hard and what can be done to make it a bit less painful.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Over the last few years, I've worked on migrations at several companies- Airbnb, Stripe, and Segment. In this post, I want to talk about why these migrations are done and what they involve from the platform standpoint.</summary></entry><entry><title type="html">The senior engineer plateau</title><link href="https://yolken.net/blog/senior-engineer-plateau" rel="alternate" type="text/html" title="The senior engineer plateau" /><published>2021-04-11T14:01:00-07:00</published><updated>2021-04-11T14:01:00-07:00</updated><id>https://yolken.net/blog/senior-engineer-plateau</id><content type="html" xml:base="https://yolken.net/blog/senior-engineer-plateau">&lt;p&gt;A large percentage of software engineers spend years at the “senior engineer” level. At
many companies, including most of my former employers (i.e., Google, Twitter, Airbnb, and Stripe),
this level is fairly straightforward to get into, but hard to get promoted beyond. The difficulty in
advancing past “senior” can cause a lot of frustration and make people feel stuck in their
careers.&lt;/p&gt;

&lt;p&gt;In this post, I want to share some observations about this “senior engineer plateau”, why
it causes frustration, and how to navigate out of it.&lt;/p&gt;

&lt;h2 id=&quot;aside-the-senior-engineer-level&quot;&gt;Aside: The senior engineer level&lt;/h2&gt;

&lt;p&gt;As described in &lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;my earlier blog post&lt;/a&gt;, most
companies beyond a small size have well-defined career ladders for software engineers, with at
least 4 levels. The details vary from company to company, but in most of these ladders the
“senior” level is what employees get to after 5+ years of industry experience.&lt;/p&gt;

&lt;p&gt;At most places, this rung on the ladder is also considered the “career level”, which implies a few
things. First, this means that once you get to it, you can stay in it forever- as long as you meet
expectations, you can spend 30+ years as a senior engineer, and no one will ever complain about
your lack of ambition or try to push you out for not advancing further.&lt;/p&gt;

&lt;p&gt;Second, as the “career level”, it means that people’s careers naturally flow into it. Assuming
the correct mentorship, management, project work, etc., most company promotion processes don’t
put up lots of barriers for people getting to “senior” and, moreover, might even require them to do
this after a certain number of years at the company.&lt;/p&gt;

&lt;p&gt;Once you get to senior, however, the path beyond it can be much harder. Because staff and higher
roles can come with significantly more compensation (discussed below) and because not everyone
is expected to get up to these levels, companies are much, much pickier about how and why they
promote people into them.&lt;/p&gt;

&lt;h2 id=&quot;aside-why-level-matters&quot;&gt;Aside: Why level matters&lt;/h2&gt;

&lt;p&gt;A common statement I hear is that “levels don’t matter” and thus that people shouldn’t care whether
they’re stuck at senior or somewhere else on the ladder for a long time.&lt;/p&gt;

&lt;p&gt;While this is true from a strictly title-based standpoint (personally, and like many others, I
really don’t care whether my LinkedIn profile says “software engineer” as opposed to “staff software
engineer” or something else), the reality is that levels are more than just words.&lt;/p&gt;

&lt;p&gt;First, they’re an acknowledgement of the work that you’ve done. Many engineers, myself included,
are motivated by working on things that matter, and levels are one way (but certainly not the only
way) to express that one’s work is valued and has had a positive impact at the company.&lt;/p&gt;

&lt;p&gt;Second, and probably more importantly for many, levels can play a big role in compensation. As
described in &lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;my earlier blog post&lt;/a&gt;, each level has associated salary and
equity bands. Once you hit the upper end of the band, which may happen relatively quickly if you
negotiated well for your initial offer, it’s hard to get significant increases from year-to-year.&lt;/p&gt;

&lt;p&gt;There are a few other ways, beyond pay bands, that levels affect compensation. At some companies
significant equity increases are tied to promotion. If you don’t get promoted, you might not get
stock refreshers frequently. Also, at companies with bonus programs, the target is often tied
to level. When I was at Stripe, for instance, senior engineers had a target of 10% of base salary
whereas staff had a 20% one. This meant that, all else being equal, staff engineers would get
significantly larger bonuses. Google also had level-specific targets when I was there.&lt;/p&gt;

&lt;p&gt;These links between levels and pay are not always 100% fair, but they’re the reality of the
compensation systems at most tech companies. Thus, you sometimes need to “work the system”
around levels to ensure that you’re paid competitively.&lt;/p&gt;

&lt;h2 id=&quot;common-frustrations&quot;&gt;Common frustrations&lt;/h2&gt;

&lt;p&gt;The following sections describe some of the common frustrations that I’ve felt myself and/or
observed in other senior engineers over my last few jobs.&lt;/p&gt;

&lt;h4 id=&quot;productivity-alone-is-not-sufficient&quot;&gt;Productivity alone is not sufficient&lt;/h4&gt;

&lt;p&gt;Many senior engineers are super productive from a coding standpoint- because they’re experienced
enough to know what they’re doing (usually) and because they don’t have the extra responsibilities
of managers and more senior level ICs, they’re often at the sweet spot where they can “get stuff
done” with minimal distractions.&lt;/p&gt;

&lt;p&gt;Unfortunately, though, this productivity alone is often not sufficient for getting promoted.
It’s a data point for sure, but at many companies it’s just one of many things that’s considered.&lt;/p&gt;

&lt;p&gt;This causes frustration for many, and was personally something that puzzled me earlier in my
career, because intuitively it feels like productivity &lt;em&gt;should&lt;/em&gt; be the main criterion for promotion.
Engineers are hired to create software just as doctors are hired to treat patients and artists are
hired to make art. So, if you are more hard-working and efficient at creating software and related
outputs (e.g., documentation, bug fixes, etc.) than others, you should be rewarded with a promotion.&lt;/p&gt;

&lt;p&gt;But, alas, this isn’t how most career ladders are set up- these systems reward “impact” as opposed
to “output”. Productivity is a necessary condition for having a positive impact in an
organization, but, particularly as you get into higher levels, other things like working on
projects that are sufficiently complex, demonstrating cross-team leadership, being visible, etc. are
required as well.&lt;/p&gt;

&lt;h4 id=&quot;breadth-over-depth&quot;&gt;Breadth over depth&lt;/h4&gt;

&lt;p&gt;A related frustration I’ve seen with getting to staff level at large companies is that the
promotion criteria often place a bigger emphasis on breadth as opposed to depth. You can be an
expert in a technical field and do great work there, but if you don’t also check off other boxes
(e.g., cross-team coordination, mentorship, etc.), then you’ll likely hit roadblocks in getting
to the next level.&lt;/p&gt;

&lt;p&gt;Thus, the system tends to reward people whose work is “horizontal”, i.e. spread across multiple
projects, domains, and types of work as opposed to those who are more “vertically” focused
on a specific thing. This isn’t necessarily wrong (horizontal work can have a big, positive impact
on a company and should be rewarded as such), but it is something to be aware of and is something
that can cause some frustration if, like me, you’re more about depth than breadth.&lt;/p&gt;

&lt;h4 id=&quot;visibility-required&quot;&gt;Visibility required&lt;/h4&gt;

&lt;p&gt;For promotion to senior and lower levels, the direct manager’s word is usually enough- if the
manager says that one of their reports is ready for the next level, and there’s some basic peer
validation, then the person will most likely get promoted.&lt;/p&gt;

&lt;p&gt;For staff and higher levels, though, the manager’s word is typically not enough. The person up for
promotion could be the greatest engineer in the world, but if no one outside of their immediate
team can affirm this, then they’re unlikely to get to the next level.&lt;/p&gt;

&lt;p&gt;The easiest way to get this affirmation is to be &lt;em&gt;visible&lt;/em&gt; to those outside of your team and
particularly to those who are making the promotion decision. Unfortunately, though, this can be
hard if you’re super introverted (as I am), or you’re working head’s down on a deep technical
problem that isn’t flashy and doesn’t naturally lend itself to cross-company visibility.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix-it&quot;&gt;How to fix it&lt;/h2&gt;

&lt;h4 id=&quot;find-the-right-role&quot;&gt;Find the right role&lt;/h4&gt;

&lt;p&gt;This might come across as a bit extreme, but if you really care about career advancement then
the most important thing is to find a company and a role where the work and evaluation criteria
match your strengths. Personally, I feel that I’m strongest on the productivity side
and less good at the “cross-team coordination”, “evangelizing new technologies across the company”,
and other dimensions that high-level ICs are promoted for. Other people, however, might excel at
the latter and not want to spend all day pumping out pull requests.&lt;/p&gt;

&lt;p&gt;It’s important to note here that there can be a ton of variation not only between companies at a
high-level but also between the roles within a company. Backend infrastructure engineers in
division X, for instance, might be evaluated differently than frontend product engineers in the same
division, and these two groups might be evaluated differently than engineers doing similar work in
division Y at the same company.&lt;/p&gt;

&lt;p&gt;Before you sign a new job offer or switch teams inside a company, it’s really important to assess
your strengths and compare them to the work outputs and behaviors that are rewarded for the role.&lt;/p&gt;

&lt;h4 id=&quot;make-sure-you-check-the-boxes&quot;&gt;Make sure you check the boxes&lt;/h4&gt;

&lt;p&gt;As mentioned above, many companies evaluate employees on a broad set of criteria and require
positive signal in all of them before allowing a promotion. Thus, if you’re trying to advance
it’s really important that you “check off all the boxes”, even if some of these aren’t fun or
aligned to your strengths. So, for instance, if getting to staff requires “mentorship experience”,
then it’s important that you have some opportunity to do this, e.g. by hosting an intern for the
summer.&lt;/p&gt;

&lt;p&gt;You should consult your company’s career ladder documentation and work closely with your direct
manager to figure out what these boxes are and how you can fill out the missing pieces.&lt;/p&gt;

&lt;h4 id=&quot;improve-your-visibility&quot;&gt;Improve your visibility&lt;/h4&gt;

&lt;p&gt;Getting more visibility for yourself and your work is really key for advancing to higher
levels. Even if you’re introverted and even if it’s uncomfortable, you need to ensure that
the people evaluating your work understand what you’re doing and why it’s important.&lt;/p&gt;

&lt;p&gt;In some cases, for instance if you’re at a really small company or working on a flashy,
high-visibility product in a larger company, the visibility comes for free. In other cases,
though, you need to do extra work to get this. Some tips here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do regular “skip level” 1:1s with your manager’s manager; if they don’t understand your work
  and aren’t promoting you to others, then it’s going to be hard to get ahead.&lt;/li&gt;
  &lt;li&gt;Send out progress reports, launch announcements, etc. so others beyond your immediate team
  know what you and your colleagues are working on.&lt;/li&gt;
  &lt;li&gt;Write blog posts, present at conferences, do internal “tech talks”, and participate in other
  activities that allow you to build your personal brand and promote your work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At many companies, the senior engineer level is easy to get into but hard to advance beyond.
I personally felt stuck at senior earlier in my career and many of my colleagues over the years
have experienced similar feelings.&lt;/p&gt;

&lt;p&gt;The key thing is to realize how the system works and ensure that where you’re working and what
you’re working on are aligned with your long-term career goals. Once you achieve this alignment,
advancing can still be slow but at least there’s a clear, achievable path to follow.&lt;/p&gt;</content><author><name></name></author><category term="career" /><summary type="html">At many companies the &quot;senior engineer&quot; level is fairly straightforward to get into, but hard to get promoted beyond. The difficulty in advancing past &quot;senior&quot; can cause a lot of frustration and make people feel stuck in their careers. In this post, I want to share some observations about this &quot;senior engineer plateau&quot;, why it causes frustration, and how to navigate out of it.</summary></entry><entry><title type="html">Non-optimal engineer personas</title><link href="https://yolken.net/blog/non-optimal-engineer-personas" rel="alternate" type="text/html" title="Non-optimal engineer personas" /><published>2021-02-15T13:15:00-08:00</published><updated>2021-02-15T13:15:00-08:00</updated><id>https://yolken.net/blog/non-optimal-engineer-personas</id><content type="html" xml:base="https://yolken.net/blog/non-optimal-engineer-personas">&lt;p&gt;Software engineers are an interesting bunch. Over the course of my career thus far,
I’ve interacted with hundreds of colleagues, and it feels like I’ve seen everything- people who
won’t wear shoes, people who refuse to have their ID picture taken, people who voluntarily start
their day at 9PM, and many other behaviors that would be considered “weird” in normal workplaces.&lt;/p&gt;

&lt;p&gt;Most of these quirks don’t bother me, and I have a few of my own. However, there are certain
traits that show up on the personality side that can be genuinely counterproductive to my team’s
work. In this post, I want to explain what these are and how I try to deal with them.&lt;/p&gt;

&lt;p&gt;Note that I’m &lt;em&gt;not&lt;/em&gt; trying to demonize or stigmatize anyone here as I think everyone, myself
included, exhibits these traits sometimes to a certain extent. Rather, the point is to understand
what they are, recognize when they’re getting in the way, and mitigate their effects so that we can
all be happier and more productive as we’re trying to get our work done.&lt;/p&gt;

&lt;h2 id=&quot;non-optimal-personas&quot;&gt;Non-optimal personas&lt;/h2&gt;

&lt;p&gt;The sections below go into more detail on each trait. I’m framing them as “personas” to make the
discussion a little more fluid.&lt;/p&gt;

&lt;h3 id=&quot;the-overanalyzer&quot;&gt;The overanalyzer&lt;/h3&gt;

&lt;p&gt;The overanalyzer gets hung up on analyzing every technical decision they encounter in their
day-to-day work.&lt;/p&gt;

&lt;p&gt;The problem with overanalysis in the context of software engineering is that there are so
many choices to make on a daily basis. At the low-level, you have mundane things like variable names
and function interfaces- should it be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myFunc(config struct)&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myFunc(parameter1, parameter2, etc.)&lt;/code&gt;? At the higher-level, there are bigger choices about
architectures and technologies- for our new container orchestration system, should we use
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;ECS&lt;/a&gt;,
&lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;Nomad&lt;/a&gt;, &lt;a href=&quot;https://netflix.github.io/titus/&quot;&gt;Titus&lt;/a&gt;, or something else?&lt;/p&gt;

&lt;p&gt;The problem isn’t just the number of choices, it’s that for many of them there isn’t a single,
“right” answer. In many cases, e.g. the container orchestration example above, there are
perfectly valid reasons for picking any one of them over the others. A big part of software
engineering, and one of the things that distinguishes it from just “coding”, is evaluating these
tradeoffs and making decisions, even when the choices can’t be perfect on all dimensions.&lt;/p&gt;

&lt;p&gt;Overanalyzers get paralyzed by these choices and thus can’t make decisions quickly. As a result,
their productivity is low and, if their work is in the critical path, they can block the team
from making forward progress and meeting deadlines.&lt;/p&gt;

&lt;h3 id=&quot;the-perfectionist&quot;&gt;The perfectionist&lt;/h3&gt;

&lt;p&gt;The perfectionist, unlike the overanalyzer, has a clear vision for what they want. However,
they refuse to accept anything short of their final vision- it has to be perfect, or it shouldn’t
be done at all.&lt;/p&gt;

&lt;p&gt;Perfectionism is really hard to achieve in software for a few reasons. First off, &lt;em&gt;all&lt;/em&gt; software
has rough edges. No matter how much work you put into something, you’re going to have some bugs
or errant pixels or missing features somewhere in your product. Secondly, most software progress
is delivered incrementally- you don’t achieve perfection in your first release. Instead, you
address the highest priority features and/or bugs, deliver your product, get feedback, and then
repeat the cycle. Many large, successful software products like Microsoft Office or the Python
programming language have been doing this for decades.&lt;/p&gt;

&lt;p&gt;Perfectionist software engineers get in the way by blocking your work unless you immediately address
their long list of idealized requirements.&lt;/p&gt;

&lt;p&gt;Sometimes, the interactions are relatively mundane, e.g. in the context of a small code review:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: I need you to refactor class X and backfill tests as part of your change.&lt;/p&gt;

  &lt;p&gt;Me: My change only touched one line of X. I’m already rewriting Y as part of this change, I’m not
making X worse, and I don’t have any context on the original X code so it will take me days to
untangle this mess.&lt;/p&gt;

  &lt;p&gt;Them: Sorry, I can’t approve until you fix this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The blockers can be bigger when doing design or architecture reviews:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: I can’t allow you to roll out your new container orchestration system because it doesn’t
have signed images and an interactive UI.&lt;/p&gt;

  &lt;p&gt;Me: Our current system doesn’t have those things. No one other than you is requesting them,
and it will take months to add them. We can work on those features in v2 if needed.&lt;/p&gt;

  &lt;p&gt;Them: No. Either you have signed images and an interactive UI in v1 or there’s no point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Blocking regressions or things that explicitly prevent improvement in the future is definitely
worthwhile, but perfectionists take this to the extreme of blocking non-regressive, incremental
progress too.&lt;/p&gt;

&lt;h3 id=&quot;the-luddite&quot;&gt;The Luddite&lt;/h3&gt;

&lt;p&gt;The Luddite is unreasonably resistant to any sort of big, technological change. They believe
that the current ways of doing things, despite their faults, are superior to any new approaches that
come along.&lt;/p&gt;

&lt;p&gt;Luddism doesn’t mesh well with software engineering because software technologies, tools, and
best practices are constantly evolving. Just because things like PHP and Java were state-of-the-art
20 years ago doesn’t mean that they’re still the best choices for every project today. Of course,
there are tradeoffs here- older technologies can still be very good, and there are definite
downsides to switching things around just for the sake of using the latest and greatest tech.&lt;/p&gt;

&lt;p&gt;The Luddite, however, is uniformly and stubbornly insistent that new projects, even ones that
are completely “greenfield”, make only minor adjustments on top of the company’s existing
standards and technologies.&lt;/p&gt;

&lt;p&gt;Over the last few years, I’ve sometimes hit this persona when trying
to roll out Kubernetes and other, big infrastructure improvements at a company:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Our current orchestration system is great, we don’t need Kubernetes.&lt;/p&gt;

  &lt;p&gt;Me: Well, it has a lot of issues. For instance, it takes 7 days and approvals from 3 people to
create a new service. And, the configs are spread across 6 repositories.&lt;/p&gt;

  &lt;p&gt;Them: We’re working on a big project to cut that down to 6 days, 2 people, and 5 repositories. It
will be ready at the end of next year.&lt;/p&gt;

  &lt;p&gt;Me: Umm, maybe there’s a better way? Please hear me out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often times, the resistance is rooted in personal feelings. The Luddite has invested a lot of time
and energy in the current ways of doing things, and they feel that adopting something new will
diminish their previous contributions. Or, they’re worried that new technology will take away
their control and thus reduce their future influence inside the organization.&lt;/p&gt;

&lt;h3 id=&quot;the-complainer&quot;&gt;The complainer&lt;/h3&gt;

&lt;p&gt;The complainer spends an inordinate amount of time complaining about the faults in other
people’s work in a way that blocks progress.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong here- there’s something very cathartic about complaining, and I think we all
enjoy doing it every now and then. However, it becomes a problem when the person complaining
is giving feedback that’s not actionable or, if actionable, without any willingness to help make
things better.&lt;/p&gt;

&lt;p&gt;A quick story- at the beginning of my career, I was a product manager on Google’s system
for allocating compute and storage resources inside the company. Teams would get these resources
and then build the company’s externally-facing products (e.g., search, Gmail, YouTube, etc.) on top
of them.&lt;/p&gt;

&lt;p&gt;Our system, to put it mildly, was not the most popular among engineers at Google. I routinely heard
complaints that it “sucked” or “should be deleted”. One very senior person even told me that he
hated our system more than his recent experience of being stuck in the Atlanta
airport with a screaming toddler for 12 hours.&lt;/p&gt;

&lt;p&gt;None of these people really had any ideas for how to make our system better. Instead, they just
demoralized the team and blocked us from making progress since they would be fighting
against us as we tried to get more resources or push through incremental improvements.&lt;/p&gt;

&lt;p&gt;Since moving on from my stint in Google’s resource management organization, this level of
negativity has been pretty rare. However, I’m still sometimes blocked by complaints without much
willingness to help.&lt;/p&gt;

&lt;p&gt;One example is in the context of security reviews, which many companies
require for new product launches. At a previous job, my interactions with the security engineer
went like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Your service isn’t secure. You need to do more to ensure that only authorized users can
make requests to your API endpoints.&lt;/p&gt;

  &lt;p&gt;Me: Hmm, I’m not really an expert on security. Can you help me with this or at least point me
to an internal example that does things the “right” way?&lt;/p&gt;

  &lt;p&gt;Them: Oh no no, I’m way too busy to do that. You really need to figure it out yourself.&lt;/p&gt;

  &lt;p&gt;Me: &lt;em&gt;Sigh.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve also seen this behavior in interactions with lawyers (technically, they’re not engineers, but
they interact with us a lot, so I’m including the example):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Your product feature is not compliant with EU regulation 124-XZ. I can’t let you launch it
in its current form since this would put the company at great legal risk.&lt;/p&gt;

  &lt;p&gt;Me: Ok, what specific things do I need to change to make the software compliant?&lt;/p&gt;

  &lt;p&gt;Them: Well, 124-XZ is really complicated, it’s hard to say. I’ll have to get back to you.
&lt;em&gt;Silence for weeks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Complaints are fine, but if they don’t come with any offer of help (or at least specific details
of what to fix), then they can really block progress on a project.&lt;/p&gt;

&lt;h3 id=&quot;the-nexus&quot;&gt;The nexus&lt;/h3&gt;

&lt;p&gt;The nexus wants to be at the center of all decisions, and gets upset when they’re not consulted
about each one.&lt;/p&gt;

&lt;p&gt;As described in the “overanalyzer” section above, software development involves making a lot of
decisions. Once you get beyond a small number of people, however, it’s really, really hard for any
one person to be involved in each one. At a certain point, you just have to relax, trust
other people to do the right thing, and realize that if someone does make a terrible decision
without your knowledge, you can usually fix it after-the-fact.&lt;/p&gt;

&lt;p&gt;The nexus, on the contrary, will insist that they be included in every meeting and code review
related to your project. By doing this, they necessarily slow down progress- nothing can be
done until they approve, and since they’re only one person, the progress of the team is slowed
down to the rate at which they’re able to process and critique each step of the project.&lt;/p&gt;

&lt;p&gt;If you go around them, the nexus may discover and get upset. Worse than that, though, they may
overcompensate by jumping in and second-guessing all of the decisions you made without them- e.g.,
“Why did you call this setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; as opposed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;?”- which slows you down even more than if
you had consulted them at the beginning.&lt;/p&gt;

&lt;p&gt;Unfortunately, nexus behavior is often mixed with the other traits described above. In combination,
these can be an especially big drain on engineering productivity.&lt;/p&gt;

&lt;h2 id=&quot;coping&quot;&gt;Coping&lt;/h2&gt;

&lt;p&gt;Here are some strategies for dealing with the above personas when they get in the way of your
work.&lt;/p&gt;

&lt;h3 id=&quot;be-direct&quot;&gt;Be direct&lt;/h3&gt;

&lt;p&gt;The most direct strategy is to call out these non-optimal traits when you see them.
If you’re in a code review, for instance, you can explicitly push back against the reviewer’s
feedback because it’s not constructive or is requesting an unrealistic amount of perfectionism in a
single change.&lt;/p&gt;

&lt;p&gt;The key here is to communicate sympathetically. You want to acknowledge the feedback and also
explain nicely why it’s not 100% reasonable. In many cases, the person will understand
what you’re saying and agree to back off.&lt;/p&gt;

&lt;h3 id=&quot;evade&quot;&gt;Evade&lt;/h3&gt;

&lt;p&gt;The more passive-aggressive approach is to evade the person with the unproductive trait(s) by
avoiding contact with them. If these traits come through in code or design reviews, for instance,
you can just request reviewers are who more likely to be helpful.&lt;/p&gt;

&lt;p&gt;This isn’t always doable (there may be only one person who can review your changes), but it
avoids conflict and helps move things forward. If the person you evaded discovers a serious
problem that their involvement would have detected, you can still apologize, beg for forgiveness,
and ask for their help.&lt;/p&gt;

&lt;h3 id=&quot;escalate&quot;&gt;Escalate&lt;/h3&gt;

&lt;p&gt;A third option, and sometimes the only one that works, is to escalate your concerns to
management. If someone is blocking progress and being completely unreasonable, managers have the
power to push them aside and/or elevate someone more reasonable to unblock you.&lt;/p&gt;

&lt;p&gt;It may take a while to get results and it may burn some bridges, but at a well-run company
management should be effective at removing blockers and ensuring that employees can be productive.
If they can’t do this, then it might be time to switch teams or switch companies.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Certain traits in coworkers can really get in the way of being happy and productive as a
software engineer.&lt;/p&gt;

&lt;p&gt;Many of these are actually beneficial in small doses (e.g., perfectionism), they’re just problematic
when taken to an extreme. Also, despite our best intentions, I think we all, myself included,
exhibit them sometimes in our interactions with colleagues.&lt;/p&gt;

&lt;p&gt;The important thing is to recognize when they’re reducing productivity and then make
the necessary structural or personnel changes to unblock progress.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Software engineers are an interesting bunch. While quirks are fine, and I have a few myself, there are certain traits that show up on the personality side that can be genuinely counterproductive to my team's work. In this post, I want to explain what these are and how I try to deal with them.</summary></entry><entry><title type="html">Golang: Some batteries not included</title><link href="https://yolken.net/blog/golang-batteries-not-included" rel="alternate" type="text/html" title="Golang: Some batteries not included" /><published>2021-01-31T16:55:00-08:00</published><updated>2021-01-31T16:55:00-08:00</updated><id>https://yolken.net/blog/golang-batteries-not-included</id><content type="html" xml:base="https://yolken.net/blog/golang-batteries-not-included">&lt;p&gt;I use &lt;a href=&quot;https://golang.org/&quot;&gt;golang&lt;/a&gt; (aka “go”) a lot for my day-to-day work. Like other programming
languages, it consists of a &lt;a href=&quot;https://golang.org/ref/spec&quot;&gt;&lt;em&gt;core language spec&lt;/em&gt;&lt;/a&gt;, describing,
for instance, how to declare variables, construct loops, etc., plus a
&lt;a href=&quot;https://golang.org/pkg/&quot;&gt;&lt;em&gt;standard library&lt;/em&gt;&lt;/a&gt; that implements higher-level functionality
needed for software that actually does useful things.&lt;/p&gt;

&lt;p&gt;The go standard library is fairly rich- in addition to basic input/output, it covers
HTTP client and server implementations, time and date processing, all of the standard cryptographic
algorithms (e.g., SHA256), data compression and decompression, and lots of other goodies.
However, there are certain pieces of functionality that are either missing or insufficient and
that, as a result, require the use of third-party libraries in nearly all of my projects.&lt;/p&gt;

&lt;p&gt;In this post, I want to go through the main “batteries not included” in the standard
library, and the alternatives that I typically use for each one. Note that I’m &lt;em&gt;not&lt;/em&gt; covering
missing language features like generics since those have been discussed extensively in
&lt;a href=&quot;https://hn.algolia.com/?dateRange=all&amp;amp;page=0&amp;amp;prefix=false&amp;amp;query=golang%20generics&amp;amp;sort=byPopularity&amp;amp;type=story&quot;&gt;other forums&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;aside-what-do-batteries-have-to-do-with-programming-languages&quot;&gt;Aside: What do batteries have to do with programming languages?&lt;/h3&gt;

&lt;p&gt;The term “batteries not included” was historically stamped on the boxes of electronic toys and other
consumer goods to indicate that the batteries needed for the item to work were not provided in the
box. When I was growing up, I remember getting gifts where the giver forgot to buy the batteries.
I would then feverishly run around the house looking for instances of the right kind (either AA,
AAA, C, D, or 9-volt) and raid my other toys or our TV remote controls as needed.&lt;/p&gt;

&lt;p&gt;The phrase is less common today because items often include batteries in the box or they use
built-in, rechargeable ones.&lt;/p&gt;

&lt;p&gt;In any case, at some point the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python programming language&lt;/a&gt; adopted the
term “batteries included” to describe its standard library. This was a cheeky way of saying that
unlike those cheap toys from childhood, you didn’t need to build or bring extra items (i.e.,
libraries or tools) to make the language useful- it just worked “out of the box”.&lt;/p&gt;

&lt;p&gt;Nowadays, the idea of including a rich, fully functional standard library with a programming
language is pretty common. When Python was initially released in the early 1990’s, however, this
was considered quite revolutionary- the main languages at the time (e.g., C) did not have very
big standard libraries; if you wanted to do anything beyond the basics, you had to write it
yourself or import a third-party implementation.&lt;/p&gt;

&lt;p&gt;The “batteries included” philosophy for standard libraries has become common because it has
a lot of benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s easier to get started in the language- no need to find, evaluate, and import third-party
  libraries for common use cases&lt;/li&gt;
  &lt;li&gt;It’s easier to distribute your code- people can just compile and/or run it with standard tooling&lt;/li&gt;
  &lt;li&gt;Code is more standardized- if everyone uses the standard library for something (e.g., making
  HTTP requests), then you’re unlikely to see lots of different implementations for it&lt;/li&gt;
  &lt;li&gt;Maintenance is less of a burden- standard libraries tend to be well-maintained and regularly
  patched for security issues. You don’t have to worry about the maintainer(s) disappearing and the
  library accumulating a large bug backlog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately, there isn’t always agreement on which batteries to include and exactly how they
should work. Also, including too many things can lead to bloat, making the core language harder to
maintain and distribute. There are complex design and performance tradeoffs here, and as result
no language is 100% “batteries included” for 100% of use cases.&lt;/p&gt;

&lt;h2 id=&quot;the-missing-batteries&quot;&gt;The missing batteries&lt;/h2&gt;

&lt;p&gt;Now that we’ve reviewed what “batteries (not) included” means, let’s go into what I consider
the main missing batteries in the go standard library.&lt;/p&gt;

&lt;h3 id=&quot;flags&quot;&gt;Flags&lt;/h3&gt;

&lt;p&gt;Many of the applications that I write in go are command-line tools that use flags for
specifying options, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mytool --option1=value1 --option2=value2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Golang includes a &lt;a href=&quot;https://golang.org/pkg/flag/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; package&lt;/a&gt; in its standard library for
defining and parsing these flags. However, it’s pretty basic as it has no built-in support
for accepting “complex” types like lists or time durations. Also, for whatever reason, it uses
single dashes instead of double dashes for long flags- like most people (I think?), I find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt;
more canonical than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-help&lt;/code&gt; when interacting with a command-line tool.&lt;/p&gt;

&lt;p&gt;As a result, the first thing I import when I’m creating a new command-line tool in go is a better
flag library. Unfortunately, there isn’t a consistent standard on what to use here instead.
I originally used &lt;a href=&quot;https://github.com/alecthomas/kingpin&quot;&gt;kingpin&lt;/a&gt;, but then switched
to &lt;a href=&quot;https://github.com/spf13/cobra&quot;&gt;cobra&lt;/a&gt; a few years ago because that seemed to be more common in
the code bases I was working on.&lt;/p&gt;

&lt;p&gt;Recently, I discovered &lt;a href=&quot;https://github.com/segmentio/cli&quot;&gt;segmentio/cli&lt;/a&gt;, which I like a lot
because it’s so simple- you just tag a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt;, and then you get the flag functionality for free:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;`flag:&quot;--age&quot;     help:&quot;your age&quot;     default:&quot;55&quot;`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Hobbies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`flag:&quot;--hobby&quot;   help:&quot;your hobbies&quot; default:&quot;-&quot;`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;`flag:&quot;-n,--name&quot; help:&quot;your name&quot;    default:&quot;Joe&quot;`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello %s!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works well for simple CLIs, but becomes a little messy for more complicated ones, e.g. when
the help text blurbs are really long or when you want to have multiple layers of subcommands.
Therefore, I still find myself reverting back to cobra sometimes.&lt;/p&gt;

&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;/h3&gt;

&lt;p&gt;Log output, whether to the console or to an external log collection service, is really important
for understanding what’s going on in an application. As with flags,
golang includes a &lt;a href=&quot;https://golang.org/pkg/log/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; package&lt;/a&gt;, but it’s quite
basic and insufficient for many use cases. Among other problems, it doesn’t support log levels
(e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INFO&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt;) or structured output formats like JSON.&lt;/p&gt;

&lt;p&gt;As with flags, there isn’t really a standard alternative here. I personally like
&lt;a href=&quot;https://github.com/sirupsen/logrus&quot;&gt;logrus&lt;/a&gt; a lot and include it in all of the tools I build.
Using it is as simple as importing the library and then calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Infof&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Debugf&lt;/code&gt;, etc.
in place of the standard library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Printf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/sirupsen/logrus&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myArg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debugf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting myFunc with myArg %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got an unexpected error: %+v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to supporting levels better than the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; library, it also exposes
a lot of controls over the output format.&lt;/p&gt;

&lt;p&gt;There are many other choices here, and some of these may be better than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrus&lt;/code&gt; depending on
your requirements. At Segment (my current employer), we use
&lt;a href=&quot;https://github.com/segmentio/events&quot;&gt;segmentio/events&lt;/a&gt; in
most of our backend systems. This library makes it easier to include structured key/value
pairs alongside the primary message for each log. The former aren’t super useful for command-line
tools but can be very helpful when trying to filter gigabytes of logs produced by replicated, remote
systems.&lt;/p&gt;

&lt;h3 id=&quot;test-assertions&quot;&gt;Test assertions&lt;/h3&gt;

&lt;p&gt;Go contains decent, built-in tooling for executing tests. However, it doesn’t include any of the
“assert” functions that are common in the unit testing libraries of other languages.
This means that a simple test that two slices are equal looks like:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeepEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Wrong value for my special slice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;got&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thankfully, you can avoid this messiness by using
&lt;a href=&quot;https://github.com/stretchr/testify&quot;&gt;stretchr/testify&lt;/a&gt;. With testify’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; package, the
above becomes much more concise:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My special slice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; package that has the same interface as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt;, but will stop the test
execution if the condition isn’t met.&lt;/p&gt;

&lt;p&gt;I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testify&lt;/code&gt; without exception in any project that is doing unit tests. It seems weird to me
that some people still prefer the canonical manual check followed by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t.Error&lt;/code&gt; message,
but to each their own!&lt;/p&gt;

&lt;h3 id=&quot;yaml-parsing&quot;&gt;YAML parsing&lt;/h3&gt;

&lt;p&gt;Go includes a fully functional package for handling &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;-formatted
data but, like Python, doesn’t have any equivalent for &lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;
in its standard library. Many of the tools that I’ve worked on have some sort of human-created
config file, and it’s much easier on users if these are YAML instead of JSON.&lt;/p&gt;

&lt;p&gt;The standard here is &lt;a href=&quot;https://github.com/go-yaml/yaml&quot;&gt;go-yaml&lt;/a&gt;, which has the same interface
as the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; library but uses special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; struct tags instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;
ones. Personally, though, I prefer &lt;a href=&quot;https://github.com/ghodss/yaml&quot;&gt;ghodss/yaml&lt;/a&gt;, which wraps the
former, because it supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;-compatible tags and thus makes everything more consistent.&lt;/p&gt;

&lt;h3 id=&quot;static-content-embedding&quot;&gt;Static content embedding&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Addendum:&lt;/strong&gt; Golang 1.16 finally added built-in &lt;a href=&quot;https://golang.org/pkg/embed/&quot;&gt;embedding support&lt;/a&gt;.
Yay!!! However, I’ll keep this section here for historical reasons.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the nice things about golang is that your entire program can be compiled into a single,
self-contained binary. Among other benefits, this makes it easier to distribute your application
or run it in bare-bones environments (e.g., scratch docker containers).&lt;/p&gt;

&lt;p&gt;Unfortunately, though, the standard go tooling only handles go code. It won’t include separate
static assets like text templates and images in your binary. I commonly use the former,
in conjunction with go’s excellent &lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt; package,
to generate HTML documents or YAML configs in my tools.&lt;/p&gt;

&lt;p&gt;To get around this, there’s a great tool called
&lt;a href=&quot;https://github.com/go-bindata/go-bindata&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-bindata&lt;/code&gt;&lt;/a&gt; that will automatically read
these external assets and embed them into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.go&lt;/code&gt; file that can be included in your binary. It
then exposes an API for fetching the contents of each asset from your code.&lt;/p&gt;

&lt;p&gt;The original creator of the tool, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jteeuwen&lt;/code&gt;, stopped maintaining it and then completely
disappeared off Github a few years ago, which caused the proliferation of multiple,
not-fully-compatible forks. Thankfully, it seems like the community has
standardized on &lt;a href=&quot;https://github.com/go-bindata/go-bindata&quot;&gt;this one&lt;/a&gt;, which hopefully will be
actively maintained going forward.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Golang is great for many use cases, but you’ll probably want to bring in third-party libraries
for some things like flags, logging, and testing. It would be great if these
were improved in the standard library, but I’m not holding my breath- from what I’ve heard,
the go maintainers are pretty adamant about what’s in the standard library and what’s not.
Thankfully, the third-party solutions are pretty good at filling in the gaps.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">The go standard library is fairly rich. However, there are certain pieces of functionality that are either missing or insufficient and that, as a result, require the use of third-party libraries in nearly all of my projects. In this post, I want to go through the main &quot;batteries not included&quot; in the standard library, and the alternatives that I typically use for each one.</summary></entry><entry><title type="html">Starting a job</title><link href="https://yolken.net/blog/starting-a-job" rel="alternate" type="text/html" title="Starting a job" /><published>2021-01-24T14:20:00-08:00</published><updated>2021-01-24T14:20:00-08:00</updated><id>https://yolken.net/blog/starting-a-job</id><content type="html" xml:base="https://yolken.net/blog/starting-a-job">&lt;p&gt;In my &lt;a href=&quot;/blog/great-engineer-onboarding&quot;&gt;last post&lt;/a&gt;, I discussed how companies can
make their onboarding processes better for employees. In this post, I want to turn
the tables and talk about the strategies I use personally to get up-to-speed when
I’m starting at a new job.&lt;/p&gt;

&lt;h2 id=&quot;starting-is-hard&quot;&gt;Starting is hard&lt;/h2&gt;

&lt;p&gt;First off, it’s important for me to state that I find starting a new
job as a software engineer really, really hard.&lt;/p&gt;

&lt;p&gt;Even after many years of experience and even if the new company is using a tech
stack that I’m already familiar with, there is
just so much to learn about before one can become productive, including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where the code lives and how it’s organized&lt;/li&gt;
  &lt;li&gt;The key software systems, their interfaces, and how they all fit together&lt;/li&gt;
  &lt;li&gt;Standards and tools for testing, logging, metrics, code reviews, deploys, etc.&lt;/li&gt;
  &lt;li&gt;What infrastructure the code is running on and how to interact with it&lt;/li&gt;
  &lt;li&gt;Who knows what and how to get questions answered&lt;/li&gt;
  &lt;li&gt;How planning is done, what the team’s current priorities are, what I should
  be working on to make the biggest impact, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On top of this giant pile of things to learn about, the start of a new job
is often when I’m feeling the most “buyer’s remorse” around my decision to
switch employers. This can include thoughts like “maybe I should have stayed at my
old job”. Or, I’ll be thinking that it was right to leave my old job, but that
maybe I should have picked one of the other offers I had.&lt;/p&gt;

&lt;p&gt;The end result is that the onboarding process is really stressful for me- I
often feel kind of crappy, and then I may have trouble sleeping, which makes
me feel even worse. Even if you’re not as uptight as I am, it’s generally not
the time in your career when you’re going to be at your peak happiness.&lt;/p&gt;

&lt;h2 id=&quot;coping-strategies&quot;&gt;Coping strategies&lt;/h2&gt;

&lt;p&gt;Over the course of starting many new jobs, I’ve developed a collection of strategies
for making the onboarding process less stressful and more productive. Here are the most
helpful ones.&lt;/p&gt;

&lt;h3 id=&quot;give-it-time&quot;&gt;Give it time&lt;/h3&gt;

&lt;p&gt;The most important coping strategy for me is to realize that it takes time to get
up-to-speed, and, at the same time, to realize that my colleagues know this
and will cut me some slack in the interim.&lt;/p&gt;

&lt;p&gt;The exact amount of time required varies from company to company, and it’s
something that I ask my manager about in our first 1:1 meeting. However,
at most of my previous jobs, the general guidance has been that it takes around
3 months to start making non-trivial contributions, and around 6-9 months before
new hires are expected to be fully productive.&lt;/p&gt;

&lt;p&gt;During those first couple of months, I tell myself that I can relax- it’s ok to make
mistakes, and it’s also perfectly fine to spend time doing background reading,
getting to know colleagues, and attending internal tech talks as opposed to focusing
completely on my team’s regular tasks.&lt;/p&gt;

&lt;h3 id=&quot;get-work-environment-right&quot;&gt;Get work environment right&lt;/h3&gt;

&lt;p&gt;I find that my work environment plays a big role in my productivity and happiness.
This is particularly true when I’m starting at a new job and dealing with the
firehose of technical things that I need to get up-to-speed on.&lt;/p&gt;

&lt;p&gt;The first thing I try to optimize is the company-provided hardware that I’m touching
or looking at for my day-to-day work, i.e. my laptop, mouse, keyboard, and monitor.
If any of these is not ideal, I press very hard to get replacements ordered during
my first few days on the job (within reasonable bounds, of course).&lt;/p&gt;

&lt;p&gt;Beyond that, I then work to improve the other aspects of my environment, including
my desk and chair, and the light, noise, and temperature of my immediate work area.
Now that I’m working from home these are all under my direct personal control, but
back when I was in an office I sometimes asked for help in dealing with noisy
officemates, weird vibrations in my desk, or a less-than-comfortable chair.&lt;/p&gt;

&lt;p&gt;Many of these things will take a while to resolve, so it’s important to raise
concerns early on to get the process started.&lt;/p&gt;

&lt;h3 id=&quot;do-coffee-chats&quot;&gt;Do coffee chats&lt;/h3&gt;

&lt;p&gt;Getting to know your manager and the peers on your team is a critical part
of the onboarding process that everyone does. Beyond this, though, I’ve found that
it’s really informative to meet with colleagues beyond my direct team, even if I’m
not going to be working with them at all. I usually just message these people
in the company’s chatting system and ask for permission to put 30 minutes into their
calendar (they almost always say yes!)&lt;/p&gt;

&lt;p&gt;Staff in the extended organization can provide “big picture” perspective
that’s useful to know about as I’m getting up-to-speed. Also, because they won’t
be working with me day-to-day, I’ve found that they tend to be more honest and less
inhibited when it comes to providing advice about how to be successful in the job.&lt;/p&gt;

&lt;p&gt;When possible, I like to structure these as “coffee chats” as opposed to formal
1:1’s. This makes them more fun and fosters an environment in which we can
talk honestly.&lt;/p&gt;

&lt;h3 id=&quot;create-personal-reference-document&quot;&gt;Create personal reference document&lt;/h3&gt;

&lt;p&gt;Starting on my first day, I create a document in whatever system the company
prefers for technical docs (e.g., Dropbox Paper, Quip, Google Docs, etc.) and
start jotting down anything that I think will be helpful to refer to later;
here are some made-up examples:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key documents:
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Design doc for system X
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; Intro to technology Y
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; External tutorial on doing Z
...

How to deploy system X
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`cd ~/workspace/x`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`deploy -x -b 123abc --production`&lt;/span&gt;

Running tests for system Y
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`cd ~/workspace/y`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`docker-compose up -d`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`make tests`&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I treat this document as append-only- as I interact with more tools and systems, I
just keep adding more sections. Later, if I need to refer to anything, I can do a
quick search in the doc and then use the links or commands that I previously
jotted down to complete the task I’m doing.&lt;/p&gt;

&lt;p&gt;I keep adding to the document and referring back to it even after I’m fully onboarded. Over
time, it can get so big that it becomes painful to load and search in whatever tool I’m using to
host it. When this happens, I’ll just freeze the first document and start adding notes into
a new one. In my current job, I’m at the beginning of my second reference doc. In previous
jobs, I’ve gone through three or four of these over the course of a few years.&lt;/p&gt;

&lt;h3 id=&quot;personal-code-sandbox&quot;&gt;Personal code sandbox&lt;/h3&gt;

&lt;p&gt;In conjunction with my reference doc, I find it’s also helpful to have a personal
“sandbox” for code-related notes and experiments.&lt;/p&gt;

&lt;p&gt;At companies that use GitHub (including all of my recent employers), I just
set up a repo that’s under my work account but separate from the
company’s main GitHub organization. If I were at a company that didn’t have this
functionality in its code systems, I would just throw my changes into an
“experimental” branch that is never submitted for review.&lt;/p&gt;

&lt;p&gt;Wherever it lives, I use this sandbox as a place to put longer scripts, to become more
comfortable with the frameworks and technologies that the company uses, and to try out
new approaches to my team’s work. Doing these things in a personal space allows for me
to experiment and explore without judgement from colleagues.&lt;/p&gt;

&lt;p&gt;As with the reference doc, I keep adding to my personal code sandbox even after the
onboarding process is complete. However, I generally find that it becomes less useful over
time as I become more comfortable with the company’s tech stack and more confident in
my abilities to make changes out in the open directly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Starting a new job is hard, but I’ve adopted a few strategies that have consistently helped.
The optimal onboarding path can vary a lot from person-to-person and from job-to-job, so these
may or may not be ideal for you. However, you may find some subset of them helpful the next time
you’re struggling to get up-to-speed at a new job.&lt;/p&gt;

&lt;p&gt;Good luck and, most importantly, don’t get too stressed!&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">In my last post, I discussed how companies can make their onboarding processes better for employees. In this post, I want to turn the tables and talk about the strategies I use personally to get up-to-speed when I'm starting at a new job.</summary></entry></feed>