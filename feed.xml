<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://yolken.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yolken.net/" rel="alternate" type="text/html" /><updated>2021-01-10T20:12:11-08:00</updated><id>https://yolken.net/feed.xml</id><title type="html">Benjamin Yolken</title><subtitle>Random thoughts from the perspective of a software engineer, particularly around tech careers and development processes.</subtitle><entry><title type="html">How I made this blog</title><link href="https://yolken.net/blog/how-i-made-this-blog" rel="alternate" type="text/html" title="How I made this blog" /><published>2021-01-10T13:10:00-08:00</published><updated>2021-01-10T13:10:00-08:00</updated><id>https://yolken.net/blog/how-i-made-this-blog</id><content type="html" xml:base="https://yolken.net/blog/how-i-made-this-blog">&lt;p&gt;Every now and then, I get asked how I made this blog from a technical standpoint. In this
post, I want to share how my content is generated and hosted, and then describe some commonly-used,
alternative approaches that I decided not to take.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;I write each post in a separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; file.
Markdown is nice because it’s super lightweight, supports most of the formatting I need
(headers, bolding, bullets, etc.), and I’ve used it a lot for writing documentation at work, so
I feel very comfortable with the syntax.&lt;/p&gt;

&lt;p&gt;For example, here’s a sample of the Markdown for my recent post on
&lt;a href=&quot;/blog/quitting-a-new-job&quot;&gt;quitting a new job&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Quitting&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;job&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2021-01-01 18:40:00 -0700&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;career&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Two years ago, I did something ...&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;

Two years ago, I did something that I'd never done in my career before-
I left a job (at &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Nuro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://nuro.ai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;) only a few months after starting
it. In this post, I want to explain what happened and what I learned from
the experience.

&lt;span class=&quot;gu&quot;&gt;## What happened&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;#### The job switch&lt;/span&gt;

Back in the spring of 2019, I decided to leave &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Stripe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://www.stripe.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,
where I'd been a software engineer for about a year and a half. The full
details are best left to a separate post, but at a high level I just wasn’t very
happy...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to convert these Markdown files into a collection
of static HTML pages that can be rendered by web browsers. Jekyll is what’s known as a
“static site generator”; in addition to supporting higher-level formats like Markdown that are
easier to work with than HTML, these frameworks also automate setting the look-and-feel of each
page and inserting common content like headers and footers that would be tedious to add manually.&lt;/p&gt;

&lt;p&gt;Here’s what the &lt;a href=&quot;/blog/quitting-a-new-job&quot;&gt;quitting a new job&lt;/a&gt; Markdown looks like after
conversion to HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Quitting a new job | Benjamin Yolken&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trigger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/blog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pubs&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Publications&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-content e-content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;itemprop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;articleBody&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Two years ago, I did something that I’d never done in my career before-
      I left a job (at &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://nuro.ai&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Nuro&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;) only a few months
      after starting it. In this post, I want to explain what happened and
      what I learned from the experience.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;what-happened&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;What happened&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the-job-switch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;The job switch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Back in the spring of 2019, I decided to leave
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.stripe.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Stripe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, where I’d been a software
      engineer for about a year and a half. The full details are best left to
      a separate post, but at a high level I just wasn’t very happy...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I push the generated HTML files, along with a stylesheet for the site, into the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of my &lt;a href=&quot;https://github.com/yolken/yolken-blog&quot;&gt;GitHub repo&lt;/a&gt;. GitHub has a nice
feature called &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; that will take the contents of an arbitrary
branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; by default) and serve them as static content behind a web server. It also
supports custom domains, which allows for my pages to be available though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yolken.net&lt;/code&gt; as opposed to
a shared domain like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GitHub has solid documentation on the entire process, including the content generation
steps, that you can read
&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;here&lt;/a&gt;. Everything is free if your repo is open-source
and you abide by the &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages#guidelines-for-using-github-pages&quot;&gt;GitHub Pages guidelines&lt;/a&gt;, all of which
are pretty reasonable for most personal blogs.&lt;/p&gt;

&lt;h2 id=&quot;rejected-alternatives&quot;&gt;Rejected alternatives&lt;/h2&gt;

&lt;p&gt;There are several other approaches to publishing a blog online that I decided not to go with.
These weren’t ideal for me, but, depending on your specific requirements, may be reasonable
choices for your content.&lt;/p&gt;

&lt;h3 id=&quot;use-a-third-party-blogging-service&quot;&gt;Use a third-party blogging service&lt;/h3&gt;

&lt;p&gt;The easiest way to get a blog online is to use a third-party, hosted blogging service.
Back in the day, &lt;a href=&quot;https://www.blogger.com/&quot;&gt;Blogger&lt;/a&gt; was all the rage.
Now, it seems like &lt;a href=&quot;https://medium.com&quot;&gt;Medium&lt;/a&gt; is the hot platform to use. There are tons of other
choices here, including social networks like Facebook and LinkedIn, which have started supporting
blog-like user content.&lt;/p&gt;

&lt;p&gt;The main advantage of these services is that they’re super easy-to-use. You just type up your
content in a pretty, web-based editor and click a button to publish. They also provide features like
comments, searching, and subscriptions on top of your content without much effort.&lt;/p&gt;

&lt;p&gt;The downside of these services is that you’re handing over your content to a third-party,
who’s packaging it up with other people’s content, applying their own look-and-feel, and, in many
cases, trying to monetize it. Even though you’re the author, and even though you maintain
legal rights to your content in most cases, there’s a tendency for your work to become associated
more with the hosting service than with you.&lt;/p&gt;

&lt;p&gt;Personally, I’m fine with this when I’m sharing low-quality, short-form content like
my vacation photos. However, for something as important and personal as my blog, I wanted
to be in complete control and not share any ownership with a third-party.&lt;/p&gt;

&lt;p&gt;If you’re just writing occasionally, though, or really, really don’t want to deal with any
technical details, putting your content in a third-party service might be an acceptable
choice.&lt;/p&gt;

&lt;h3 id=&quot;host-in-a-cloud-provider&quot;&gt;Host in a cloud provider&lt;/h3&gt;

&lt;p&gt;GitHub Pages is very reliable and low-hassle but only handles static content and imposes
&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages#guidelines-for-using-github-pages&quot;&gt;some limitations&lt;/a&gt; on this content including its size and
update frequency. It also abstracts away the lower-level serving details, which are
sometimes useful to observe and adjust.&lt;/p&gt;

&lt;p&gt;An alternative is to host your blog using a cloud provider like AWS. The details
here vary a lot based on which provider you’re using and what you’re trying to do, but if
you have static content only, you can use a storage service like
&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3&lt;/a&gt; plus a content delivery network (CDN) like
&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; to handle caching and HTTPS termination closer
to end users.&lt;/p&gt;

&lt;p&gt;I decided to not take this approach because my blog comfortably fits within the limits of
GitHub Pages, and I also like that it’s totally free. This may change in the future, though, if I
outgrow GitHub Pages or get bored and want to handle more of the lower-level serving details
myself.&lt;/p&gt;

&lt;h3 id=&quot;run-your-own-content-management-system-cms&quot;&gt;Run your own content management system (CMS)&lt;/h3&gt;

&lt;p&gt;Static sites like the one for this blog are fairly limited; among other examples, you can’t
customize pages on a per-user basis, it’s hard to provide dynamic features like search,
and, since all posts are static files, it can become tedious to manage a large amount of content.&lt;/p&gt;

&lt;p&gt;An alternative is to run a service called a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Content_management_system&quot;&gt;content management system (CMS)&lt;/a&gt;, which
stores the content in a database and dynamically generates pages in response to user requests.
Because the content is stored in a structured format and because the server can customize the
contents of each page, it’s much easier to incorporate Blogger or Medium-like features such as user
logins, search, and online post editing.&lt;/p&gt;

&lt;p&gt;There are a large number of fully-featured, open-source CMSes to choose from, including
&lt;a href=&quot;https://en.wikipedia.org/wiki/WordPress&quot;&gt;WordPress&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Drupal&quot;&gt;Drupal&lt;/a&gt;. You can also write your own on top of a web
application framework like &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Running these systems is a lot more complicated than throwing static HTML into
GitHub Pages or S3. In addition to choosing a hosting provider and configuring all of the
associated software, you also need to worry about things like monitoring (what if the site goes
down?) and capacity planning (what if a post goes viral and gets tens of thousands of views?).&lt;/p&gt;

&lt;p&gt;For me, the extra features of a CMS just weren’t worth the hassle. However, this may be a good
choice if you want to create a site with more than just a static list of posts. The more popular
CMSes like WordPress also have rich ecosystems of themes and plugins that you can use
to create prettier, more complex online destinations.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This blog consists of static HTML served by GitHub Pages. Although it’s not the fanciest
approach, I’ve found that it provides a high degree of personal control while having
minimal maintenance overhead.&lt;/p&gt;</content><author><name></name></author><summary type="html">Every now and then, I get asked how I made this blog from a technical standpoint. In this post, I want to share the various options for hosting a blog online and describe why I made the particular technical choices I did.</summary></entry><entry><title type="html">Quitting a new job</title><link href="https://yolken.net/blog/quitting-a-new-job" rel="alternate" type="text/html" title="Quitting a new job" /><published>2021-01-01T17:40:00-08:00</published><updated>2021-01-01T17:40:00-08:00</updated><id>https://yolken.net/blog/quitting-a-new-job</id><content type="html" xml:base="https://yolken.net/blog/quitting-a-new-job">&lt;p&gt;Two years ago, I did something that I’d never done in my career before- I left a job
(at &lt;a href=&quot;https://nuro.ai&quot;&gt;Nuro&lt;/a&gt;) only a few months after starting it. In this post, I want to explain
what happened and what I learned from the experience.&lt;/p&gt;

&lt;h2 id=&quot;what-happened&quot;&gt;What happened&lt;/h2&gt;

&lt;h4 id=&quot;the-job-switch&quot;&gt;The job switch&lt;/h4&gt;

&lt;p&gt;Back in the spring of 2019, I decided to leave &lt;a href=&quot;https://www.stripe.com&quot;&gt;Stripe&lt;/a&gt;, where I’d
been a software engineer for about a year and a half. The full details are best left
to a separate post, but at a high level I just wasn’t very happy with my personal situation; the
work I was doing in compute infrastructure had the unfortunate combination of being both
overly stressful and underappreciated. At the same time, I felt like my career prospects
were limited because the upper rungs of Stripe’s engineering individual contributor (IC) ladder put
a lot of emphasis on cross-team coordination and other, managerial-like activities that I didn’t
enjoy and felt I wasn’t very good at.&lt;/p&gt;

&lt;p&gt;Given how hot the job market was at the time and the number of other, seemingly more interesting
opportunities available, I figured that I had nothing to lose by interviewing elsewhere.&lt;/p&gt;

&lt;p&gt;After a few weekends of furiously-paced &lt;a href=&quot;/blog/master-coding-interviews&quot;&gt;Leetcoding&lt;/a&gt;, I was ready.
Unlike my previous job searches, there wasn’t any particular company that I was aspiring
to get into; instead, I just went through my &lt;a href=&quot;/blog/six-years-of-emails&quot;&gt;backlog of recruiting emails&lt;/a&gt;
and wrote back to a bunch that looked interesting. Among the messages I responded to was one
about &lt;a href=&quot;https://nuro.ai&quot;&gt;Nuro&lt;/a&gt;, an autonomous vehicle startup that was attempting to do driverless
grocery delivery.&lt;/p&gt;

&lt;p&gt;Over the following weeks, I went through the full recruitment slog, starting with lots of
recruiter phone calls, then following up with technical phone screens for a subset of
those, then doing onsite interviews for a subset of those. In the end, I got offers from seven
places, including Nuro.&lt;/p&gt;

&lt;p&gt;During the process, I didn’t fall in love with any of the options. But, there
was something that made me feel more optimistic about Nuro than the other choices. Being a
hardware-oriented, robotics company, it was just really different from all of my previous employers,
and, after years of feeling stuck in my career, maybe different was good.&lt;/p&gt;

&lt;p&gt;The company was super secretive about its technology; I wasn’t allowed to tour the office, for
instance, because they had hardware prototypes lying around that only employees were allowed to
see. I also wasn’t invited to ride along in their test cars, which would have been both fun and
informative. The external signs were good, though- they had raised a billion dollars from Softbank
and others, and the employee reviews on &lt;a href=&quot;https://www.glassdoor.com&quot;&gt;Glassdoor&lt;/a&gt; were gushing.&lt;/p&gt;

&lt;p&gt;Aside from being in a somewhat different space than my previous employers, another potential
downside was the commute. Stripe and my three jobs before that were all within a 15 minute walk
of my apartment in San Francisco. Nuro’s office was 40 miles away in Mountain View, which was
more than an hour each way by train. But, I had done longer commutes earlier in my career and figured
that I could handle it.&lt;/p&gt;

&lt;p&gt;In the end, I went with my impulses and signed the offer. I had my last day at Stripe, took a short
vacation, and then showed up at the Nuro office, brimming with optimism, for my first day two weeks
later.&lt;/p&gt;

&lt;h4 id=&quot;realizing-my-mistake&quot;&gt;Realizing my mistake&lt;/h4&gt;

&lt;p&gt;Unfortunately, that optimism lasted for a grand total of 2 days. By Wednesday of my first week,
as I was riding the train home, I realized that I had made a mistake. My colleagues were
friendly and smart, and the company was doing interesting things, but the job just felt like a
lifestyle downgrade to me.&lt;/p&gt;

&lt;p&gt;At Stripe and each of my jobs before that, I had had a short commute to a beautiful office, and
got to experience the instant gratification associated with developing purely software-based
products. Now, I was stuck taking a crowded train to a dark office littered with hardware parts,
working on a product that would take many years to reach mass-market adoption due to pesky little
things like manufacturing and road safety.&lt;/p&gt;

&lt;p&gt;I had left Stripe seeking an upgrade, but instead I got a downgrade. And, while minor improvements
were possible, it seemed unlikely that things would completely change for the better in the near
term.&lt;/p&gt;

&lt;h4 id=&quot;getting-back-on-track&quot;&gt;Getting back on track&lt;/h4&gt;

&lt;p&gt;At this point, I had three choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quit immediately&lt;/li&gt;
  &lt;li&gt;Start exploring new opportunities but don’t quit until something better is lined up&lt;/li&gt;
  &lt;li&gt;Stick it out for at least a year&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My first instinct was to take option 1 and just go back to Stripe. When I reached out to my HR
contact, though, I found out that I’d have to go through team matching again and also get a new
offer; even though I’d left on good terms less than a month before, I couldn’t just revert back to
my previous position and pay. This was disappointing, but after giving it a little more thought,
I figured it was for the best because I had left Stripe for specific reasons; going back
to my old job wouldn’t fix those or make me feel better about them.&lt;/p&gt;

&lt;p&gt;Another variant of option 1 would be to quit and take one of the other offers I had gotten
during my search. But, I had already rejected those for what I thought were good reasons,
so this didn’t feel like the best way out.&lt;/p&gt;

&lt;p&gt;Option 3 was the one that would look the least bad from a resume perspective, and this seems to be
what a lot of people in tech do when they don’t like a job. But, life is short, I was really feeling
unhappy with the choice I had made, and I figured it wasn’t really fair to my colleagues at Nuro to
stick in a job that my heart wasn’t in.&lt;/p&gt;

&lt;p&gt;So, in the end, I decided that option 2 was the best fit for me. I continued at Nuro and did my best
to get up-to-speed and to contribute to my team’s work, but at the same time jumped right back
into the job market. In addition to keeping things open with Stripe, I
&lt;a href=&quot;/blog/triplebyte-review&quot;&gt;tried Triplebyte&lt;/a&gt;, responded to more recruiter emails, and also
reached out to some former colleagues about the companies they were now at.&lt;/p&gt;

&lt;p&gt;I then went through the whole recruitment process with a new set of companies. This time,
though, I was a lot pickier about where I interviewed (nothing in hardware or with long commutes!);
after a few weeks, I had four new choices including an updated offer from Stripe. After
a good amount of due diligence, significantly more than I had done in my previous search, I
decided to go to &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I put in my notice at Nuro, people were surprised that I was leaving so soon, but ultimately
were understanding. I left, took a short vacation, and then started at Segment. Thankfully,
the new job was a much better fit for me, and I’m much happier now!&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;h4 id=&quot;do-your-due-diligence&quot;&gt;Do your due diligence&lt;/h4&gt;

&lt;p&gt;Switching jobs is a big deal, and it shouldn’t be done impulsively. Ideally, your due
diligence before signing a new offer should include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Meeting with the team you’ll be working with in a low-stress, non-interview setting&lt;/li&gt;
  &lt;li&gt;Touring the office and understanding what your specific workspace will be like&lt;/li&gt;
  &lt;li&gt;Trying out the commute for a few days (if it’s significantly different than your current one)&lt;/li&gt;
  &lt;li&gt;Trying out any new languages/technologies that you’ll be using on the job&lt;/li&gt;
  &lt;li&gt;Getting hands-on demos of the company’s products (if they’re not freely accessible to consumers
  already)&lt;/li&gt;
  &lt;li&gt;Seeing a summary of the company’s income and expenses over time (if not public)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learning about these things doesn’t guarantee that you’ll be happy in your new job, but it
at least reduces the risk of any unexpected surprises after you start.&lt;/p&gt;

&lt;h4 id=&quot;its-ok-to-quit-after-a-few-weeks-just-dont-make-it-a-pattern&quot;&gt;It’s ok to quit after a few weeks (just don’t make it a pattern)&lt;/h4&gt;

&lt;p&gt;When I started my second job search, I was worried that the short
tenure in the job I was trying to leave would be a turn-off to perspective employers. In reality,
however, it wasn’t a big deal- people asked about it, but seemed satisfied with my 20 second
summary and then moved on to other things.&lt;/p&gt;

&lt;p&gt;The sense I get is that you’re allowed to quit a new job once in your career without any
repercussions. If you do it multiple times, however, then recruiters and hiring managers might
have second thoughts about interviewing you without strong internal references or some other signal
that you’ll be a good employee.&lt;/p&gt;

&lt;h4 id=&quot;switch-teams-before-quitting&quot;&gt;Switch teams before quitting&lt;/h4&gt;

&lt;p&gt;As I noted in a &lt;a href=&quot;/blog/leaving-a-job&quot;&gt;previous post&lt;/a&gt;, switching teams is a lot easier than
switching jobs. I didn’t do this before I left Stripe because there weren’t any other teams that I
was super enthusiastic about at the time. But, in retrospect, I probably should have given this a
try before quitting.&lt;/p&gt;

&lt;p&gt;Even if the new team hadn’t been a perfect fit, it would have at least bought some time and given
me some additional experience that could help in future work. This is what I did at Google
and Airbnb, and in both cases the “second team” was what really opened up new opportunities for me.&lt;/p&gt;</content><author><name></name></author><summary type="html">Two years ago, I did something that I'd never done in my career before- I left a job (at Nuro) only a few months after starting it. In this post, I want to explain what happened and what I learned from the experience.</summary></entry><entry><title type="html">Going into tech with a PhD</title><link href="https://yolken.net/blog/phd-to-tech" rel="alternate" type="text/html" title="Going into tech with a PhD" /><published>2020-12-25T12:04:00-08:00</published><updated>2020-12-25T12:04:00-08:00</updated><id>https://yolken.net/blog/phd-to-tech</id><content type="html" xml:base="https://yolken.net/blog/phd-to-tech">&lt;p&gt;I spent 5 years of my life getting a PhD, but like many others who’ve gotten this degree,
I decided to leave academia after graduation. At the time, I explored several career choices
but ultimately decided to take a Product Manager job at Google.&lt;/p&gt;

&lt;p&gt;Since then, I’ve &lt;a href=&quot;/blog/switching-from-product-to-eng&quot;&gt;switched ladders once&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/yolken/&quot;&gt;switched companies a few times&lt;/a&gt;, but overall have absolutely
no regrets about going into tech versus the other paths that I could have taken.&lt;/p&gt;

&lt;p&gt;In this post, I want to discuss why I think it’s a great destination for people with technical PhDs
and also dig into the “career ladders” that most tech companies have.&lt;/p&gt;

&lt;h4 id=&quot;quick-note-on-terminology&quot;&gt;Quick note on terminology&lt;/h4&gt;

&lt;p&gt;I’m using “tech” to mean computer software and/or hardware technology companies. There’s
also biotech, but given that I haven’t done anything bio-related since my high school science
classes, I’m not really qualified to discuss that side of the world.&lt;/p&gt;

&lt;p&gt;Also, the intended audience here is “technical” PhDs, i.e. those in the sciences and engineering.
You can certainly go into tech with a PhD in French Literature, but the degree will be less of a
benefit, and you’ll have to prove your technical skills in some other way.&lt;/p&gt;

&lt;h2 id=&quot;why-tech&quot;&gt;Why tech&lt;/h2&gt;

&lt;p&gt;Tech jobs are a great fit with technical PhDs because they both require a similar set of skills
to succeed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ability to break down large technical problems into smaller chunks, work on them over many
  years despite roadblocks&lt;/li&gt;
  &lt;li&gt;Comfort with complex quantitative analysis, particularly when the underlying data are messy or
  incomplete&lt;/li&gt;
  &lt;li&gt;Strong communication skills&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In some cases, the degree might also provide knowledge that’s directly relevant for a job- for
instance, if your PhD was in software compiler design and your job is on the compiler team at a
company.&lt;/p&gt;

&lt;p&gt;That’s great if you’re able to find such a fit, and it will definitely help your career
at the beginning, but it’s not a requirement, and seems to be more the exception than the rule.
My research, for instance, was on &lt;a href=&quot;/pubs&quot;&gt;using game theory for resource allocation&lt;/a&gt;, but
aside from a little bit in my first job, my work has been completely unrelated.&lt;/p&gt;

&lt;p&gt;In addition to the natural skills fit, there are a number of other great things about tech, which
apply whether you’re a PhD or not:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Great salaries, benefits, and work environment (casual, friendly, flexible hours, etc.)&lt;/li&gt;
  &lt;li&gt;Fast-moving, constantly changing, hard to get bored for too long&lt;/li&gt;
  &lt;li&gt;Ability to build and create things that people actually use&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;alternative-paths&quot;&gt;Alternative paths&lt;/h2&gt;

&lt;p&gt;Before digging into the details of various tech career ladders, it’s worth briefly discussing some
non-tech destinations that are also popular among technical PhDs.&lt;/p&gt;

&lt;h3 id=&quot;corporate-research-labs&quot;&gt;Corporate research labs&lt;/h3&gt;

&lt;p&gt;A few companies such as &lt;a href=&quot;https://www.research.ibm.com/&quot;&gt;IBM&lt;/a&gt;,
&lt;a href=&quot;https://www.microsoft.com/en-us/research/&quot;&gt;Microsoft&lt;/a&gt;, and
&lt;a href=&quot;https://www8.hp.com/us/en/hp-labs/&quot;&gt;HP&lt;/a&gt;, run “labs” or “research” divisions that are sort of a
cross between a research university and a large corporation. Staff in these places
do research, write papers, and present at academic conferences like professors but are expected
to work on problems that are relevant to the businesses of their parent companies.&lt;/p&gt;

&lt;p&gt;I briefly worked at &lt;a href=&quot;https://www.research.ibm.com/labs/almaden/&quot;&gt;IBM’s Almaden Lab&lt;/a&gt; (and hated it-
details to be covered in a future post!) and have met a few people at some of the other labs
in the SF Bay Area. I think it can be a good fit if you absolutely love research but don’t want
to deal with writing grants, teaching students, or doing the other, non-research-related work of a
professor. On the other hand, you have less freedom than an academic researcher, and the work can
be more boring and slower-paced than what you’d be doing in a more conventional tech job.&lt;/p&gt;

&lt;h3 id=&quot;management-consulting&quot;&gt;Management consulting&lt;/h3&gt;

&lt;p&gt;The big, traditional management consulting companies (e.g., &lt;a href=&quot;https://www.mckinsey.com/&quot;&gt;McKinsey&lt;/a&gt;)
love hiring PhDs, particularly those from prestigious schools. I halfheartedly applied to a few of
these jobs as I was finishing up my degree, but didn’t get any offers and then never considered
them again.&lt;/p&gt;

&lt;p&gt;From what I’ve heard, these jobs can involve a rough lifestyle (lots of travel and long hours)
and the work is often boring and repetitive. Every person I’ve known who’s gone into consulting
has left the profession after 2-3 years, which I think says a lot about it as a career path.&lt;/p&gt;

&lt;p&gt;On the other hand, the jobs are considered prestigious, and they can serve as stepping stones
into high-level leadership roles in lots of different industries, including tech.&lt;/p&gt;

&lt;h3 id=&quot;finance&quot;&gt;Finance&lt;/h3&gt;

&lt;p&gt;Several of my schoolmates ended up as “quants” at hedge funds and other financial firms.
I don’t have any personal experience with these jobs, but from what I’ve heard they can be
extremely lucrative. I’m personally not very interested in finance or the idea of crunching
numbers all day, but if you are it might be a career path to explore.&lt;/p&gt;

&lt;p&gt;If you’re interested in finance, I’d highly recommend reading
&lt;a href=&quot;https://www.amazon.com/My-Life-Quant-Reflections-Physics/dp/0470192739&quot;&gt;this memoir&lt;/a&gt; to
get a somewhat dated (but still relevant) perspective on transitioning from academic research to
Wall Street.&lt;/p&gt;

&lt;h2 id=&quot;ladders&quot;&gt;Ladders&lt;/h2&gt;

&lt;p&gt;Once you’ve decided to go into tech, the next step is to figure out which “career ladder”
is the best fit for you. The members of the various ladders collaborate and there’s often some
overlap in the work, but the choice of ladder determines how the interview process works
and how you’re evaluated once you’re on the job.&lt;/p&gt;

&lt;p&gt;The ladder names and associated job titles will vary from company to company, but there
are generally three main buckets that technical PhDs are hired into. The following sections
describe each in more detail.&lt;/p&gt;

&lt;h3 id=&quot;engineering&quot;&gt;Engineering&lt;/h3&gt;

&lt;p&gt;Engineers, whether in software (like me) or hardware, are the people responsible for most of
the hands-on technical work. This work, to put it colloquially, is a mixture of creating new
things, updating existing things, fixing problems in existing things, and/or managing people
doing any of the previous.&lt;/p&gt;

&lt;p&gt;In addition to being the most hands-on of the ladder choices, engineering is also the intellectual
core of a tech company. As a result, it’s often the “power center” where decisions
are made and upper management is drawn from. This is not always the case, though- at a few
tech companies, it’s product or design that runs the show.&lt;/p&gt;

&lt;p&gt;The downside of engineering, particularly at larger companies, is that you’re typically focused
on a very narrow slice of the company’s technology. This gets better as you become more senior,
but other ladders like product management offer more breadth starting from the beginning.&lt;/p&gt;

&lt;p&gt;Another limitation of engineering is that very specific skills are required, e.g. coding for
software jobs. Many PhDs don’t have the necessary background here or enjoy these activities
enough to do them every day.&lt;/p&gt;

&lt;h3 id=&quot;product-management&quot;&gt;Product management&lt;/h3&gt;

&lt;p&gt;Product managers are responsible for ensuring the high-level success of the products they work on.
They do this by talking to customers, writing up requirements documents, setting priorities
for engineering work, and developing relationships with other teams inside the company, among
other activities. The work can be all over the place, and really varies a lot based on the needs of
the product and the structure of the teams you’re working with.&lt;/p&gt;

&lt;p&gt;The nice thing about product management, and the reason that I went into it originally, is that
it’s super flexible and broad, even early on in your career. As an entry-level PM at Google,
I not only interacted with lots of senior engineers, but also got exposure to legal, PR,
design, internationalization, research, and other specializations within the company.&lt;/p&gt;

&lt;p&gt;The downside of product management, and the reason that I eventually switched into engineering,
is that it’s less technical and more relationship-oriented than the other ladders. Some people love
this kind of work, though, so don’t let me dissuade you if you have the right personality for it.&lt;/p&gt;

&lt;h3 id=&quot;data-science&quot;&gt;Data science&lt;/h3&gt;

&lt;p&gt;Data science, at least when called as such, is the newest of the ladder choices. Data scientists
do quantitative analysis to support product development. The exact day-to-day projects vary a lot,
but some examples here include designing and evaluating product experiments, building models
to detect malicious user behavior, and forecasting the company’s future product demand.&lt;/p&gt;

&lt;p&gt;When I started my career 12 years ago, most of the jobs in this space were much more specialized,
e.g. “financial analyst” or “experimental statistician”, so I didn’t apply for them. Since
then, the more general field of “data science” has developed and become broad enough that it’s a
good fit for many technical PhDs.&lt;/p&gt;

&lt;p&gt;Data science is the most quantitative and “researchy” of the ladders, so it’s probably the one
where PhDs have the biggest advantage over those with non-PhD backgrounds. On the other hand,
it’s usually less about building new things and more about analyzing existing things (e.g.,
whether an experiment around a product feature was successful), so I think the potential
scope and impact of the work is more limited compared to the other ladders.&lt;/p&gt;

&lt;p&gt;Another downside of data science is that many tech companies don’t have a data science ladder.
Or, if they do, it might be limited to just a very small part of the overall business. This will
probably improve in the future, though.&lt;/p&gt;

&lt;h2 id=&quot;applying-and-leveling-as-a-phd&quot;&gt;Applying and leveling as a PhD&lt;/h2&gt;

&lt;p&gt;Unlike academic jobs, most of the positions in the tech ladders above don’t require a PhD. Instead,
it might be listed as “desired” or “a plus” in the associated job descriptions. The impact
of having a PhD versus not having one in the interview process will vary a lot based on the
company and specific position you’re applying for. You might be asked to give a seminar on your
research, or, as is the case for many software engineering jobs, it might make zero difference
in how you’re interviewed.&lt;/p&gt;

&lt;p&gt;Once you pass the interviews, having a PhD should improve the initial level you’re assigned
and the associated compensation you’re offered (see
&lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;this previous post on levels&lt;/a&gt;). When I started at Google, for instance,
my PhD allowed me to skip the first two rungs on the PM ladder even though I had little prior
job experience. This put me several years ahead of new grads entering with only bachelor’s
degrees.&lt;/p&gt;

&lt;p&gt;Wherever you end up, you’re likely to be working with and working for many people who don’t have
PhDs. It’s nice being special, and people will definitely notice your PhD when you’re applying for
new positions, but once you’re settled in a job, having the degree isn’t a big deal.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tech can be a great place for PhDs, and, although I’m a bit biased, I think it’s better than the
alternative career choices for many people. If you’re finishing up a PhD or stuck in an
unfulfilling academic job, it’s totally worth exploring your options in the space.&lt;/p&gt;</content><author><name></name></author><summary type="html">I spent 5 years of my life getting a PhD, but like many others who've gotten this degree, I decided to leave academia after graduation. At the time, I explored several career choices but ultimately decided to take a Product Manager job at Google. In this post, I want to discuss why I think tech is a great destination for people with technical PhDs.</summary></entry><entry><title type="html">How to do an architecture interview</title><link href="https://yolken.net/blog/architecture-interviews" rel="alternate" type="text/html" title="How to do an architecture interview" /><published>2020-12-24T11:26:00-08:00</published><updated>2020-12-24T11:26:00-08:00</updated><id>https://yolken.net/blog/architecture-interviews</id><content type="html" xml:base="https://yolken.net/blog/architecture-interviews">&lt;p&gt;Many software engineering interview loops include an “architecture interview”, where the
candidate is asked to develop a high-level design for a software system. Over the last few
years, I’ve given many, many of these interviews, so I’ve seen a wide range of performances
across the spectrum, from “absolutely terrible” to “we need to hire this person now!”.&lt;/p&gt;

&lt;p&gt;Based on these experiences, I’d like to share what it takes to succeed in these interviews as
the candidate, and some common behaviors to avoid.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Although the exact format can vary, most architecture interviews begin with an open-ended
prompt of the form “design &lt;em&gt;X&lt;/em&gt;”. The &lt;em&gt;X&lt;/em&gt; can be filled in with a generic software system,
for instance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A distributed &lt;a href=&quot;https://en.wikipedia.org/wiki/Key%E2%80%93value_database&quot;&gt;key/value store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_crawler&quot;&gt;web crawler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A video streaming system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An alternative, which I think is the more interesting approach, is to fill in the blank with
a well-known product or product feature; some examples here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generating the Facebook news feed&lt;/li&gt;
  &lt;li&gt;Executing a Robinhood user’s trade flow&lt;/li&gt;
  &lt;li&gt;Matching Uber drivers and riders&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The target design, whether generic or product-based, might be something related to the company’s
own systems or products, but it’s often not.&lt;/p&gt;

&lt;p&gt;The question is left open-ended and high-level deliberately. The interviewer is not looking for
a specific answer (usually), but rather wants to observe the process by which you break down
the problem, dig into the pieces, and justify your decisions. As you discuss your solution,
the interviewer will ask questions, steer you towards or away from specific areas, and really try
to understand what it would be like to collaborate with you on the design of a real project.&lt;/p&gt;

&lt;h2 id=&quot;structure-is-key&quot;&gt;Structure is key&lt;/h2&gt;

&lt;p&gt;Because the questions are so open-ended, and because you’re being evaluated as much on your
process as your specific solution, structuring your answer is really, really important. Here’s
a structure that I think works well for most of these questions.&lt;/p&gt;

&lt;h3 id=&quot;step-1-clarification&quot;&gt;Step 1: Clarification&lt;/h3&gt;

&lt;p&gt;Once you get the question, the first step is to make sure you understand what you’re being asked
to design. For the “design a system to match Uber drivers and riders” example, for instance,
if you’ve never used Uber before it’s probably good to say that and ask for more details.
Even if you’re familiar with the thing being asked about, it’s helpful to draw a simple picture
with stick figures to make sure that you and the interviewer are on the same page.&lt;/p&gt;

&lt;p&gt;This is also the time to ask about rough orders of magnitude scale (e.g., how many requests
per second are expected, etc.). However, I wouldn’t get too bogged down in these numbers- a
good design should have lots of room for growth and not be built to a specific set of static
dimensions.&lt;/p&gt;

&lt;h3 id=&quot;step-2-high-level-drawing&quot;&gt;Step 2: High-level drawing&lt;/h3&gt;

&lt;p&gt;Next, you should draw out a high-level diagram that shows the major pieces and how they’re
connected. As discussed later on, the idea here is to be high-level and not over-engineer at
this phase. You should mention that you’re deliberately being simple and high-level,
and that you’ll dig into improvements later so the interview knows that you’re not being sloppy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple_architecture_diagram.png&quot; alt=&quot;Simple architecture diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Uber case, as in many others, you’ll probably have clients, a layer of web servers,
and some sort of storage layer that keeps track of the states of the users and other entities
in the system.&lt;/p&gt;

&lt;h3 id=&quot;step-3-interface-details&quot;&gt;Step 3: Interface details&lt;/h3&gt;

&lt;p&gt;Once you have a picture of the main pieces, I think it’s really useful to describe the system
interface, i.e. what are the specific inputs and outputs, independent
of any internal implementation details. In the case of a client/server type design (most common),
these map to the requests that the clients make and the responses that they get.&lt;/p&gt;

&lt;p&gt;Being really specific about these (the different types, what they include, etc.) ensures that
you and the interviewer are on the same page and also guides the discussion of the implementation
details in later steps.&lt;/p&gt;

&lt;p&gt;In the Uber example, you’ll have requests from the rider client (i.e., app) for a ride, requests
from the driver client to change status, to accept a potential ride or not, etc. In this specific
example, the request flows can be fairly complex and are probably an important part of the design.&lt;/p&gt;

&lt;h3 id=&quot;step-4-implementation-details&quot;&gt;Step 4: Implementation details&lt;/h3&gt;

&lt;p&gt;Once you’ve defined the high-level pieces and the interfaces, it’s time to dig into the internal
implementation details. There are many different things you could focus on here, so it’s really
important to lean on your interviewer for guidance. Some potential topics to cover here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tradeoffs in choices around specific components (e.g., using a relational DB vs. a
  &lt;a href=&quot;https://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt; solution)&lt;/li&gt;
  &lt;li&gt;How a specific request type is handled end-to-end (including DB changes, etc.)&lt;/li&gt;
  &lt;li&gt;Schemas for any data stores&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-5-enhancements-for-scalability-performance-etc&quot;&gt;Step 5: Enhancements for scalability, performance, etc.&lt;/h3&gt;

&lt;p&gt;Once your interface and basic implementation are in place, you can then discuss how to increase the
maximum load that your system can handle. This is also a good time to talk about the reliability of
your design and what you could do to improve it, if applicable.&lt;/p&gt;

&lt;p&gt;As with the previous step, it’s really important to lean on your interviewer here and try to
dig into the areas that they feel are the most interesting to cover.&lt;/p&gt;

&lt;p&gt;Although the exact solutions will vary based on the context, some general approaches that may
be helpful here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Replication:&lt;/strong&gt; Stateless components can be replicated to handle more traffic and be
  resilient to failures in individual instances. This may also help for stateful things like DBs if
  you send the reads and writes to different instances and can hand-wave away
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_consistency&quot;&gt;consistency&lt;/a&gt; issues.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharding:&lt;/strong&gt; Splitting up your traffic by geography, user id, etc. and allocating each bucket to
  a semi-independent copy of your system may allow you to increase scale without redesigning
  everything from scratch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caching:&lt;/strong&gt; Adding caches in front of read-only data can significantly improve performance in
  many cases and reduce DB load.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Queueing:&lt;/strong&gt; Adding queues in your system may improve reliability and shield downstream
  components from load spikes. However, it can increase latency and also is hard to implement in
  synchronous request flows, so it’s most appropriate for asynchronous data pipelines.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;common-mistakes&quot;&gt;Common mistakes&lt;/h2&gt;

&lt;p&gt;Even with good structure, there are some very common traps that candidates fall into that
reduce the quality of their answers in my view.&lt;/p&gt;

&lt;h3 id=&quot;being-too-service-oriented&quot;&gt;Being too service-oriented&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service-oriented-architecture (SOA)&lt;/a&gt;
is a design pattern which eschews monolithic components for more specialized, distributed ones.
Over time, it’s evolved into the idea of breaking up monolithic systems into lots of tiny
&lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot;&gt;microservices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for instance, instead of having a single server that both accepts requests from clients
and updates the DB, you might introduce a “database service” between the app server and the
database. Now, you have two services instead of one. Over time, the original app server is split
out further and further until it’s just a router without any business logic in it.&lt;/p&gt;

&lt;p&gt;While SOA and its microservices variant have benefits in some cases, they’re super easy to abuse,
make designs significantly more complex, and, without more understanding of the motivations, might
not be necessary in a real-world, large-scale system at all.&lt;/p&gt;

&lt;p&gt;Here’s an extreme example of what I don’t want to see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/excessive_soa.png&quot; alt=&quot;Excessive SOA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Err on the side of being monolithic, then split things out later in the interview if and only if
there’s a good reason to do so.&lt;/p&gt;

&lt;h3 id=&quot;over-engineering-too-early&quot;&gt;Over-engineering too early&lt;/h3&gt;

&lt;p&gt;Related to SOA abuse is over-engineering your solution too early in the process. Yes,
having 3 layers of caching, or a queue between your app servers and your DB, or a fancy sharded
data store might make your system more scalable. However, it’s unlikely that you’ll need those
in the first iteration, they make your design significantly more complex, and, without more testing
and iteration, it’s impossible to know how much these things will actually help.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, start simple and then add complexity later in your answer if needed.
Adding complexity is easier than removing it, and this also matches how many real-world systems
are implemented.&lt;/p&gt;

&lt;h3 id=&quot;using-components-you-dont-fully-understand&quot;&gt;Using components you don’t fully understand&lt;/h3&gt;

&lt;p&gt;Don’t include overly-hyped technologies in your solution (“Kafka!”, “Cassandra!”,
“machine learning!”) unless you really understand them and have day-to-day experience using them.
Otherwise, you’re likely to use them in the wrong way or look like an idiot when the interviewer
asks you follow-ups about how they work.&lt;/p&gt;

&lt;p&gt;It’s much better to stick to less-sexy things that you actually know, e.g. MySQL, which can still be
(and actually are) the basis for many real-world, large scale systems. In the course of your
answer, it’s fine to mention other technologies that might be relevant, but you should explain that
you don’t have a lot of experience with them so you’d need to do more investigation before including
them in your design.&lt;/p&gt;

&lt;h3 id=&quot;getting-specific-in-the-wrong-areas&quot;&gt;Getting specific in the wrong areas&lt;/h3&gt;

&lt;p&gt;It’s impossible to cover all of the details of a complex system like Uber’s ride matching
in a 45-60 minute interview. When you focus too much on one specific thing (e.g., the database
schema), you’re necessarily omitting the chance to cover other aspects of the problem in a very
detailed way.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, start at a high-level and then dig into the lower-level components that your
interviewer steers you towards. Don’t waste time on details that your interviewer doesn’t care
about.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Doing well in an architecture interview is prerequisite for many software positions, particularly
the higher-level ones. Having a solid structure, starting from a high-level, avoiding
over-engineering, and sticking to what you know are the keys to success.&lt;/p&gt;</content><author><name></name></author><summary type="html">Many software engineering interview loops include an &quot;architecture interview&quot;, where the candidate is asked to develop a high-level design for a software system. Over the last few years, I've given many, many of these interviews. Based on these experiences, I'd like to share what it takes to succeed in them, and some common behaviors to avoid.</summary></entry><entry><title type="html">How tech acquisitions work</title><link href="https://yolken.net/blog/how-acquisitions-work" rel="alternate" type="text/html" title="How tech acquisitions work" /><published>2020-12-06T12:50:00-08:00</published><updated>2020-12-06T12:50:00-08:00</updated><id>https://yolken.net/blog/how-acquisitions-work</id><content type="html" xml:base="https://yolken.net/blog/how-acquisitions-work">&lt;p&gt;In &lt;a href=&quot;/blog/youre-about-to-be-acquired&quot;&gt;an earlier post&lt;/a&gt;, I listed out signs that your employer is
about to be acquired. In this one, I want to talk about how the tech acquisition process works
from end-to-end, based on my personal experiences.&lt;/p&gt;

&lt;h2 id=&quot;background-my-acquisition-experiences&quot;&gt;Background: My acquisition experiences&lt;/h2&gt;

&lt;p&gt;My first acquisition occurred in 2013, when my employer, &lt;a href=&quot;https://mopub.com/&quot;&gt;MoPub&lt;/a&gt;, was acquired
by &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter&lt;/a&gt;. I had joined the year before when the company was around 45
employees. Over the course of that year, the company had done really well, and by the time we were
acquired we had more than doubled in size.&lt;/p&gt;

&lt;p&gt;The second acquisition happened in 2020 (just a few weeks ago!), when
&lt;a href=&quot;https://segment.com/&quot;&gt;Segment&lt;/a&gt; was bought by &lt;a href=&quot;https://twilio.com&quot;&gt;Twilio&lt;/a&gt;. As with MoPub,
this happened about a year after I started. But, in this case, I had joined the company at
a much later stage, when it was around 500 employees, and growth was a bit lower.&lt;/p&gt;

&lt;h2 id=&quot;aside-why-acquisitions-happen&quot;&gt;Aside: Why acquisitions happen&lt;/h2&gt;

&lt;p&gt;Running a tech startup is a very expensive endeavor. The vast majority of companies
depend on millions (or tens of millions, or hundreds of millions) of dollars from outside investors
to hire lots of staff, lease fancy offices, market their products, and do other things to attain
the high growth rates expected in the industry.&lt;/p&gt;

&lt;p&gt;These investors expect to earn their money back, plus a healthy return, within a relatively
quick time frame, typically in under ten years. In addition, employees and other insiders
are given equity in the company as a part of their compensation. While the company is still
private, however, this equity is highly illiquid, and thus can’t be used to pay off debt,
buy a house, or invest in other things.&lt;/p&gt;

&lt;p&gt;The end result is that there is strong pressure on startup executives and boards for a
“liquidity event” at some point in the company’s first decade of life. Although an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Initial_public_offering&quot;&gt;IPO&lt;/a&gt; is the flashiest way to do this and the
one with the highest potential returns, it’s a huge pain to execute. You need to be the right
size, have the right financial numbers, time the market, hire lots of expensive bankers, deal with
messy compliance issues (e.g., &lt;a href=&quot;https://en.wikipedia.org/wiki/Sarbanes%E2%80%93Oxley_Act&quot;&gt;SOX&lt;/a&gt;),
etc.&lt;/p&gt;

&lt;p&gt;Getting acquired is faster and easier, while potentially still being very profitable. Thus, it’s
the exit choice taken by a lot of companies.&lt;/p&gt;

&lt;h2 id=&quot;types-of-acquisitions&quot;&gt;Types of acquisitions&lt;/h2&gt;

&lt;p&gt;It’s important to note that there’s a lot of variability in how acquisitions work and,
in particular, how they affect employees.&lt;/p&gt;

&lt;p&gt;Although the acquisitions I went through happened at different company stages, they were
fairly similar in that they both:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Were successful exits, i.e. the companies were being acquired for significantly more than they
  had received in funding. This meant that common shareholders, including employees, made money
  from the deals.&lt;/li&gt;
  &lt;li&gt;Were being acquired for both their products and teams. This meant that nearly
  all employees were given offers and that most people’s day-to-day work didn’t change significantly
  in the immediate aftermath of closing.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Not all acquisitions are like this, though. Among other examples:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Your employer is not acquired for a significant amount of money. Thus, employees receive little,
  if anything, from their common stock. If they acquired this stock by exercising options, they
  could lose money.&lt;/li&gt;
  &lt;li&gt;Your employer is acquired for its team but not its products. The existing products are deprecated
  and employees are integrated into new organizations that might work on completely different
  things.&lt;/li&gt;
  &lt;li&gt;Your employer is acquired, but not all employees receive offers. Or, employees might be given
  provisional (contract) offers and be required to re-interview for long-term positions.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I don’t have experience with any of the above, but I think they’re not uncommon, particularly
for small companies that haven’t found their footing yet.&lt;/p&gt;

&lt;h2 id=&quot;the-process&quot;&gt;The process&lt;/h2&gt;

&lt;p&gt;I wasn’t an insider in either of my past acquisitions, and I’m not an expert in the process.
However, based on what I observed and what I’ve read about other deals, it seems like these
acquisitions go through a common set of steps. Here’s the general flow.&lt;/p&gt;

&lt;h3 id=&quot;1-initial-negotiation&quot;&gt;1: Initial negotiation&lt;/h3&gt;

&lt;p&gt;Acquisitions begin with negotiation between the company and the potential acquirer. Movies and TV
shows make this process out to be super dramatic, happening in fancy boardrooms crammed with
people in expensive clothing yelling and insulting each other. But, the reality is probably more
boring- lots of emails, phone calls, and informal chats between the two companies and internally
within their boards of directors.&lt;/p&gt;

&lt;p&gt;Given the complexity of these deals and the amounts of money involved, lawyers and other external
advisors will start getting involved at this stage. However, employees are generally not going
to be told anything yet.&lt;/p&gt;

&lt;h3 id=&quot;2-formal-declaration-of-intent&quot;&gt;2: Formal declaration of intent&lt;/h3&gt;

&lt;p&gt;The first big milestone is often a “letter of intent” or “term sheet” which lays out the basic
outline of the proposed acquisition. The key details here are the amount that the acquirer
intends to pay and the general structure of the deal (i.e., whether the acquirer will pay cash or
be providing equity). This agreement also explains what needs to happen for the deal to actually
be signed, and in particular the due diligence that has to be done first.&lt;/p&gt;

&lt;p&gt;The agreement itself it typically non-binding. However, it would be considered poor form for
either side to pull out or demand a significant change in terms without good reason, so it
serves as a fairly reliable starting point for any final agreement.&lt;/p&gt;

&lt;p&gt;As with the initial negotiation, the details are confidential and employees are usually not
told anything.&lt;/p&gt;

&lt;h3 id=&quot;3-due-diligence-and-agreement-drafting&quot;&gt;3: Due diligence and agreement drafting&lt;/h3&gt;

&lt;p&gt;After the initial terms are agreed to, the deal enters an intense, multi-week “due diligence” phase.
Just as you wouldn’t buy a house without doing an inspection first, an acquirer is not going to
plunk down hundreds of millions of dollars until they’re very certain of what they’re buying.&lt;/p&gt;

&lt;p&gt;A big chunk of this due diligence, and the one most likely to affect engineering employees, involves
the company’s technology. The acquirer will have many questions about the architecture, tech
stack, and other implementation details of the company’s systems. They may review the code manually
and also scan it for security vulnerabilities and use of non-permissive open-source licenses.&lt;/p&gt;

&lt;p&gt;A lot of these questions involve low-level details which executives are unlikely to know.
Thus, at this phase, some lower-level employees might be “let in” on the secret so they can help
out with the process. However, the deal is still kept confidential and anything
shared inside the company is strictly on a “need to know” basis.&lt;/p&gt;

&lt;p&gt;While the due diligence is going on, the two sides also work on crafting the final acquisition
agreement. In addition to negotiation on topics not covered by the initial letter
of intent, there are a ton of very low-level details that need to be investigated, written up,
and included in the final agreement. Many, many lawyer hours are required, and the final agreement
can be hundreds of pages long.&lt;/p&gt;

&lt;h3 id=&quot;4-agreement-signed&quot;&gt;4: Agreement signed&lt;/h3&gt;

&lt;p&gt;Once the agreement is finalized and signed by both sides, the deal becomes legally binding.
This is when the acquisition is typically announced internally and in the media. Because of the
secrecy in the earlier phases, this is also when many employees first find out. It’s a cause for
celebration, but also for lots of uncertainty around the effects on pay and day-to-day work
(discussed below).&lt;/p&gt;

&lt;h3 id=&quot;5-signing-to-closing&quot;&gt;5: Signing to closing&lt;/h3&gt;

&lt;p&gt;Signing the acquisition deal does not mean that the two companies are immediately merged or
even that the acquisition is guaranteed to happen. There are still more prerequisites that have to
be satisfied before closing.&lt;/p&gt;

&lt;p&gt;The biggest blocker, assuming that the acquisition is large enough, is to get government approval.
In the US, the Department of Justice (DOJ) and Federal Trade Commission (FTC) have the right to
review the deal to ensure that there are no antitrust or other legal issues (see &lt;a href=&quot;https://en.wikipedia.org/wiki/Hart%E2%80%93Scott%E2%80%93Rodino_Antitrust_Improvements_Act&quot;&gt;this page&lt;/a&gt; for details).
Other jurisdictions, such as the EU, have similar processes.&lt;/p&gt;

&lt;p&gt;There are also some legal and financial loose ends to tie up in this period. In the case of
MoPub, we had to go through a detailed financial audit and credit some of our customers
based on small discrepancies found by our auditors. In the case of Segment, employees who had
equity (which was most) had to decide whether to exercise their stock and fill out lots of
legal forms based on their decisions.&lt;/p&gt;

&lt;p&gt;Until government approval is granted and the deal closes, the two companies are legally
not allowed to integrate or even collaborate closely (e.g., on business strategy). Thus, this
period can be kind of awkward for employees. Everyone knows that the deal is happening,
but it’s not finalized and you can’t get full information about what your potential
peers are up to.&lt;/p&gt;

&lt;p&gt;This is also the time when employees are given the details about their post-acquisition roles
in the company and in particular whether there will be any changes in level, pay, reporting,
etc. Assuming that the deal represents a “successful exit”, that the acquirer is keeping the
acquiree’s products around, and that the acquirer doesn’t want everyone to suddenly quit, the
changes here are generally either neutral (i.e., everything stays “as-is”) or positive (i.e., compensation is increased).&lt;/p&gt;

&lt;h3 id=&quot;6-closing&quot;&gt;6: Closing&lt;/h3&gt;

&lt;p&gt;The closing is when the deal actually comes to fruition and the acquisition is executed. After
closing, the acquiree no longer exists as an independent company, and its employees are now
formally part of the acquiring company.&lt;/p&gt;

&lt;h3 id=&quot;7-integration&quot;&gt;7: Integration&lt;/h3&gt;

&lt;p&gt;Once the deal closes, the two companies can formally merge operations and collaborate on future
plans. The details vary a lot, but the integration is typically done gradually because of the
complexity involved. It may take months or even years for the acquiree to be fully
integrated with its new owner.&lt;/p&gt;

&lt;h2 id=&quot;effects-on-pay&quot;&gt;Effects on pay&lt;/h2&gt;

&lt;p&gt;In both of the acquisitions I went through, the biggest questions people had were around
the impact to their compensation, and in particular to the equity portion. The general
answer is that it depends on the terms of the deal and also, potentially, from person to
person based on performance and other factors.&lt;/p&gt;

&lt;p&gt;In the case of MoPub and Segment, base pay was not significantly adjusted for most people.
Future equity (i.e., unvested portions of existing grants) was converted into roughly equivalent
grants in the acquiring company (i.e., similar vesting schedule, similar strike prices, etc.).&lt;/p&gt;

&lt;p&gt;The treatment of vested equity varied based on whether you
were an &lt;a href=&quot;https://www.investopedia.com/terms/a/accreditedinvestor.asp&quot;&gt;accredited investor&lt;/a&gt; or not.
For various legal reasons that I didn’t understand and still don’t, non-accredited investors
received cash for their shares, whereas accredited investors had the option of keeping their
shares and getting them converted into shares of the acquirer. The nominal dollar amounts were
the same in each case, but doing a conversion was potentially better for tax purposes. This
distinction caused a lot of confusion, and maybe some resentment too, but I don’t think the
companies had much choice because of the legal constraints.&lt;/p&gt;

&lt;p&gt;In each case, there was a conversion factor between the two companies’ shares based on the
market price of the acquirer and the dollar amount of the deal. So, you could easily figure
out the dollar amounts involved (for cash-outs) or the number of new shares you’d be getting
(for conversions).&lt;/p&gt;

&lt;p&gt;Overall, in both cases, it seemed generally fair and transparent.&lt;/p&gt;

&lt;h3 id=&quot;retention-bonuses&quot;&gt;Retention bonuses&lt;/h3&gt;

&lt;p&gt;In addition to the normal conversions of existing equity, some deals include retention
bonuses for employees. These are often structured as new equity grants that vest over several
years.&lt;/p&gt;

&lt;p&gt;The rationale here is that the acquirer doesn’t want “key” employees to suddenly quit after the
deal closes. They’re also used as a way to even out compensation, which might vary a lot between
early and later employees.&lt;/p&gt;

&lt;p&gt;These retention bonuses were a big part of the MoPub acquisition. I had not gotten a large
initial grant when I started because I was a late-joining employee, hadn’t negotiated very hard,
and was a relatively risky hire because &lt;a href=&quot;/blog/switching-from-product-to-eng&quot;&gt;I was switching careers&lt;/a&gt;.
The retention bonus that I got was a sizeable chunk of stock, and it was a key factor in keeping me
at Twitter for another two years.&lt;/p&gt;

&lt;p&gt;While it was great to get extra stock, not everyone got the same amount or an amount that they
considered fair. People compared numbers, which caused a lot of drama and resentment in the
final weeks before the acquisition closed.&lt;/p&gt;

&lt;h2 id=&quot;effects-on-day-to-day-work&quot;&gt;Effects on day-to-day work&lt;/h2&gt;

&lt;p&gt;As with pay, the general answer is that it really depends.&lt;/p&gt;

&lt;p&gt;In the case of MoPub, our office was shut down and we were moved into the Twitter offices within
a day of closing. We then went through an abbreviated version of the new employee orientation,
sitting through hours of presentations on Twitter’s history, core values, and tech systems.
Almost immediately, we began meeting with our new Twitter colleagues to plan out product and
technical integrations. These integrations consumed the work of the engineering team for the next
18 months; among other projects, we migrated all of our systems into Twitter’s data
centers, which was incredibly complex.&lt;/p&gt;

&lt;p&gt;In the case of Segment, the integration process has been much more gradual. The day of closing
was almost a non-event; there were no parties, office moves, or new-hire onboarding sessions.
Although things could (and probably will) change in the future, so far we’ve been operating as an
almost completely independent division of our new parent, Twilio. Aside from the changes to our
equity, very little feels different so far.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Being acquired is a common ending for private tech companies. Although the process is complex and
secretive, the outcomes can be very good for employees. It’s important to keep an open mind
and your options open when you learn that your employer is going to be acquired.&lt;/p&gt;</content><author><name></name></author><summary type="html">In an earlier post, I listed out signs that your employer is about to be acquired. In this one, I want to talk about how the tech acquisition process works from end-to-end, based on my personal experiences.</summary></entry><entry><title type="html">Transformative tools</title><link href="https://yolken.net/blog/transformative-tools" rel="alternate" type="text/html" title="Transformative tools" /><published>2020-11-29T12:06:00-08:00</published><updated>2020-11-29T12:06:00-08:00</updated><id>https://yolken.net/blog/transformative-tools</id><content type="html" xml:base="https://yolken.net/blog/transformative-tools">&lt;p&gt;One of the cool things about software engineering is that the associated technologies
are constantly changing. This applies not just to the technical things we build with (i.e., the
programming languages, frameworks, hardware, etc.), but also the tools that we use to
make ourselves better organized and more productive.&lt;/p&gt;

&lt;p&gt;Since I switched into engineering 8 years ago, I’ve witnessed a few tools in the latter
category that have really been “transformative” in terms of how I do my day-to-day work. In this
post, I want to share my personal, before-and-after experiences with these.&lt;/p&gt;

&lt;h4 id=&quot;ground-rules&quot;&gt;Ground rules&lt;/h4&gt;

&lt;p&gt;For the basis of this post, I’m only considering things that are related to process or
productivity, i.e. not specific languages, frameworks, technical systems, etc. Also,
I’m skipping tools that came to prominence more than 8 years ago, which includes Github, GMail,
Google Docs, and many other things that are still very popular and useful today.&lt;/p&gt;

&lt;h2 id=&quot;transformative-tools&quot;&gt;Transformative tools&lt;/h2&gt;

&lt;h3 id=&quot;slack&quot;&gt;Slack&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/slack_logo.png&quot; alt=&quot;Slack logo&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I started my career, email was everything. I spent hours each day reading through reams
of messages and crafting well-written, doubly-proofread replies in long, back-and-forth threads
with colleagues and executives.&lt;/p&gt;

&lt;p&gt;Now, I write maybe one email a month at work. The vast majority of the back-and-forth conversation
that used to happen in email is now in &lt;a href=&quot;https://www.slack.com&quot;&gt;Slack&lt;/a&gt;, a cloud-based communication
system that provides instant group and 1:1 chat. These technologies have been around for a while
(I remember them from my dial-up AOL account in the 1990’s), but Slack packages them in a pretty,
feature-rich way and has been very successful at getting adoption inside tech companies over the
last few years.&lt;/p&gt;

&lt;p&gt;Having a conversation in Slack is obviously faster than having one over email. However, the key
benefit for me with Slack is that I can edit or delete messages after I’ve posted them. Now,
I can just say what’s on my mind and if I’m wrong about something (as I often am), I can go
back and correct myself. Gone is the fear around referring to the wrong system when debugging
a problem, making a spelling mistake, expressing an opinion too forcefully, or other things
that obsessive people like me used to worry about and get slowed down by when drafting emails.&lt;/p&gt;

&lt;p&gt;These features, combined with all the other bells and whistles that Slack offers, have really
transformed how I communicate at work. Of course, there are some downsides, particularly in that it
enables more frequent, lower-quality interruptions. On the whole, though, I think Slack and its
competitors (e.g.,
&lt;a href=&quot;https://www.microsoft.com/en-us/microsoft-365/microsoft-teams/group-chat-software&quot;&gt;Microsoft Teams&lt;/a&gt;)
have been a net positive and can really transform communication in other industries as well.&lt;/p&gt;

&lt;h3 id=&quot;vscode&quot;&gt;VSCode&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/vscode_logo.png&quot; alt=&quot;VSCode logo&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Software engineers spend a lot of time writing and editing text files. These include not just
code but also the configuration files and documentation that live alongside the former.&lt;/p&gt;

&lt;p&gt;When I started my career, the choices here were either to use a very lightweight, bare-bones
text editor on the one hand, or a heavyweight, bloated
&lt;a href=&quot;https://en.wikipedia.org/wiki/Integrated_development_environment&quot;&gt;integrated developer environment (IDE)&lt;/a&gt;
on the other. Many of these tools were not free software
(I remember &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime text&lt;/a&gt; in particular), required hours
to set up correctly, and would often have performance issues when working in large projects.&lt;/p&gt;

&lt;p&gt;Now, I use &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;VSCode&lt;/a&gt; for nearly all text editing. VSCode is developed
by Microsoft, but unlike most of their historical products, it’s
free and open-source. I was a little skeptical when it first came out- I haven’t enjoyed any
Microsoft products since &lt;a href=&quot;https://en.wikipedia.org/wiki/Microsoft_Flight_Simulator_2004:_A_Century_of_Flight&quot;&gt;Flight Simulator 2004&lt;/a&gt;- but since then I’ve been won over.&lt;/p&gt;

&lt;p&gt;The transformational thing about VSCode for me is that it strikes the right balance between
a lightweight text editor and an IDE. I can use it for the plain Markdown of this blog
but then switch into a golang or Python project and get code completion, error checking,
and other, IDE-ish features without the associated bloat.&lt;/p&gt;

&lt;p&gt;VSCode is far from perfect, and there are some situations in which I still wouldn’t use it;
in large Java or Scala projects, I would probably stick with
&lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;, for instance. But, it’s continually improving,
super extensible, and has a robust and growing third-party developer community. It’s significantly
improved my productivity and happiness, and I imagine that it will only get more adoption over time.&lt;/p&gt;

&lt;h3 id=&quot;docker-compose&quot;&gt;Docker Compose&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/docker_logo.png&quot; alt=&quot;Docker logo&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Containerization, i.e. the ability to easily run processes in semi-isolated environments, has
had a big impact on how software is deployed in production. &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;
popularized the technology, and since then it’s played a key role in
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; and other large-scale, orchestration frameworks.&lt;/p&gt;

&lt;p&gt;Personally, though, I think the biggest benefit to containerization has been in how I run
software on my local machine. Here’s why.&lt;/p&gt;

&lt;p&gt;Many software projects that engineers work on depend on other, third-party systems to run locally-
the most common examples here are relational databases like MySQL or Postgres; others that I often
see are caches (Redis, Memcached), message brokers (NSQ, Kafka, etc.), and non-relational storage
backends (S3, DynamoDB, etc.).&lt;/p&gt;

&lt;p&gt;Prior to Docker, the choices for running these things locally weren’t great. You could install
and run them as standard applications, but the directions for doing this would vary based on your
OS, OS version, and other tools running on your system. After installing, your drive would be
forever corrupted with whatever junk these tools needed (shared libraries, etc.), and the
tools themselves would be silently running in the background, consuming resources and doing
who knows what else with your network and file system.&lt;/p&gt;

&lt;p&gt;Alternatively, you could run all these things in a virtual machine (VM),
e.g. with &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtualbox&lt;/a&gt;. VMs are better at providing isolation, but
they’re pretty heavyweight. They required monolithic, multi-hundred megabyte image files
(which were often created by someone else by hand), took minutes to boot up, and were a pain to
share files and network access with.&lt;/p&gt;

&lt;p&gt;Now, with Docker, and in particular the &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;Docker Compose&lt;/a&gt;
utility, all of this setup is a breeze. With a single YAML file, I can configure
a relational database, a multi-node Kafka cluster, a fake S3 backend, or nearly anything else
for local development and testing. Whether you’re running Mac, Linux, Windows, or whatever else,
this same bundle of services can be started by typing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up&lt;/code&gt; into the terminal.&lt;/p&gt;

&lt;p&gt;In addition to making running apps locally easier, which, depending on the project, may not really
be attainable, Docker Compose allows one to write more realistic tests. Instead of mocking out
access to S3, Kafka, or other complex dependencies, I can just let my tests hit these things using
their “real” APIs (but pointed at compose-hosted instances). This makes me more confident that the
software works and reduces the amount of manual testing I have to do in a remote, pre-production
environment.&lt;/p&gt;

&lt;h3 id=&quot;lucidchart&quot;&gt;Lucidchart&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/lucidchart_logo.png&quot; alt=&quot;Lucidchart logo&quot; height=&quot;50&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Software systems can be complicated. Beyond text descriptions, it’s very common to create
stylized diagrams to show what the main components are and how they interact. These can be
created before the system is built, i.e., as part of design document, or afterwards, as part of
the documentation for the people who have to maintain the system.&lt;/p&gt;

&lt;p&gt;Up until a year ago, my go-to tool for making these diagrams was
&lt;a href=&quot;https://www.omnigroup.com/omnigraffle&quot;&gt;Omnigraffle&lt;/a&gt;. Omnigraffle creates pretty diagrams, but
it’s a desktop-based application that isn’t collaborative. Sharing the outputs is like
sharing Excel spreadsheets in 2003- you have to email the files around and have
&lt;a href=&quot;https://en.wikipedia.org/wiki/Token_ring&quot;&gt;token-ring-like&lt;/a&gt; rules for deciding who is allowed
to make edits at any given time.&lt;/p&gt;

&lt;p&gt;When I started at my current job, I made the usual request for an Omnigraffle license. Instead
of providing one, however, the IT team told me to just use &lt;a href=&quot;https://www.lucidchart.com&quot;&gt;Lucidchart&lt;/a&gt;,
a cloud-based, collaborative alternative. As with the other examples in this blog post, I was
initially resistant to change but then warmed up after getting more familiar with the tool.&lt;/p&gt;

&lt;p&gt;Lucidchart is not the first cloud-based diagramming tool. However, it’s the first one
I’ve used that actually creates Omnigraffle-quality (i.e., beautiful, professional) outputs.
Moreover, the interface is super intuitive and the collaboration features are actually a pleasure to
use- one feature that’s particularly nice for remote meetings is that if I’m in a diagram with one
of my colleagues, they can see where my mouse is hovering and I can see theirs.&lt;/p&gt;

&lt;p&gt;At my current employer (&lt;a href=&quot;https:/segment.com/&quot;&gt;Segment&lt;/a&gt;), we’ve used Lucidchart for creating very
large system diagrams, with hundreds of components and dozens of collaborators, without running into
any problems. Lucidchart has enabled these types of collaborations, which previously would have been
much harder, and also made it much less of a hassle for me to create non-collaborative diagrams
for my work-related design docs and documentation pages.&lt;/p&gt;

&lt;p&gt;If and when I switch employers, I’m going to strongly request that they adopt Lucidchart for their
internal diagramming.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Over the last few years, I’ve incorporated several tools into my day-to-day work that have
really transformed how I get things done. That being said, these tools aren’t perfect and,
moreover, there are several other areas of software engineering work that have yet to be
transformed for the better. I’ll address the latter in a future post!&lt;/p&gt;</content><author><name></name></author><summary type="html">Since I switched into engineering 8 years ago, I've witnessed a few productivity and organization tools that have really been &quot;transformative&quot; in terms of how I do my day-to-day work. In this post, I want to share my personal, before-and-after experiences with these.</summary></entry><entry><title type="html">Signs you’re about to be acquired</title><link href="https://yolken.net/blog/youre-about-to-be-acquired" rel="alternate" type="text/html" title="Signs you're about to be acquired" /><published>2020-11-08T20:24:00-08:00</published><updated>2020-11-08T20:24:00-08:00</updated><id>https://yolken.net/blog/youre-about-to-be-acquired</id><content type="html" xml:base="https://yolken.net/blog/youre-about-to-be-acquired">&lt;p&gt;Over the course of my tech career thus far, I’ve been through two acquisitions. In each case,
I was just a normal employee without any special inside knowledge, and found out only a few days
before the deals were publicly announced. In retrospect, however, there were some clear signs
in the weeks leading up to the announcements that something unusual was going on.&lt;/p&gt;

&lt;p&gt;I’d like to share what these early indicators were so that you can be on the lookout for them
in your workplace.&lt;/p&gt;

&lt;h2 id=&quot;background-my-acquisition-experiences&quot;&gt;Background: My acquisition experiences&lt;/h2&gt;

&lt;p&gt;My first acquisition occurred in 2013, when my employer, &lt;a href=&quot;https://mopub.com/&quot;&gt;MoPub&lt;/a&gt;, was acquired
by &lt;a href=&quot;https://twitter.com&quot;&gt;Twitter&lt;/a&gt;. I had joined the year before when the company was around 45
employees. Over the course of that year, the company had done really well, and by the time we were
acquired we had more than doubled in size.&lt;/p&gt;

&lt;p&gt;The second acquisition happened in 2020 (just a few weeks ago!), when
&lt;a href=&quot;https://segment.com/&quot;&gt;Segment&lt;/a&gt; was bought by &lt;a href=&quot;https://twilio.com&quot;&gt;Twilio&lt;/a&gt;. As with MoPub,
this happened about a year after I started. But, in this case, I had joined the company at
a much later stage, when it was around 500 employees, and growth was a bit lower.&lt;/p&gt;

&lt;p&gt;The post-acquisition experiences were super interesting, but I’m going to save talking
about them for a later post.&lt;/p&gt;

&lt;h2 id=&quot;signs-an-acquisition-is-coming&quot;&gt;Signs an acquisition is coming&lt;/h2&gt;

&lt;h3 id=&quot;founders-and-executives-are-distracted&quot;&gt;Founders and executives are distracted&lt;/h3&gt;

&lt;p&gt;Getting a multi-hundred million or multi-billion dollar acquisition deal across the line requires
a massive amount of effort. It starts with initial discussions then evolves into full-fledged
negotiations, sometimes with multiple suitors at once. Once the outline of a deal is reached, the
potential acquirer spends several weeks doing due diligence and peppering company insiders
with detailed questions about the business.&lt;/p&gt;

&lt;p&gt;Dealing with all this plus the prospect of a massive payday down the line is super
distracting. Unless you’re an amazing actor (which few people are), it’s hard to pretend that
you’re still super excited about the weekly product plan, the company’s regular all-hands meetings,
and other mundane, day-to-day operational details.&lt;/p&gt;

&lt;p&gt;In both the MoPub and Segment cases, I noticed this change in behavior in the founders and
non-founder executives beginning a few weeks before the acquisitions happened. Everyone involved
still did their day-to-day jobs, but they became much more distant, as if they were
preoccupied with something bigger.&lt;/p&gt;

&lt;p&gt;A single person going through this transformation wouldn’t be suspicious- they could be dealing
with a personal issue or maybe they decided to leave the company and start interviewing elsewhere.
Multiple people doing this at the same time, however, is too much of a coincidence and suggests
that some big, company-level change like an acquisition is brewing.&lt;/p&gt;

&lt;h3 id=&quot;increased-focus-on-security&quot;&gt;Increased focus on security&lt;/h3&gt;

&lt;p&gt;A big chunk of the due diligence process that happens before a deal is signed involves evaluating
security vulnerabilities in the acquiree and then, as the deal gets closer, fixing any critical
issues found. No acquirer wants to pay hundreds of millions of dollars for a company and then have
hackers get in and steal all of the customer data and intellectual property.&lt;/p&gt;

&lt;p&gt;In the case of Segment, we had a strong security team that handled these issues. MoPub, however,
had no security team and, in fact, had pretty lax security practices. In the weeks before the
acquisition, I remember some of my colleagues going in and cleaning up things that no one had cared
one iota about before, such as plugging vulnerabilities in our UIs and removing
the numerous opportunities for &lt;a href=&quot;https://en.wikipedia.org/wiki/SQL_injection&quot;&gt;SQL injection attacks&lt;/a&gt;
in our backend systems.&lt;/p&gt;

&lt;p&gt;At the time, I didn’t think anything of it, but in retrospect I should have been suspicious
that these efforts were quietly going on in the background, without any attacks to motivate them
or any announcements about a change in engineering priorities.&lt;/p&gt;

&lt;h3 id=&quot;lack-of-urgency-around-hiring-and-retention&quot;&gt;Lack of urgency around hiring and retention&lt;/h3&gt;

&lt;p&gt;Hiring engineers takes a lot of work (many, many hours of interviews and meetings), and once
they’ve joined, they’re really expensive to have on staff. Likewise, keeping engineers happy
and retaining them after they’ve been around for a few years is also time and money intensive.&lt;/p&gt;

&lt;p&gt;When an acquisition is going on, these activities can drop a few notches on the priority ladder. Executives and others become too busy (see discussion above), and large investments in talent
could reduce the short-term value of the company. Moreover, it’s a little awkward to be selling
candidates on your cool, fast-moving startup when you know that you’re about to gobbled up by
a larger company.&lt;/p&gt;

&lt;p&gt;In both the MoPub and Segment cases, hiring slowed down to a trickle in the periods leading up
to the acquisitions. At the time, however, both businesses were growing a lot, and I felt that
we desperately needed more hands on deck to keep systems up-and-running and continue developing
new products. The urgency around hiring just seemed out-of-whack with the need. There also didn’t
seem to be any urgency around retaining people who were thinking of leaving (and then ended
up quitting).&lt;/p&gt;

&lt;h3 id=&quot;unusual-meetings-and-meeting-changes&quot;&gt;Unusual meetings and meeting changes&lt;/h3&gt;

&lt;p&gt;Because of the complexity of large tech acquisitions, it’s hard to predict exactly what will
happen when. A deal could be signed suddenly at 3AM on a Saturday night, or it might drag on
for months longer. This, combined with the fact that executives are super distracted and busy,
means that meetings are likely to be moved, cancelled, or inserted at weird times.&lt;/p&gt;

&lt;p&gt;A few days before the Twitter deal was announced, the CEO of MoPub summoned a bunch of us to
the office on a Sunday. Nothing like that had &lt;em&gt;ever&lt;/em&gt; happened before. At the meeting, he told us
about the acquisition (this was when I learned!) and explained that he needed us to sign some
paperwork about our equity before the agreement could be finalized.&lt;/p&gt;

&lt;p&gt;At Segment, the last company all-hands before the acquisition was cancelled at the last minute.
That had never, ever happened before. I never found out the real reason, but I suspect that
the pending acquisition played either a direct (e.g., they were hoping to make an announcement)
or indirect (e.g., the people on the agenda were too busy) role.&lt;/p&gt;

&lt;p&gt;I didn’t stalk executives’ calendars, but if I had done this I probably would have seen even
more obvious signs of unusual activity- meetings very early in the morning or late at night,
meeting details being hidden after previously being open all the time, etc.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If you’re working at a private tech company, an acquisition can happen at any time, without
warning. Be on the lookout for the signs discussed above, as well as other, unusual activity,
which could mean something big is about to happen!&lt;/p&gt;</content><author><name></name></author><summary type="html">Over the course of my tech career thus far, I've been through two acquisitions. In each case, I was just a normal employee without any special inside knowledge, and found out only a few days before the deals were publicly announced. In retrospect, however, there were some clear signs in the weeks leading up to the announcements that something unusual was going on.</summary></entry><entry><title type="html">RSUs FTW</title><link href="https://yolken.net/blog/rsus-ftw" rel="alternate" type="text/html" title="RSUs FTW" /><published>2020-10-18T15:00:00-07:00</published><updated>2020-10-18T15:00:00-07:00</updated><id>https://yolken.net/blog/rsus-ftw</id><content type="html" xml:base="https://yolken.net/blog/rsus-ftw">&lt;p&gt;Equity in one’s employer is a large part of the compensation for software engineers.
Unfortunately, though, it can be really hard to understand, and, in some cases, actually cause
financial losses to employees. In this post, I want to describe how the different kinds of equity
work and why I strongly prefer one type, restricted stock units (RSUs), over options-based
alternatives.&lt;/p&gt;

&lt;h4 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h4&gt;

&lt;p&gt;Much of the discussion in this post, particularly with regards to taxes, is US-centric. Also,
although it should be obvious, I’m not a lawyer or accountant or any kind of expert in
compensation and taxes, so everything I say should be taken with a grain of salt.&lt;/p&gt;

&lt;h2 id=&quot;how-equity-works&quot;&gt;How equity works&lt;/h2&gt;

&lt;h3 id=&quot;types&quot;&gt;Types&lt;/h3&gt;

&lt;p&gt;There are at least three kinds of equity that companies offer their employees:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Kind&lt;/th&gt;
      &lt;th&gt;What it is&lt;/th&gt;
      &lt;th&gt;Who offers it&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Incentive_stock_option&quot;&gt;Incentive stock options (ISOs)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Option to buy shares of the company in the future at a pre-determined (strike) price. Has most favorable tax treatment, but subject to the most restrictions (e.g., only for employees).&lt;/td&gt;
      &lt;td&gt;Small-to-mid stage startups&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Non-qualified_stock_option&quot;&gt;Non-qualified stock options (NQSOs)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Option to buy shares of the company in the future at a pre-determined (strike) price. Work like ISOs, but with fewer restrictions and less favorable tax treatment.&lt;/td&gt;
      &lt;td&gt;Startups, but much less common than ISOs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Restricted_stock&quot;&gt;Restricted stock units (RSUs)&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Shares of company stock that vest in the future.&lt;/td&gt;
      &lt;td&gt;Late-stage startups, public companies&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;The most common types are ISOs (generally for smaller startups) and RSUs (generally for larger startups and public companies), and we’ll discuss how each of these work in more detail later.&lt;/p&gt;

&lt;p&gt;NQSOs are fairly rare in my experience. They used to be given by public companies, sometimes
in combination with RSUs, but most of those companies have since switched over to 100% RSUs; I
haven’t seen an offer that includes them since I started at Google in 2009. Where they are used
in some cases is to extend exercise windows when employees with ISOs can no longer hold them (e.g.,
because they’ve left the company), but I don’t have any personal experience with this.&lt;/p&gt;

&lt;h3 id=&quot;initial-grant&quot;&gt;Initial grant&lt;/h3&gt;

&lt;p&gt;When you join a company that has equity-based compensation, the offer letter includes the following
details on the equity portion:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The type of equity&lt;/li&gt;
  &lt;li&gt;The total number of units&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;vesting schedule&lt;/em&gt;, i.e. how the equity is distributed to you over time&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, it might say something like:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Upon approval of our board of directors, you will be awarded an ISO grant to purchase 10,000
shares of the company’s common stock at a price per share equal to the fair market value per
share of the common stock on the date of grant. 25% of the options shall vest 12 months after
the date your vesting begins subject to your continuing employment with the company. The
remaining options shall vest monthly over the next 36 months in equal monthly amounts subject to
your continuing employment with the Company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Note that equity grants have to be approved by the company board. They don’t refuse (usually!)
but since they only meet occasionally, there may be a delay of a few weeks between when you join
and when this approval happens. Depending on the terms of the company’s equity plan, this
time gap may also delay the start of your vesting.&lt;/p&gt;

&lt;p&gt;The strike price of any options is usually not set in the offer letter since it can fluctuate in
the period before the grant is approved, but you’ll typically be told a rough number to expect
before signing. If it’s an RSU grant, then there’s no strike price to set; however, some offers
may include a clause that the number of shares can be adjusted up or down if the price of the stock
changes significantly before approval.&lt;/p&gt;

&lt;p&gt;The vesting schedule described in the example above is fairly typical- a one year “cliff” followed
by three years of uniform, monthly distributions. It’s possible to get a grant with no
cliff, but that’s very rare in my experience. It’s also possible, although not very common,
to get a grant with unevenly spread vesting, e.g., with 40% of the equity coming in the fourth
year.&lt;/p&gt;

&lt;h4 id=&quot;aside-rsus-in-private-companies&quot;&gt;Aside: RSUs in private companies&lt;/h4&gt;

&lt;p&gt;When private companies issue RSUs, there is usually a &lt;em&gt;second&lt;/em&gt; condition of vesting that also
requires a liquidity event. So, your time-based vesting isn’t really “vesting” in the traditional
sense- although you can see the “shares” in your equity account they’re basically imaginary
until the company is acquired or has an IPO.&lt;/p&gt;

&lt;p&gt;This is done for tax reasons- if the shares were vested for real before a liquidity event, you’d
owe a lot of taxes without being able to sell a portion to cover the bill.&lt;/p&gt;

&lt;p&gt;But it gets even more complicated- in order to get this tax treatment,
the RSUs have to have a finite expiration, typically set to 7 years. This means that if there’s no
liquidity event for a long time, the RSUs could become worthless. This is one of the factors
pushing Airbnb and other late-stage companies to go public this year- otherwise, if they wait too
long, many current and former employees (myself included) could lose a lot of money from expired
RSUs.&lt;/p&gt;

&lt;h3 id=&quot;refresher-grants&quot;&gt;Refresher grants&lt;/h3&gt;

&lt;p&gt;Most companies have “refresher” programs to grant more equity to employees over time. This is
a way to ensure that people have an incentive to stay after their initial grant expires. They’re
also used to increase compensation as a reward for high performance or a promotion.&lt;/p&gt;

&lt;p&gt;These refreshers are considered completely new grants; they require board approval and can
have different vesting schedules and strike prices than one’s initial grant. Some companies,
for instance, have cliffs for new grants but not for refreshers. Others might have multi-year
cliffs to reduce the overlap with existing grants.&lt;/p&gt;

&lt;p&gt;It’s very important to ask about a company’s refresher policies before signing an offer; these
policies can vary a lot from company to company, and, depending on the details, they can have a big
impact on total compensation over time.&lt;/p&gt;

&lt;h2 id=&quot;what-happens-when&quot;&gt;What happens when&lt;/h2&gt;

&lt;p&gt;Before going into the details of ISOs vs. RSUs, it’s helpful to summarize the lifecycle
of different kinds of equity and the impact it has on taxes and income:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Event&lt;/th&gt;
      &lt;th&gt;ISOs&lt;/th&gt;
      &lt;th&gt;RSUs (private company)&lt;/th&gt;
      &lt;th&gt;RSUs (public company)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Grant&lt;/td&gt;
      &lt;td&gt;Get a letter with details, approve via your company’s equity manager (e.g., &lt;a href=&quot;https://carta.com/&quot;&gt;Carta&lt;/a&gt; or &lt;a href=&quot;https://www.schwab.com/public/eac/home&quot;&gt;Schwab&lt;/a&gt;). No tax impact.&lt;/td&gt;
      &lt;td&gt;Ditto.&lt;/td&gt;
      &lt;td&gt;Ditto.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Vest&lt;/td&gt;
      &lt;td&gt;Now can exercise to convert the options to shares. No tax impact yet.&lt;/td&gt;
      &lt;td&gt;“Shares”, which are basically imaginary as described above, show up in account somewhere, but otherwise nothing.&lt;/td&gt;
      &lt;td&gt;Portion of vested shares are automatically sold to cover income taxes. The remainder is transferred to a brokerage account where it can be held or sold.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Exercise&lt;/td&gt;
      &lt;td&gt;Pay strike price to convert options to shares. Taxes are not witheld, but may owe AMT later (discussed below).&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
      &lt;td&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Sell shares&lt;/td&gt;
      &lt;td&gt;Get cash, owe taxes on spread between strike price and sale price. Depending on the timing, this may be long-term capital gains, which is the best outcome tax-wise. Note that selling shares is heavily restricted, if not outright banned, for private companies.&lt;/td&gt;
      &lt;td&gt;Can’t sell yet.&lt;/td&gt;
      &lt;td&gt;Get cash, owe capital gains taxes on difference between sale price and price at time of vest.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Leave company&lt;/td&gt;
      &lt;td&gt;No effect on exercised options. At most companies, vested but unexercised options are forfeited if they’re not exercised within 90 days of departure (more discussion below).&lt;/td&gt;
      &lt;td&gt;“Vested” shares stay in account somewhere until there’s a liquidity event.&lt;/td&gt;
      &lt;td&gt;No impact on vested shares.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;A few notes:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I’m not including NQSOs because, as discussed earlier, they’re not as common&lt;/li&gt;
  &lt;li&gt;The details for private company RSUs assume that there’s a liquidity condition on vesting&lt;/li&gt;
  &lt;li&gt;Lots of lower-level details like early exercise, qualifying vs. non-qualifying ISO
  dispositions, etc. are omitted&lt;/li&gt;
  &lt;li&gt;These are based on my personal experiences only. The details may vary based on the precise
  terms of the company’s equity plan.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;why-isos-are-a-pain&quot;&gt;Why ISOs are a pain&lt;/h2&gt;

&lt;p&gt;Now that we’ve discussed how equity works, let me explain why I find ISOs to be a huge pain.&lt;/p&gt;

&lt;h4 id=&quot;too-much-complexity&quot;&gt;Too much complexity&lt;/h4&gt;

&lt;p&gt;Because of strike prices, exercise windows, tax rules, etc. options are much more complex from
a cognitive standpoint than plain shares. Scary,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Black%E2%80%93Scholes_model&quot;&gt;PhD-level math&lt;/a&gt; is required to deeply understand them. Even simple tasks like figuring out the gain from exercising and selling
is non-trivial because you have to account for strike prices, which may be non-uniform across
your portfolio.&lt;/p&gt;

&lt;p&gt;As an employee who’s not a financial expert, I just want money or something that converts directly
into money via a simple formula.&lt;/p&gt;

&lt;h4 id=&quot;exercising-is-expensive&quot;&gt;Exercising is expensive&lt;/h4&gt;

&lt;p&gt;The strike price of an employee-issued option is based on the “fair market value” of the company’s
stock at the time of grant. For an early stage company which isn’t worth a lot of money, these
strike prices might be pennies per share. For a later-stage company that’s worth hundreds of
millions or billions of dollars, however, the strike prices will look more like the share prices
of equivalent companies on public markets.&lt;/p&gt;

&lt;p&gt;As a result, exercising options, particularly those issued at a later stage, can be very expensive.
For example, you might need to write a check for $80,000 if you want to exercise the options that
vest on your first anniversary.&lt;/p&gt;

&lt;p&gt;This isn’t a big deal if the company is public because you can turn around and sell the shares
after exercise. For private companies, however, there’s nothing to sell- you need to dig into your
personal reserves to get the money.&lt;/p&gt;

&lt;p&gt;Of course, you don’t need to exercise your options- you can just keep them in your account as-is.
But, if you wait, you may have a higher tax bill later. And, as discussed below, you might be forced
to exercise if you leave the company before a liquidity event happens.&lt;/p&gt;

&lt;h4 id=&quot;massive-amt-bills&quot;&gt;Massive AMT bills&lt;/h4&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Alternative_minimum_tax&quot;&gt;alternative minimum tax (AMT)&lt;/a&gt; is a
parallel tax system in the US that was designed to prevent rich people from avoiding taxes.
It has a lower maximum rate than the “regular” system, but has a different set of rules
for counting income and deductions. When preparing your taxes, you calculate what you owe under
both the regular and AMT-based systems, then you pay the higher of the two.&lt;/p&gt;

&lt;p&gt;One feature of the AMT is that the spread between the strike price and fair market value of an
ISO is considered income if the option is exercised and held. This can really hurt, particularly
if your company goes up a lot in value between when your grant was issued and when your options
are exercised.&lt;/p&gt;

&lt;p&gt;For example, suppose your vested options have a strike price of $1 / share. Two years later,
your options vest and the company is now worth $20 / share. If you exercise these options and
hold the resulting shares (your only choice for a private company, typically), then the $19
spread is considered income for AMT purposes. If you’re exercising a lot of stock, this
could increase your tax bill by tens of thousands of dollars.&lt;/p&gt;

&lt;p&gt;Like many taxation topics, there are a lot of caveats here that could reduce the burden.
For instance, you could get some of this money back as a &lt;a href=&quot;https://www.irs.gov/forms-pubs/about-form-8801&quot;&gt;credit&lt;/a&gt; in a future year when you don’t owe AMT. However, it still requires paying extra
upfront, and the details are pretty complicated.&lt;/p&gt;

&lt;h4 id=&quot;golden-handcuffs&quot;&gt;Golden handcuffs&lt;/h4&gt;

&lt;p&gt;As mentioned above, many companies have an “exercise or lose it” policy on vested options when you
leave your job. Being forced to exercise, however, is expensive and can have a big tax impact.
For people who are already wealthy, it’s not a huge deal. But, for those who are early in their
careers and/or from less-privileged backgrounds, this can make them feel trapped and prevent
job mobility.&lt;/p&gt;

&lt;p&gt;A small but growing subset of companies (including my employer, &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt;!),
give departing employees the option to convert their ISOs to NQSOs, which can be left
unexercised for many years. This is great, and hopefully more companies will do this in the future,
but it has a long path to becoming a standard practice in the tech industry.&lt;/p&gt;

&lt;h4 id=&quot;large-downside-risk&quot;&gt;Large downside risk&lt;/h4&gt;

&lt;p&gt;When you exercise an option, you become a stockholder in the company. Like all stocks, the value
could go up or it could go down. Startups, though, are particularly high-risk investments- unlike
most shares traded on public exchanges, there is a fairly reasonable chance that you’ll lose 100%
of your money. This can happen if the company goes belly-up. Alternatively, the company might
be acquired but 100% of the purchase price might go to higher-priority debt and equity holders
(the stock issued to employees is usually at the end of the chain).&lt;/p&gt;

&lt;p&gt;This downside risk isn’t a big deal to venture capitalists, who are already very wealthy
and can diversify by investing in a large portfolio of startups. But, your average tech
worker could lose a reasonable chunk of their net worth by exercising options in their employer.&lt;/p&gt;

&lt;h2 id=&quot;rsus-are-better&quot;&gt;RSUs are better&lt;/h2&gt;

&lt;p&gt;RSUs avoid most of the problems listed above. In particular they:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Don’t require a degree in finance to value- just multiply the number of shares by the price
  per share&lt;/li&gt;
  &lt;li&gt;Don’t need to be exercised- they’re just given to you&lt;/li&gt;
  &lt;li&gt;Are unlikely to trigger AMT&lt;/li&gt;
  &lt;li&gt;Have less downside risk- in the worst case, they’re worth nothing, but at least you didn’t pay
  anything extra for them&lt;/li&gt;
  &lt;li&gt;Make leaving a job low-drama, at least from a financial perspective&lt;/li&gt;
  &lt;li&gt;Are “imaginary” from a tax standpoint until liquidity&lt;/li&gt;
  &lt;li&gt;Are easier to deal with at tax time- most of the gain is just income that’s included with salary
  in your W-2&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unlike ISOs, most of the gain of RSUs is taxed as income at the time of vest. This means that
your overall tax burden might be a bit higher compared to ISOs that, when exercised and sold
under ideal conditions, can be taxed at lower, long-term capital gains rates.&lt;/p&gt;

&lt;p&gt;These tax benefits can be substantial for super wealthy people who have crack teams of accountants
handling their finances. But, for everyone else including the vast majority of tech company
employees, I think the hassles and extra downside risk just aren’t worth it.&lt;/p&gt;

&lt;p&gt;While options might be reasonable for very early companies, companies that are worth more than a
couple hundred million dollars can and should switch to RSUs. Or, even better, just give your
employees more cash and let them invest it however they want.&lt;/p&gt;</content><author><name></name></author><summary type="html">Equity in one's employer is a large part of the compensation for Software Engineers. In this post, I want to describe how the different kinds of equity work and why I strongly prefer one type, restricted stock units (RSUs), over options-based alternatives.</summary></entry><entry><title type="html">Six years of recruiting emails</title><link href="https://yolken.net/blog/six-years-of-emails" rel="alternate" type="text/html" title="Six years of recruiting emails" /><published>2020-09-26T16:59:00-07:00</published><updated>2020-09-26T16:59:00-07:00</updated><id>https://yolken.net/blog/six-years-of-emails</id><content type="html" xml:base="https://yolken.net/blog/six-years-of-emails">&lt;p&gt;As a software engineer working in the San Francisco Bay Area, I get &lt;em&gt;a lot&lt;/em&gt; of
unsolicited recruiting emails. I recently decided to dig through my email archives
and do some analysis of the long-term trends. Here are the results.&lt;/p&gt;

&lt;h2 id=&quot;methodology&quot;&gt;Methodology&lt;/h2&gt;

&lt;p&gt;I get career-related messages sent to both my LinkedIn and Gmail accounts. Here’s a typical
example (with the sender’s name blacked out for privacy):&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img width=&quot;600&quot; src=&quot;/assets/typical_email.png&quot; alt=&quot;typical email&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The first step was to get all these messages out of my accounts and into a format
that I could use for the analysis.&lt;/p&gt;

&lt;p&gt;For LinkedIn, this was easy- there’s a “Get a copy of your data” section in the account
privacy settings. I selected “Messages”, clicked the “Request Archive” button and then,
a few minutes later, downloaded a CSV that contained one row per message, with columns
for all of the important metadata: sender, recipient, subject, date, etc.&lt;/p&gt;

&lt;p&gt;For Gmail, the process was a bit more involved. I had to go through Google’s general
export product, &lt;a href=&quot;https://takeout.google.com/&quot;&gt;Takeout&lt;/a&gt;, scroll down the Gmail section,
then select the labels to export. Thankfully, I’ve done a good job labelling
all of my career related emails, so I could just export those and not everything in my account.&lt;/p&gt;

&lt;p&gt;A few minutes later, I got the option to download a bundle of all my emails in an
&lt;a href=&quot;https://en.wikipedia.org/wiki/Mbox&quot;&gt;mbox&lt;/a&gt; file. This is a legacy
format originally developed for text-based email clients in Unix; unfortunately, Google
doesn’t give you the option to download your emails in an easier-to-use format like CSV.&lt;/p&gt;

&lt;p&gt;The file had several million lines that looked like this:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From 1669160939957813740@xxx Thu Jun 11 00:38:38 +0000 2020
X-GM-THRID: 1669160939957813740
X-Gmail-Labels: Archived,Important,Opened,Category Updates,jobs
Delivered-To: XXXXX@gmail.com
Received: by 2002:a8a:40a:0:0:0:0:0 with SMTP id n10csp877323ocb;
        Wed, 10 Jun 2020 17:38:38 -0700 (PDT)
X-Received: by 2002:a17:902:ab87:: with SMTP id f7mr5405841plr.166.1591835918733;
        Wed, 10 Jun 2020 17:38:38 -0700 (PDT)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I then wrote a Python script to read this file, pull out the inbound messages, and convert
each one to a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;from,subject,date,body&amp;gt;&lt;/code&gt; tuple. Thankfully, the Python standard library contains a
&lt;a href=&quot;https://docs.python.org/3/library/mailbox.html&quot;&gt;mailbox&lt;/a&gt; module that parses mbox files
and makes it easy to pull out the sender, recipient, subject, and date for each message.
Getting the bodies was a little trickier since mbox bodies can have multiple parts, each with
a different encoding (text, html, etc.), but I managed to find some
&lt;a href=&quot;https://stackoverflow.com/questions/26567843/reading-the-mail-content-of-an-mbox-file-using-python-mailbox&quot;&gt;examples on Stack Overflow&lt;/a&gt;
to copy.&lt;/p&gt;

&lt;p&gt;I then merged the Gmail data with the LinkedIn data, exported everything to a CSV, and opened
this in Google Sheets. Finally, I spent an hour going through all the messages and deleting
the ones that weren’t unsolicited. The result was a clean spreadsheet with one row per recruiting
email that I could use for my analysis.&lt;/p&gt;

&lt;h2 id=&quot;the-results&quot;&gt;The results&lt;/h2&gt;

&lt;p&gt;The following shows the number of unsolicited recruiter emails I’ve received by month since the
beginning of 2014:&lt;/p&gt;

&lt;iframe width=&quot;850&quot; height=&quot;526&quot; seamless=&quot;&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot; src=&quot;https://docs.google.com/spreadsheets/d/e/2PACX-1vQ4ZHxTwbmETB3mUTcILEkU77r_R8TVF3UcgW3Ems11ULMfJWuG8wwioWwx-myDnrEUhcbk1myxaAAr/pubchart?oid=1061438793&amp;amp;format=interactive&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;A few interesting trends:&lt;/p&gt;

&lt;h4 id=&quot;volume-has-increased-a-lot-over-the-years&quot;&gt;&lt;em&gt;Volume has increased a lot over the years&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Back in 2014, I was only getting a handful of messages per month. Now, I routinely get more
than one a day. The fact that I have more experience now than I did earlier in my career is
certainly a factor. But, I think the key driver here is simply that tech keeps getting bigger
and bigger, and the need for skilled engineers has increased significantly over time.&lt;/p&gt;

&lt;h4 id=&quot;there-are-clear-seasonal-patterns&quot;&gt;&lt;em&gt;There are clear seasonal patterns&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Email volume goes down significantly around the winter holidays. There’s also a smaller drop
in the middle of the summer. Spring and fall are the busiest times, which also matches when
companies do the most interviewing.&lt;/p&gt;

&lt;h4 id=&quot;i-get-more-emails-when-im-actively-engaged-in-a-job-search&quot;&gt;&lt;em&gt;I get more emails when I’m actively engaged in a job search&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;The peaks in 2015, 2017, and 2019 correspond to periods when I was actively on the job
market. During these times, I was much more active about updating my LinkedIn profile, which
is probably a strong signal that a candidate is looking for something new. It’s also possible
that word spread through recruiters or friends, and that led to more job solicitations.&lt;/p&gt;

&lt;h4 id=&quot;there-was-no-significant-drop-due-to-covid&quot;&gt;&lt;em&gt;There was no significant drop due to COVID&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Despite many companies laying people off or implementing hiring freezes earlier this year, I
still got a lot of recruiter emails. Now that startup valuations are back up and companies are
hiring again, I’m getting more emails than ever.&lt;/p&gt;

&lt;h2 id=&quot;other-trends&quot;&gt;Other trends&lt;/h2&gt;

&lt;h4 id=&quot;big-companies-can-send-lots-of-emails&quot;&gt;&lt;em&gt;Big companies can send lots of emails&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Facebook has by far been the peskiest of all the companies over the years, sending me more than
25 unsolicited recruiting emails since 2014. They’ve also sent a few text messages to my phone,
which is super-annoying. I should note, though, that I did interview there back in 2012, so I’m
probably in their system as a past prospect, which makes me a more likely sourcing target.&lt;/p&gt;

&lt;p&gt;Amazon has also sent a lot of emails, particularly over the last two years.&lt;/p&gt;

&lt;p&gt;Interestingly, I’ve only gotten one email from Apple, and nothing from other tech giants like
Microsoft, Netflix, IBM, SAP, and Cisco.&lt;/p&gt;

&lt;h4 id=&quot;follow-ups&quot;&gt;&lt;em&gt;Follow-ups&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;A very common pattern is to send a message, then send a few follow-ups over the next
few days with slightly different bodies and subject lines. See the Opendoor example
at the beginning of this post for an example.&lt;/p&gt;

&lt;p&gt;I guess that’s one way to make sure that an email isn’t missed, although it can get a little
tiresome if you’re not interested in the company at all.&lt;/p&gt;

&lt;h4 id=&quot;cute-and-not-so-cute-subject-lines&quot;&gt;&lt;em&gt;Cute (and not-so-cute) subject lines&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;Recruiters and sourcers try to be clever with subject lines and message introductions to
catch your attention and make the messages seem more personal.&lt;/p&gt;

&lt;p&gt;Binary is one way to get attention, but I have no idea what it says since I’m not a
computer :-):&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img width=&quot;400&quot; src=&quot;/assets/message2.png&quot; alt=&quot;typical email2&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Another trick is to put your current and past employers in the subject so that
it looks more personalized, and then reference them in the body.
Not sure how effective it is, though:&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img width=&quot;400&quot; src=&quot;/assets/message3.png&quot; alt=&quot;typical email3&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Emoji are cute. Here’s a message that had one in the subject
and then used them liberally in the body:&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img width=&quot;400&quot; src=&quot;/assets/message4.png&quot; alt=&quot;typical email4&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;I’ve gotten a lot of recruiting emails over the years, and, assuming that current trends
continue, will get a lot more in the future. Despite these messages being unsolicited, I don’t
consider them “spam” and actually like reading them. The vast majority are polite, informative,
and well-written. Even if I’m not actively looking for a new job, it’s nice to learn about what’s
out there so I know where to apply the next time I’m on the market.&lt;/p&gt;</content><author><name></name></author><summary type="html">As a software engineer working in the San Francisco Bay Area, I get a lot of unsolicited recruiting emails. I recently decided to dig through my email archives and do some analysis of the long-term trends. Here are the results.</summary></entry><entry><title type="html">Service meshes are hard</title><link href="https://yolken.net/blog/service-meshes" rel="alternate" type="text/html" title="Service meshes are hard" /><published>2020-09-20T13:44:00-07:00</published><updated>2020-09-20T13:44:00-07:00</updated><id>https://yolken.net/blog/service-meshes</id><content type="html" xml:base="https://yolken.net/blog/service-meshes">&lt;p&gt;I’ve worked on deploying “service meshes” at multiple companies. Although
they look great on paper, deploying them is a huge pain, with a high
risk of serious production outages. In this post, I want to share some of my war
stories and caution against diving into the service mesh hype too quickly.&lt;/p&gt;

&lt;h2 id=&quot;aside-whats-a-service-mesh&quot;&gt;Aside: What’s a service mesh?&lt;/h2&gt;

&lt;p&gt;A common pattern in software engineering is to support a product or feature
via multiple, semi-independent components. This blog, for instance, is hosted
in Github Pages. When your browser requests the HTML for this page, your
request most likely hits some sort of frontend proxy (e.g.,
&lt;a href=&quot;https://www.nginx.com/&quot;&gt;Nginx&lt;/a&gt;), which then sends the request to a backend
server (implemented in Ruby, perhaps), which then sends out requests to even more
services, e.g. to record stats or fetch user information.&lt;/p&gt;

&lt;h4 id=&quot;direct-communication&quot;&gt;Direct communication&lt;/h4&gt;

&lt;p&gt;The simplest approach for handling requests between these components is to
have them communicate directly. Here’s an illustration:&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/assets/service_meshes1.png&quot; alt=&quot;service mesh simple&quot; width=&quot;400&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Each arrow represents a request from a client to a server. These requests are typically implemented
with &lt;a href=&quot;https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol&quot;&gt;HTTP&lt;/a&gt;, but might use a
specialized, binary protocol instead, e.g. when using something like
&lt;a href=&quot;http://thrift.apache.org/&quot;&gt;Apache Thrift&lt;/a&gt;. The underlying bytes can be encrypted
but are often not since this would require the clients and servers to
handle protocols like &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security&quot;&gt;TLS&lt;/a&gt;,
which adds complexity and reduces performance.&lt;/p&gt;

&lt;p&gt;The picture above doesn’t show how service A “discovers” the addresses of B and C.
These might be hard-coded, looked up in &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;,
or fetched from a centralized service registry like &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul&lt;/a&gt;.
The important thing to note, though, is that the details of doing this are
handled by A itself.&lt;/p&gt;

&lt;h4 id=&quot;using-a-service-mesh&quot;&gt;Using a service mesh&lt;/h4&gt;

&lt;p&gt;A service mesh is a dedicated infrastructure layer for handling the details
of this inter-service communication. Although the exact architecture varies,
with a mesh the picture above might become:&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;img src=&quot;/assets/service_meshes2.png&quot; alt=&quot;service mesh simple&quot; width=&quot;500&quot; /&gt;&lt;/div&gt;

&lt;p&gt;Now, service A doesn’t communicate directly with B and C. Instead, it sends requests
to a local (outbound) proxy that then sends the requests to the (inbound) proxies
for B and C. The latter then forward the requests to the service instances on
their respective hosts. The links between proxies can be, and often are, encrypted
via &lt;a href=&quot;https://developers.cloudflare.com/access/service-auth/mtls/&quot;&gt;mTLS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The control plane is needed so that the proxy configurations can stay up-to-date.
If host 2 disappears, for instance, and is replaced with host 2a, then all
of the proxies on the hosts talking to B need to be updated with the new
address.&lt;/p&gt;

&lt;h3 id=&quot;benefits&quot;&gt;Benefits&lt;/h3&gt;

&lt;p&gt;The nice thing about the mesh architecture is that your services no longer need to
handle the low-level details of communicating with others. This makes a lot of things
substantially easier, at least in theory:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Service discovery:&lt;/strong&gt; Service A doesn’t need to discover the addresses of B and C,
  it can just let the control plane and proxy do that.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Encryption:&lt;/strong&gt; Encryption is now easier because all hosts are running proxies
  that are designed to handle this, and we don’t need to mess with the details of TLS in the
  services themselves.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Complex routing:&lt;/strong&gt; If we want to test a new variation of service B, for instance, we can
  configure the mesh to send 1% of traffic to the new instance and the rest to the older ones.
  If we discover a problem, we can reroute the traffic without redeploying the client code.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Cross-fleet networking observability:&lt;/strong&gt; Since all communication goes through the same
  layer, the mesh can expose a standardized set of metrics and logs for all inter-service links.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These benefits are particularly big when you’re in an environment with a diverse set
of client and server implementations. Service A might be Ruby, B golang, and C Java. Sure,
you could add mTLS, standardized metrics, etc. directly into each service, but you’re going
to have to re-implement the same logic multiple times in multiple languages. Even if the services
are written in the same language, they are probably not going to be using the
same client and server implementations uniformly.&lt;/p&gt;

&lt;h3 id=&quot;implementations&quot;&gt;Implementations&lt;/h3&gt;

&lt;p&gt;Reviewing existing service mesh implementations is beyond the scope of this post. Instead,
I’ll refer you to &lt;a href=&quot;https://servicemesh.es/&quot;&gt;this site&lt;/a&gt;, which has a nice summary and seems
up-to-date. As an alternative to adopting an off-the-shelf implementation, some companies
simply take a “roll your own” approach using &lt;a href=&quot;https://www.envoyproxy.io/&quot;&gt;Envoy&lt;/a&gt; plus a
custom-built control plane service; this is what we did at Stripe.&lt;/p&gt;

&lt;h2 id=&quot;why-theyre-hard&quot;&gt;Why they’re hard&lt;/h2&gt;

&lt;p&gt;From the discussion above, it seems like service meshes are great. They make your
infrastructure more secure, uniform, controllable, and observable. Everyone should be
using them!!&lt;/p&gt;

&lt;p&gt;Unfortunately, though, service meshes make life harder in a number of different ways.&lt;/p&gt;

&lt;h4 id=&quot;scope-is-n2&quot;&gt;Scope is N&lt;sup&gt;2&lt;/sup&gt;&lt;/h4&gt;

&lt;p&gt;Let’s say you have N services and you want to update all of them in some way, for
instance to replace a library with a newer version. Typically, this will involve
O(N) updates and O(N) things that can go wrong. When rolling out a service mesh,
however, you’re making O(N&lt;sup&gt;2&lt;/sup&gt;) updates because you’re changing (and potentially breaking)
how each pair of services communicates.&lt;/p&gt;

&lt;p&gt;This means that, even with a small number of services, there are a lot of things
that can go wrong (and will). Service A might be fine talking to B, and B might be fine
talking to C, but the A to C link might occasionally time out for some weird reason
that takes days to debug. If you’re in a company with dozens of services, the N&lt;sup&gt;2&lt;/sup&gt; effects
can be huge- be prepared for a lot of work rolling things out and debugging.&lt;/p&gt;

&lt;h4 id=&quot;more-hops-more-problems&quot;&gt;More hops, more problems&lt;/h4&gt;

&lt;p&gt;In the non-service-mesh world, communication issues are typically the fault of either
the client or server. If service A is getting HTTP 5XX responses from service B, you can
look at the code and logs for B to understand why that might be happening.&lt;/p&gt;

&lt;p&gt;In the service mesh world, on the other hand, these responses might be coming from B, the
proxy on B’s host, or the proxy on A’s host. Now, instead of looking in one place,
you have to look in three places. This means that the debugging process is slower and
more tedious.&lt;/p&gt;

&lt;h4 id=&quot;encrypted-traffic-looks-like-binary-junk&quot;&gt;Encrypted traffic looks like binary junk&lt;/h4&gt;

&lt;p&gt;There are lots of great tools for inspecting unencrypted traffic. Personally,
I like running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump -i any -A port [my service port]&lt;/code&gt; and watching requests
go back and forth when I’m trying to understand the traffic hitting a service. If
this traffic is encrypted, you can still do this, but all you’ll see is binary junk:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;16:51:07.773675 IP lga15s43-in-f36.1e100.net.https &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; 192.168.0.10.56081: Flags &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;P.], &lt;span class=&quot;nb&quot;&gt;seq &lt;/span&gt;2713:3385, ack 537, win 261, options &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nop,nop,TS val 2846442026 ecr 1037268748], length 672
..J..C..k.H...E....&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;.y..O...&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;..
......F...&lt;span class=&quot;nv&quot;&gt;$o&lt;/span&gt;...........
..B&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;.w.......7V.o.&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;...wc.qk....2.ePyi&lt;span class=&quot;se&quot;&gt;\u&lt;/span&gt;XsTP..R..z.&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;S..
&lt;span class=&quot;s2&quot;&gt;&quot;iT....S...Ju.%..........%.....kZV0...EA9.W.NB.^.....f&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
hV...i&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;8?...&amp;gt;8.&lt;span class=&quot;s2&quot;&gt;&quot;.-..m.H.........y...	.......?.G.&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$U&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;lt;j...s.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&amp;gt;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;....;.....a......6@
[w.&amp;gt;SHQ.%...F....S..e	..f,..T(CA..U....x...../...8..(.j.....k..h.{.^...5n.4f.[....].x.....}
2.....Q..*.^..?.l...e&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;~.]...j......P.....]....R..ZB....7..B9}e&quot;&lt;/span&gt;.....f.&lt;span class=&quot;se&quot;&gt;\.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
AAV&lt;span class=&quot;nv&quot;&gt;$m&lt;/span&gt;....z..m..........x..B.P.&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;0....k..E..S........&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;......{.W..&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Most service meshes only use encryption on the proxy to proxy links and not
on the proxy to service ones. But, these proxy to proxy links are often where a lot of
problems happen, and not being able to easily inspect the details of each request on the
wire makes debugging harder.&lt;/p&gt;

&lt;h4 id=&quot;certificate-management-is-hard&quot;&gt;Certificate management is hard&lt;/h4&gt;

&lt;p&gt;In order to implement mTLS rigorously, you need to generate fine-grained certificates for
all of the nodes in your mesh. Certificate management for individual hosts is hard enough,
but it gets even messier when hosts are shared by multiple services and each one needs
a distinct identity.&lt;/p&gt;

&lt;p&gt;I spent many, many months at Stripe working on a “Service CA” to address this problem. We got
things working in the end, but it required a lot of very careful design and relatively high-risk
changes to components in the existing certificate provisioning flow.&lt;/p&gt;

&lt;h4 id=&quot;control-plane-is-a-single-point-of-failure&quot;&gt;Control plane is a single point of failure&lt;/h4&gt;

&lt;p&gt;The control plane is a critical component of a service mesh. It keeps all of the proxies updated
with the latest service endpoints, routing rules, listener configs, etc. These updates
may be happening frequently due to instances coming up and down, new services being added, and
other changes happening in the environment. Depending on the sources of this information and the
protocol used between the control plane and proxies, keeping all of the data fresh and accurate can
be challenging.&lt;/p&gt;

&lt;p&gt;In addition, the control plane can wreak havoc on your infrastructure if it’s misconfigured
or gets confused about the state of the world.&lt;/p&gt;

&lt;p&gt;A really scary type of incident, which I’ve seen a few times across multiple companies, is when
the control plane thinks that all of the service instances have disappeared (for instance, because
the source that it pulls these from is broken). It blissfully pushes out empty configs to all
of the proxies, all inter-service communication stops, and your company is hard-down
until the issue is fixed.&lt;/p&gt;

&lt;h4 id=&quot;proxies-are-complex&quot;&gt;Proxies are complex&lt;/h4&gt;

&lt;p&gt;Many service meshes use &lt;a href=&quot;https://www.envoyproxy.io/&quot;&gt;Envoy&lt;/a&gt; as the underlying proxy.
While powerful, Envoy is a beast; it has
&lt;a href=&quot;https://www.envoyproxy.io/docs/envoy/latest/configuration/configuration&quot;&gt;hundreds of knobs&lt;/a&gt; that
can be tuned to affect its behavior.&lt;/p&gt;

&lt;p&gt;The code is written in C++, which is not the easiest language to make changes in, and is
prone to segfaults, leaks, and other types of memory issues if you’re not super careful. At
Stripe, we occasionally observed crashes, which required a lot of work to understand and fix.&lt;/p&gt;

&lt;p&gt;These issues aren’t unique to Envoy. Proxies in general are just prone to being complex,
particularly when you’re trying to optimize performance and satisfy the many different use cases
that people have for them.&lt;/p&gt;

&lt;h2 id=&quot;alternatives-to-service-meshes&quot;&gt;Alternatives to service meshes&lt;/h2&gt;

&lt;p&gt;In some cases, you may be able to get the benefits of a service mesh with much less work.&lt;/p&gt;

&lt;h4 id=&quot;for-security&quot;&gt;For security&lt;/h4&gt;

&lt;p&gt;To prevent an unauthorized client from hitting a server, you can use firewall rules
(called &lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&quot;&gt;security groups&lt;/a&gt;
in the AWS context) to lock down access. AWS and other cloud providers make it fairly
straightforward to define these rules at the instance level and keep them updated.&lt;/p&gt;

&lt;p&gt;If you’re in Kubernetes, you can also define service-level firewall rules via
&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/network-policies/&quot;&gt;network policies&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If there is a particularly sensitive origin / destination pair, you can implement mTLS for just
that pair in the client and server code or via a proxy on each side. Doing this as a one-off
is going to be easier than implementing it for all service combinations in your infrastructure.&lt;/p&gt;

&lt;h4 id=&quot;for-load-balancing-and-routing&quot;&gt;For load balancing and routing&lt;/h4&gt;

&lt;p&gt;If you’re running in a cloud environment, consider using hosted load balancers in front
of your services (e.g.,
&lt;a href=&quot;https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html&quot;&gt;ALBs&lt;/a&gt; in AWS).
These typically support target discovery, health checking, complex routing, standardized metrics,
and other things that a service mesh also provides.&lt;/p&gt;

&lt;p&gt;If you’re in Kubernetes, you can use
&lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;services&lt;/a&gt; and other
primitives to get the same kinds of features.&lt;/p&gt;

&lt;h2 id=&quot;the-path-forward&quot;&gt;The path forward&lt;/h2&gt;

&lt;p&gt;If you’ve carefully evaluated the pros and cons and still decided to go forward with a service
mesh, here are some tips to make the process a bit easier.&lt;/p&gt;

&lt;h4 id=&quot;plan-carefully&quot;&gt;Plan carefully&lt;/h4&gt;

&lt;p&gt;Rolling out a service mesh is a really big project. It will require changes to nearly
every service running in your infrastructure, and it can’t be released all at once.&lt;/p&gt;

&lt;p&gt;Think carefully about the phases of the rollout. At Stripe, we started on the client side
without encryption, then implemented the server side without encryption, then,
finally, after that was stable, activated mTLS on a service-by-service basis. We were
also very careful about the order in which services were updated within each phase. The optimal
plan in your environment may be different depending on your risk profile and service topology.&lt;/p&gt;

&lt;h4 id=&quot;pad-your-estimates&quot;&gt;Pad your estimates&lt;/h4&gt;

&lt;p&gt;Take your time estimates for the amount of engineer time required and multiply by 4. Seriously.
Making updates and debugging networking issues in services you don’t fully understand is really
time consuming. Moreover, you’ll discover weird use cases and requirements that you didn’t plan
for and will need to incorporate into your design.&lt;/p&gt;

&lt;p&gt;At Stripe, we originally thought that one person could roll out our service mesh in 3 quarters.
In the end, it took over a year with 4 people on the team contributing. Because we hadn’t
planned for that much work, we had to defer other projects that we had promised to do
(e.g., rolling out Kubernetes more extensively), which caused some resentment among our users.&lt;/p&gt;

&lt;h4 id=&quot;make-it-easy-to-switch-back-and-forth&quot;&gt;Make it easy to switch back and forth&lt;/h4&gt;

&lt;p&gt;Whenever a change is made (e.g., switching a service pair to the service mesh), keep the
old path around for a while and make it easy to revert back. At Stripe, we had a dynamic,
“feature flag” system we could use for this; other companies I’ve been at have had similar
configuration mechanisms.&lt;/p&gt;

&lt;p&gt;If there’s an urgent problem in the middle of the night, it’s a lot easier to revert by clicking a
button in a UI than it is to revert the change in the code, wait for CI, and do a deploy.&lt;/p&gt;

&lt;h4 id=&quot;dont-roll-your-own&quot;&gt;Don’t roll your own&lt;/h4&gt;

&lt;p&gt;Please, please use an existing service mesh implementation if at all possible as opposed
to rolling your own. Even if you can’t use an existing implementation directly, consider
ripping out and reusing the pieces that can be adapted to your environment.&lt;/p&gt;

&lt;p&gt;At Stripe, we built our control plane components completely from scratch. While it was a lot
of fun personally, it took a long time to develop and there were a number of very tricky corner
cases that popped up and led to serious production incidents along the way. It’s much safer
to adopt service mesh components that have been written by domain experts and been
extensively battle-tested outside your company.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Service meshes have a lot of benefits, but also a number of downsides that should be
carefully considered before committing to a rollout. Thankfully, things should get better
in the future as cloud providers include more service mesh features directly into their
products and third-party solutions like
&lt;a href=&quot;https://istio.io/latest/docs/concepts/what-is-istio/&quot;&gt;Istio&lt;/a&gt; become more robust. In the meantime,
though, be careful!&lt;/p&gt;</content><author><name></name></author><summary type="html">Service meshes look great on paper but can be a huge pain to roll out and manage. In this post, I want to share some of my war stories and caution against diving into the service mesh hype too quickly.</summary></entry></feed>