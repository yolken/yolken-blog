<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://yolken.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://yolken.net/" rel="alternate" type="text/html" /><updated>2021-04-11T14:45:29-07:00</updated><id>https://yolken.net/feed.xml</id><title type="html">Benjamin Yolken</title><subtitle>Random thoughts from the perspective of a software engineer, particularly around tech careers and development processes.</subtitle><entry><title type="html">The senior engineer plateau</title><link href="https://yolken.net/blog/senior-engineer-plateau" rel="alternate" type="text/html" title="The senior engineer plateau" /><published>2021-04-11T14:01:00-07:00</published><updated>2021-04-11T14:01:00-07:00</updated><id>https://yolken.net/blog/senior-engineer-plateau</id><content type="html" xml:base="https://yolken.net/blog/senior-engineer-plateau">&lt;p&gt;For several years of my career, I was stuck at the “senior engineer” level, and this made me
feel frustrated and stuck at the associated jobs.&lt;/p&gt;

&lt;p&gt;In this post, I want to explain how this “plateau” happened, why it frustrated me, and
some general tips for navigating out of it.&lt;/p&gt;

&lt;h2 id=&quot;aside-the-senior-engineer-level&quot;&gt;Aside: The senior engineer level&lt;/h2&gt;

&lt;p&gt;As described in &lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;my earlier blog post&lt;/a&gt;, most
companies beyond a small size have well-defined career ladders for software engineers, with at
least 4 levels. The details vary from company to company, but in most of these ladders the
“senior” level is what employees get to after 5+ years of industry experience.&lt;/p&gt;

&lt;p&gt;At most places, this rung on the latter is also considered the “career level”, which implies a few
things. First, this means that once you get to it, you can stay in it forever- as long as you meet
expectations, you can spend 30+ years as a senior engineer, and no one will ever complain about
your lack of ambition or try to push you out for not advancing further.&lt;/p&gt;

&lt;p&gt;Second, as the “career level”, it means that people’s careers naturally flow into it. Assuming
the correct mentorship, management, project work, etc., most company promotion processes don’t
put up lots of barriers for people getting to “senior” and, moreover, might even require them to do
this after a certain number of years at the company.&lt;/p&gt;

&lt;p&gt;Once you get to senior, however, the path beyond it can be much harder. Because staff and higher
roles can come with significantly more compensation (discussed below) and because not everyone
is expected to get up to these levels, companies are much, much pickier about how and why they
promote people into them.&lt;/p&gt;

&lt;h2 id=&quot;my-level-history&quot;&gt;My level history&lt;/h2&gt;

&lt;p&gt;I started my engineering career at MoPub, which, as a small startup, didn’t have formal
levels for individual contributors (ICs). When we were acquired by Twitter, I was slotted at
the staff level, which was great and happened for various reasons that I describe more below.&lt;/p&gt;

&lt;p&gt;For my next two jobs, at Airbnb and Stripe, I was back at the senior level. At both places, but
particularly at Stripe (since that happened later in my career after I had accumulated more
experience), I felt a bit stuck and frustrated at the difficulty in advancing.&lt;/p&gt;

&lt;p&gt;In my most recent job at Segment, I’m back up at the staff level and on a path for further
advancement (I hope!), which has made me happier.&lt;/p&gt;

&lt;h2 id=&quot;why-level-matters&quot;&gt;Why level matters&lt;/h2&gt;

&lt;p&gt;A common statement I hear is that “levels don’t matter” and thus that you shouldn’t care whether
you’re stuck at senior or somewhere else on the ladder for a long time.&lt;/p&gt;

&lt;p&gt;While this is true from a strictly title-based standpoint (personally, I really don’t care whether
my LinkedIn profile says “software engineer” as opposed to “staff software engineer” or something
else), the reality is that levels are more than just words.&lt;/p&gt;

&lt;p&gt;First, they’re an acknowledgement of the work that you’ve done. Like most engineers,
I’m motivated by working on things that matter, and levels are one way (but certainly not the only
way) to express that your work is valued and has had a positive impact at the company.&lt;/p&gt;

&lt;p&gt;Second, and probably more importantly for many, levels play a big role in compensation. As
described in &lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;my earlier blog post&lt;/a&gt;, each level has associated salary and
equity bands. Once you hit the upper end of the band, which may happen relatively quickly if you
negotiated well for your initial offer, it’s hard to get significant increases from year-to-year.&lt;/p&gt;

&lt;p&gt;There are a few other ways, beyond pay bands, that levels affect compensation. At some companies
significant equity increases are tied to promotion. If you don’t get promoted, you might not get
stock refreshers frequently. Also, at companies with bonus programs, the target is often tied
to level. At Stripe, for instance, senior engineers had a target of 10% of base salary
whereas staff had a 20% one. This meant that, all else being equal, staff engineers would get
significantly larger bonuses. Google also had level-specific targets when I was there.&lt;/p&gt;

&lt;h2 id=&quot;frustrations&quot;&gt;Frustrations&lt;/h2&gt;

&lt;h4 id=&quot;productivity-alone-is-not-sufficient&quot;&gt;Productivity alone is not sufficient&lt;/h4&gt;

&lt;p&gt;I consider my productivity to be one of my greatest strengths as an engineer. I just like getting
stuff done, writing code, fixing bugs, etc. and care less about all of the overhead around
promoting my projects, meeting with users, navigating around bureaucracy, and so forth.&lt;/p&gt;

&lt;p&gt;At both Airbnb and Stripe, I felt that I was super productive from a code generation standpoint,
but when it came time to do calibration and make promotion decisions, it didn’t really matter
that much. The evaluators were looking for more general impact, and productivity was just one
among many other data points.&lt;/p&gt;

&lt;p&gt;Personally, I found that frustrating not only because it didn’t align optimally with my strengths
but also because it seems like code &lt;em&gt;should be&lt;/em&gt; the primary criterion for evaluating software
engineers. Software engineers are hired to write software just as doctors are hired to treat
patients and artists are hired to make art. If I’m comparing two engineers or two doctors or two
artists and one produces twice as much output as the other at equivalent quality, I feel like the
more productive one should be at a level that pays twice as much. But, alas, that’s not how the
world works, whether in software or in other professions.&lt;/p&gt;

&lt;h4 id=&quot;breadth-over-depth&quot;&gt;Breadth over depth&lt;/h4&gt;

&lt;p&gt;A related frustration I’ve had with getting to staff level at large companies is that the
promotion criteria place a bigger emphasis on breadth as opposed to depth. You can be an expert
in a technical field and do great work there, but if you don’t also check off other boxes
(e.g., cross-team coordination, mentorship, etc.), then you’ll likely hit roadblocks in getting
to the next level.&lt;/p&gt;

&lt;p&gt;Thus, the system tends to reward people whose work is “horizontal”, i.e. spread across multiple
projects, domains, and types of work as opposed to those who are more “vertically” focused
on a specific thing. This isn’t necessarily wrong (horizontal work can have a big, positive impact
on a company and should be rewarded as such), but it is something to be aware of and is something
that can cause some frustration if, like me, you’re more about depth than breadth.&lt;/p&gt;

&lt;h4 id=&quot;visibility-required&quot;&gt;Visibility required&lt;/h4&gt;

&lt;p&gt;For promotion to senior and lower levels, the direct manager’s word is usually enough- if the
manager says that one of their reports is ready for the next level, and there’s some basic peer
validation, then the person will most likely get promoted.&lt;/p&gt;

&lt;p&gt;For staff and higher levels, though, the manager’s word is typically not enough. The person up for
promotion could be the greatest engineer in the world, but if no one outside of their immediate
team can affirm this, then they’re unlikely to get to the next level.&lt;/p&gt;

&lt;p&gt;The easiest way to get this affirmation is to be &lt;em&gt;visible&lt;/em&gt; to those outside of your team and
particularly to those who are making the promotion decision. Unfortunately, though, this can be
hard if you’re super introverted (as I am), or you’re working head’s down on a deep technical
problem that isn’t flashy and doesn’t naturally lend itself to cross-company visibility.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix-it&quot;&gt;How to fix it&lt;/h2&gt;

&lt;h4 id=&quot;find-the-right-role&quot;&gt;Find the right role&lt;/h4&gt;

&lt;p&gt;This might come across as a bit extreme, but if you really care about career advancement then
the most important thing is to find a company and a role where the work and evaluation criteria
match your strengths. As mentioned above, I feel that I’m strongest on the productivity side
and less good at the “cross team coordination”, “high-level architecture leadership”, and other
dimensions that high-level ICs are promoted for. Other people, however, might excel at the latter
and not want to spend all day pumping out pull requests.&lt;/p&gt;

&lt;p&gt;I don’t have a ton of data to validate this, and this is probably an overly broad generalization,
but in my experience it seems like smaller companies value productivity / “getting things done” more
whereas larger companies place less emphasis on this and more on the other, “broad impact”
traits. I think that’s why I’ve had more career success at MoPub and Segment as opposed to
the larger employers I was at in between.&lt;/p&gt;

&lt;p&gt;Independent of company size, the details will vary a lot from place to place, so it’s important
to assess your strengths, understand what level you’re coming in at, and evaluate how easy or
hard it will be to advance &lt;em&gt;before&lt;/em&gt; you sign a job offer.&lt;/p&gt;

&lt;h4 id=&quot;make-sure-you-check-the-boxes&quot;&gt;Make sure you check the boxes&lt;/h4&gt;

&lt;p&gt;As mentioned above, many companies evaluate employees on a broad set of criteria and require
positive signal in all of them before allowing a promotion. Thus, if you’re trying to advance
it’s really important that you “check off all the boxes”, even if some of these aren’t fun or
aligned to your strengths. So, for instance, if getting to staff requires “mentorship experience”,
then it’s important that you have some opportunity to do this, e.g. by hosting an intern for the
summer.&lt;/p&gt;

&lt;p&gt;You should consult your company’s career ladder documentation and work closely with your direct
manager to figure out what these boxes are and how you can fill out the missing pieces.&lt;/p&gt;

&lt;h4 id=&quot;improve-your-visibility&quot;&gt;Improve your visibility&lt;/h4&gt;

&lt;p&gt;Getting more visibility for yourself and your work is really key for advancing to higher
levels. Even if you’re introverted and even if it’s uncomfortable, you need to ensure that
the people evaluating your work understand what you’re doing and why it’s important.&lt;/p&gt;

&lt;p&gt;In some cases, for instance if you’re at a really small company or working on a flashy,
high-visibility product in a larger company, the visibility comes for free. In other cases,
though, you need to do extra work to get this. Some tips here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Do regular “skip level” 1:1s with your manager’s manager; if they don’t understand your work
  and aren’t promoting you to others, then it’s going to be hard to get ahead.&lt;/li&gt;
  &lt;li&gt;Send out progress reports, launch announcements, etc. so others beyond your immediate team
  know what you and your colleagues are working on.&lt;/li&gt;
  &lt;li&gt;Write blog posts, present at conferences, do internal “tech talks”, and participate in other
  activities that allow you to build your personal brand and promote your work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;At many companies, the senior engineer level is easy to get into but hard to advance beyond.
I personally felt “stuck” at senior earlier in my career, and it seems that this is not
an uncommon experience among software engineers.&lt;/p&gt;

&lt;p&gt;The key thing is to realize how the system works and ensure that where you’re working and what
you’re working on is aligned with your long-term career goals. Once you achieve this alignment,
advancing can still be slow but at least there’s a clear, achievable path to follow.&lt;/p&gt;</content><author><name></name></author><category term="career" /><summary type="html">For several years of my career, I was stuck at the &quot;senior engineer&quot; level, and this made me feel frustrated and stuck at the associated jobs. In this post, I want to explain how this plateau happened, why it frustrated me, and some general tips for navigating out of it.</summary></entry><entry><title type="html">Migrating to Kubernetes is hard</title><link href="https://yolken.net/blog/migrating-to-kubernetes-is-hard" rel="alternate" type="text/html" title="Migrating to Kubernetes is hard" /><published>2021-04-05T13:06:00-07:00</published><updated>2021-04-05T13:06:00-07:00</updated><id>https://yolken.net/blog/migrating-to-kubernetes-is-hard</id><content type="html" xml:base="https://yolken.net/blog/migrating-to-kubernetes-is-hard">&lt;p&gt;Over the last few years, I’ve worked on
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt; migrations at several companies-
Airbnb, Stripe, and Segment (my current employer). In this post, I want to talk about why
these migrations are done, what they involve, and why they can be hard.&lt;/p&gt;

&lt;p&gt;Unlike my previous post on &lt;a href=&quot;/blog/service-meshes&quot;&gt;why service meshes are hard&lt;/a&gt;, my goal
here is not to dissuade you from doing the migration in the first place, but rather to
make it clear that there are a lot of decisions to be made and lots of work to be done.
Migrating to Kubernetes can be very valuable, but you need to be prepared!&lt;/p&gt;

&lt;h2 id=&quot;why-migrate&quot;&gt;Why migrate?&lt;/h2&gt;

&lt;p&gt;There’s lots of existing documentation about what Kubernetes is and how it works (e.g.,
&lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/&quot;&gt;this one&lt;/a&gt;), so
I won’t cover those here. It is worth noting, however, the primary reasons that many companies
decide to migrate to Kubernetes from their legacy platforms (discussed more in the next section):&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;em&gt;The ecosystem:&lt;/em&gt; A vast ecosystem of tools and apps has developed around
  Kubernetes over the last few years. By using Kubernetes internally, it’s easier to take
  advantage of the work that others have done, both in the infrastructure layer (e.g.,
  for networking, service discovery, etc.) and in the applications that are
  being run on top.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Vendor agnosticism:&lt;/em&gt; Kubernetes provides a layer of abstraction on top of whatever
  you’re using to provision individual machines and the associated infrastructure (networking,
  persistent disks, etc.). In theory, switching to Kubernetes makes it easier to do things
  like switch between cloud providers, although in practice this is still hard because
  of all the non-Kubernetes-related infrastructure you need to migrate as well.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Easier, more self-service workload management:&lt;/em&gt; Kubernetes exposes a rich set of APIs
  and controllers for deploying applications, ensuring that they run reliably, and enabling
  developers to debug them when things go wrong. In theory, developers can take advantage
  of these features “out of the box”, without worrying about low-level machine details,
  writing lots of custom tooling, or depending on a separate “infra” team in the organization
  to set things up.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;legacy-service-platforms&quot;&gt;Legacy service platforms&lt;/h2&gt;

&lt;p&gt;The process for migrating to Kubernetes depends a lot on what you’re migrating from.
This includes not just whatever is being used to build and deploy applications, but
also the wider set of infrastructure and tooling used for managing application environments
in production.&lt;/p&gt;

&lt;p&gt;I’ll call this pre-Kubernetes “bundle of stuff” a &lt;em&gt;legacy service platform&lt;/em&gt; or &lt;em&gt;LSP&lt;/em&gt; for
short. Normally I hate the term “platform” since it’s so overused (seems like it’s super trendy
at the moment for companies to be building “platforms” instead of “products”), but in this case I
think it’s actually appropriate- the LSP is literally a base on which applications in an
organization are created and run.&lt;/p&gt;

&lt;p&gt;The exact details of the LSP will vary a lot from company to company. Typically, though,
they have some common characteristics.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img src=&quot;/assets/kubernetes1.png&quot; alt=&quot;legacy service platform&quot; width=&quot;700&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;its-about-machines&quot;&gt;It’s about machines&lt;/h4&gt;

&lt;p&gt;In an LSP, the main unit of compute is a &lt;em&gt;machine&lt;/em&gt;, either a virtual machine (VM) like
one provided by &lt;a href=&quot;https://aws.amazon.com/ec2&quot;&gt;AWS EC2&lt;/a&gt; or a physical box sitting in a data
center somewhere.&lt;/p&gt;

&lt;p&gt;Machines are provisioned from a &lt;em&gt;base image&lt;/em&gt; that includes the operating system and other,
low-level software. There is then a &lt;em&gt;configuration management&lt;/em&gt; process, typically orchestrated
by a framework like &lt;a href=&quot;https://www.chef.io&quot;&gt;Chef&lt;/a&gt; or &lt;a href=&quot;https://puppet.com/&quot;&gt;Puppet&lt;/a&gt;, that
installs the higher-level tools and systems needed to run applications on the box- these might
include language runtimes for things like Python and Ruby, log and metrics collectors, performance
monitoring tools, and company-specific automation scripts, among other things.&lt;/p&gt;

&lt;h4 id=&quot;applications-and-identities&quot;&gt;Applications and identities&lt;/h4&gt;

&lt;p&gt;Each machine is configured and provisioned for a specific application. So, if you have ten different
services running in production, you’ll typically have ten different machine variants, each
running in a separate pool. The “zebra” service will have “zebra machines” that contain
the specific things it needs to run (maybe a
&lt;a href=&quot;https://www.infoworld.com/article/3304858/what-is-the-jre-introduction-to-the-java-runtime-environment.html&quot;&gt;JRE&lt;/a&gt;),
the “cheetah” service will have “cheetah machines” that contain what it needs (maybe a Ruby
interpreter and an Nginx process), and so forth.&lt;/p&gt;

&lt;p&gt;Identity, as it pertains to networking and authentication, is at the granularity of a
machine. All processes running on the same host use the same IP address(es), the same cloud role,
the same x509 certificates, etc. So, the “zebra machines” will run with the “zebra” role,
use a “zebra” certificate, live in a “zebra” network security group, etc.&lt;/p&gt;

&lt;h4 id=&quot;deploys&quot;&gt;Deploys&lt;/h4&gt;

&lt;p&gt;The primary application processes on each instance are typically created and updated by a
higher-level &lt;em&gt;deploy system&lt;/em&gt;. So, for instance, if a developer wants to update the
“zebra” service in production from version 1234 to version 1235, they would give the deploy system
the new version (or this would be automatically detected), and then the latter system would
handle getting onto each of the “zebra machines”, pulling down an updated artifact, extracting out
whatever binaries, scripts, and configs the application needs to run the new version, and
restarting the app.&lt;/p&gt;

&lt;p&gt;These deploy systems are typically pretty complicated because they need to support all of the
various rules, workflows, and infrastructure quirks specific to each organization. A few, like
Netflix’s &lt;a href=&quot;https://spinnaker.io/&quot;&gt;Spinnaker&lt;/a&gt;, have been open-sourced, but many companies still end
up building their own because of the amount of customization required.&lt;/p&gt;

&lt;h2 id=&quot;kubernetes-service-platforms&quot;&gt;Kubernetes service platforms&lt;/h2&gt;

&lt;p&gt;When you migrate to Kubernetes, you’re replacing the LSP with a new, Kubernetes-based service
platform. Following the same naming style, let’s call this thing a &lt;em&gt;Kubernetes service platform&lt;/em&gt;
or &lt;em&gt;KSP&lt;/em&gt; for short.&lt;/p&gt;

&lt;p&gt;KSPs have a few big differences from LSPs, which are described in the sections below.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;
&lt;img src=&quot;/assets/kubernetes2.png&quot; alt=&quot;kubernetes service platform&quot; width=&quot;700&quot; /&gt;
&lt;/div&gt;

&lt;h4 id=&quot;its-about-containers&quot;&gt;It’s about containers&lt;/h4&gt;

&lt;p&gt;In the KSP, as opposed to the LSP, the main unit of compute is a &lt;em&gt;container&lt;/em&gt;, not a machine.
At a high level, a container is just a semi-isolated process. Each container runs from an &lt;em&gt;image&lt;/em&gt;,
which is effectively a layered, read-only bundle that contains the binaries, tools, and configs
needed to create the environment in which the container runs.&lt;/p&gt;

&lt;p&gt;Containers run in machines, so you still need to provision them, but configuration for these
machines can be simpler and more generic. The main requirement is to install
a container runtime such as &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;. Once the latter is in place, you can
use it to run containers for your applications and various helper services (for logs, metrics,
networking, etc.). You can still use Chef or Puppet if you want to, but these are less important
because much of the heavy lifting is now done in the higher-level container and orchestration
layers.&lt;/p&gt;

&lt;h4 id=&quot;applications-and-identities-1&quot;&gt;Applications and identities&lt;/h4&gt;

&lt;p&gt;In a container-based service platform, applications are less coupled to specific
machine variants. The “zebra” service can still have its own, “zebra machine” pool, but this
is less necessary than before because most of the service-specific components can be baked into the
service image as opposed to being installed on the instances on which the container runs.&lt;/p&gt;

&lt;p&gt;Identity also moves from the machine to the container layer. Each container can now have its own
IP address, x509 certificate, cloud service role, etc. independent of the identity of the host
that it’s running on. This isn’t a drop-dead requirement (containers can use the host network,
for instance), but it’s considered best practice from a security and isolation standpoint to
enforce this separation.&lt;/p&gt;

&lt;h4 id=&quot;orchestration-via-kubernetes&quot;&gt;Orchestration via Kubernetes&lt;/h4&gt;

&lt;p&gt;Containers by themselves are fairly low-level and specific to individual machines. Kubernetes
adds yet another level of abstraction on top of containers that &lt;em&gt;orchestrates&lt;/em&gt; changes across
containers in a &lt;em&gt;cluster&lt;/em&gt; of machines. With Kubernetes, applications are updated by changing
the associated resources in the Kubernetes API. The Kubernetes control plane then figures
out which containers on which instances need to be changed, and a special agent on each machine,
the &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&quot;&gt;&lt;em&gt;kubelet&lt;/em&gt;&lt;/a&gt;,
actually carries out the updates.&lt;/p&gt;

&lt;p&gt;Although it’s still possible to have a custom deploy system for managing workflows and such,
this system ends up delegating most of the low-level details of each update to the Kubernetes API.&lt;/p&gt;

&lt;p&gt;Kubernetes doesn’t just handle image updates for individual containers. It provides a ton of
other functionality as well including bundling containers together as a unit (i.e. a
&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/&quot;&gt;&lt;em&gt;pod&lt;/em&gt;&lt;/a&gt;),
configuring container networking, mounting container disk volumes, storing and exposing application
secrets (e.g., DB passwords), monitoring container health, restarting failed containers, exposing
APIs for viewing logs, allowing developers to “exec” into containers for debugging purposes, etc.&lt;/p&gt;

&lt;p&gt;Not all of these things are required. You may, for instance, be able to keep using your LSP
secrets system instead of migrating to Kubernetes secrets. But, there are a lot of choices to
be made here, and using non-standard or non-Kubernetes-aware solutions here might require some
extra work.&lt;/p&gt;

&lt;h2 id=&quot;why-migrating-is-hard&quot;&gt;Why migrating is hard&lt;/h2&gt;

&lt;h3 id=&quot;youre-migrating-a-platform-not-a-system&quot;&gt;You’re migrating a platform, not a system&lt;/h3&gt;

&lt;p&gt;The main reason that migrating to Kubernetes is hard is that you’re not just updating a single
component- you’re migrating to an entirely new &lt;em&gt;platform&lt;/em&gt;, the KSP, that
has its own set of assumptions, requirements, and interfaces.&lt;/p&gt;

&lt;p&gt;As described previously, the biggest shift in going from an LSP to a KSP is in the use of
containers. Containers require images, which means that you need new workflows for defining,
building, testing, and storing these. Containers usually have a different networking setup than
that of “regular” LSP application processes, which means that your networking infrastructure
(how you allocate IPs, how service discovery works, how certs are provisioned, etc.) may have to
change.&lt;/p&gt;

&lt;p&gt;Having containers and orchestrating them via Kubernetes will typically also require changes to
whatever frameworks you’re using for logging, metrics, secrets, performance monitoring, deploys,
and other app lifecycle tooling. Although it’s possible to keep using the LSP
equivalents for these, at a minimum the interfaces will be slightly different; logs, for
instance, will be written into a different place in the file system, and in a different format,
which means that whatever log collector/forwarder you’re using will need to be reconfigured.&lt;/p&gt;

&lt;p&gt;Many of these updates aren’t scary when considered independently. However, there are a lot of
them to do and there are a lot of problems that can be encountered along the way, so the whole
process can take a long time from end-to-end. And, it’s hard to any run mission-critical services in
the KSP in production before you have at least some basic implementations in place for each of the
core platform components.&lt;/p&gt;

&lt;h3 id=&quot;identity-is-at-a-different-granularity&quot;&gt;Identity is at a different granularity&lt;/h3&gt;

&lt;p&gt;As mentioned previously, a KSP typically separates machine identity from application identity.
While this is nice from a security and isolation standpoint, it can be a huge pain, particularly
if legacy systems have ingrained the idea that machines map 1:1 to identities.&lt;/p&gt;

&lt;p&gt;In the AWS world, for instance, IAM roles and network interfaces (with their associated IP
addresses and security group designations) are typically tied to EC2 instances. Supporting
container-level roles, externally addressable IPs, security groups, etc. is possible and has been
getting slightly better over time, but is not yet super easy.&lt;/p&gt;

&lt;p&gt;If you’re running a service mesh, then you’ll need to worry about pod-level certificates
and proxies. Third party frameworks like &lt;a href=&quot;https://istio.io/&quot;&gt;Istio&lt;/a&gt; can help here, but
they’re non-trivial to deploy and operate.&lt;/p&gt;

&lt;h3 id=&quot;configuration-is-complex&quot;&gt;Configuration is complex&lt;/h3&gt;

&lt;p&gt;The Kubernetes configuration for a simple, single-container application is
&lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/run-stateless-application-deployment/#creating-and-exploring-an-nginx-deployment&quot;&gt;not too terrible&lt;/a&gt;.
However, as you add in init and sidecar containers, shared volumes, scheduling constraints,
health probes, and other features that production systems might need, these configs can get
pretty hairy.&lt;/p&gt;

&lt;p&gt;This complexity leads to at least two problems when adopting Kubernetes. First, you need
to figure out how to set all of the knobs that the configs expose, which can require reading a
lot of documentation and going through a lot of trial and error. Second, when multiplied out across
dozens (or hundreds) of apps running across different environments, manually creating and updating
the corpus of Kubernetes configs for an organization can become really tedious- you need some
tooling to help.&lt;/p&gt;

&lt;p&gt;Most companies address the second issue with a combination of YAML templating (via systems like
&lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt;) and higher-level, organization-specific config generation tools. These
help, but none of the existing options here is really perfect. See
&lt;a href=&quot;https://segment.com/blog/kubernetes-configuration/&quot;&gt;this post&lt;/a&gt; that
I wrote for the Segment engineering blog last year for more detail.&lt;/p&gt;

&lt;p&gt;As part of the migration process, you need to evaluate the various approaches here and either
adopt a third-party tool or write you own, which can be a non-trivial amount of work.&lt;/p&gt;

&lt;h3 id=&quot;some-batteries-not-included&quot;&gt;Some batteries not included&lt;/h3&gt;

&lt;p&gt;Kubernetes includes a powerful set of base API primitives and tooling. However, the pieces it
includes don’t cover 100% of what you need to run Kubernetes in production. Several big chunks,
most significantly
&lt;a href=&quot;https://kubernetes.io/docs/concepts/cluster-administration/networking/&quot;&gt;service networking&lt;/a&gt;, are
specified in high-level terms but not actually implemented.&lt;/p&gt;

&lt;p&gt;Thankfully, there are solid, third-party solutions available for these missing pieces. As with the
identity mapping issues described above, however, there may be a lot of work involved to
evaluate the various options, make a decision about which ones to use, and deploy them in your
clusters.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Migrating to Kubernetes is a big deal because it’s a complicated system, and it touches on so many
different aspects of the “platform” that apps run on in an organization. As with
&lt;a href=&quot;http://localhost:4000/blog/service-meshes&quot;&gt;migrating to a service mesh&lt;/a&gt;, my advice here is to
allocate lots of time, plan out the work carefully, and use third-party solutions (e.g., clusters
managed by cloud providers) whenever possible as opposed to building things from scratch.&lt;/p&gt;

&lt;p&gt;Even with strong execution, the migration can take years and require contributions from
engineering teams across the company. It’s hard work, and there are definitely still some rough
edges in the Kubernetes ecosystem, but I think the end result can really improve developer
happiness and productivity if implemented in a sensible way. Good luck!&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Over the last few years, I've worked on migrations at several companies- Airbnb, Stripe, and Segment (my current employer). In this post, I want to talk about why these migrations are done, what they involve, and why they can be hard.</summary></entry><entry><title type="html">Non-optimal engineer personas</title><link href="https://yolken.net/blog/non-optimal-engineer-personas" rel="alternate" type="text/html" title="Non-optimal engineer personas" /><published>2021-02-15T13:15:00-08:00</published><updated>2021-02-15T13:15:00-08:00</updated><id>https://yolken.net/blog/non-optimal-engineer-personas</id><content type="html" xml:base="https://yolken.net/blog/non-optimal-engineer-personas">&lt;p&gt;Software engineers are an interesting bunch. Over the course of my career thus far,
I’ve interacted with hundreds of colleagues, and it feels like I’ve seen everything- people who
refuse to wear shoes, people who can’t make eye contact when talking, people who voluntarily start
their day at 6PM, and many other behaviors that would be considered “weird” in normal workplaces.&lt;/p&gt;

&lt;p&gt;Most of these quirks don’t bother me, and I have a few of my own. However, there are certain
traits I’ve encountered, particularly on the personality side, that are genuinely
counterproductive to my team’s work. In this post, I want to explain what these are and how I try
to deal with people who exhibit them.&lt;/p&gt;

&lt;h2 id=&quot;non-optimal-personas&quot;&gt;Non-optimal personas&lt;/h2&gt;

&lt;p&gt;The sections below go into more detail on each trait. I’m framing them as “personas” to make the
discussion a little more fluid.&lt;/p&gt;

&lt;h3 id=&quot;the-overanalyzer&quot;&gt;The overanalyzer&lt;/h3&gt;

&lt;p&gt;The overanalyzer gets hung up on analyzing every technical decision they encounter in their
day-to-day work.&lt;/p&gt;

&lt;p&gt;The problem with overanalysis in the context of software engineering is that there are so
many choices to make on a daily basis. At the low-level, you have mundane things like variable names
and function interfaces- should it be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myFunc(config struct)&lt;/code&gt; or
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;myFunc(parameter1, parameter2, etc.)&lt;/code&gt;? At the higher-level, there are bigger choices about
architectures and technologies- for our new container orchestration system, should we use
&lt;a href=&quot;https://kubernetes.io/&quot;&gt;Kubernetes&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/ecs/&quot;&gt;ECS&lt;/a&gt;,
&lt;a href=&quot;https://www.nomadproject.io/&quot;&gt;Nomad&lt;/a&gt;, &lt;a href=&quot;https://netflix.github.io/titus/&quot;&gt;Titus&lt;/a&gt;, or something else?&lt;/p&gt;

&lt;p&gt;The problem isn’t just the number of choices, it’s that for many of them there isn’t a single,
“right” answer. In many cases, e.g. the container orchestration example above, there are
perfectly valid reasons for picking any one of them over the others. A big part of software
engineering, and one of the things that distinguishes it from just “coding”, is evaluating these
tradeoffs and making decisions, even when the choices can’t be perfect on all dimensions.&lt;/p&gt;

&lt;p&gt;Overanalyzers get paralyzed by these choices and thus can’t make decisions quickly. As a result,
their productivity is low and, if their work is in the critical path, they can block the team
from making forward progress and meeting deadlines.&lt;/p&gt;

&lt;h3 id=&quot;the-perfectionist&quot;&gt;The perfectionist&lt;/h3&gt;

&lt;p&gt;The perfectionist, unlike the overanalyzer, has a clear vision for what they want. However,
they refuse to accept anything short of their final vision- it has to be perfect, or it shouldn’t
be done at all.&lt;/p&gt;

&lt;p&gt;Perfectionism is really hard to achieve in software for a few reasons. First off, &lt;em&gt;all&lt;/em&gt; software
has rough edges. No matter how much work you put into something, you’re going to have some bugs
or errant pixels or missing features somewhere in your product. Secondly, most software progress
is delivered incrementally- you don’t achieve perfection in your first release. Instead, you
address the highest priority features and/or bugs, deliver your product, get feedback, and then
repeat the cycle. Many large, successful software products like Microsoft Office or the Python
programming language have been doing this for decades.&lt;/p&gt;

&lt;p&gt;Perfectionist software engineers get in the way by blocking your work unless you immediately address
their long list of idealized requirements.&lt;/p&gt;

&lt;p&gt;Sometimes, the interactions are relatively mundane, e.g. in the context of a small code review:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: I need you to refactor class X and backfill tests as part of your change.&lt;/p&gt;

  &lt;p&gt;Me: My change only touched one line of X. I’m already rewriting Y as part of this change, I’m not
making X worse, and I don’t have any context on the original X code so it will take me days to
untangle this mess.&lt;/p&gt;

  &lt;p&gt;Them: Sorry, I can’t approve until you fix this.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The blockers can be bigger when doing design or architecture reviews:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: I can’t allow you to roll out your new container orchestration system because it doesn’t
have signed images and an interactive UI.&lt;/p&gt;

  &lt;p&gt;Me: Our current system doesn’t have those things. No one other than you is requesting them,
and it will take months to add them. We can work on those features in v2 if needed.&lt;/p&gt;

  &lt;p&gt;Them: No. Either you have signed images and an interactive UI in v1 or there’s no point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Blocking regressions or things that explicitly prevent improvement in the future is definitely
worthwhile, but perfectionists take this to the extreme of blocking non-regressive, incremental
progress too.&lt;/p&gt;

&lt;h3 id=&quot;the-luddite&quot;&gt;The Luddite&lt;/h3&gt;

&lt;p&gt;The Luddite is unreasonably resistant to any sort of big, technological change. They believe
that the current ways of doing things, despite their faults, are superior to any new approaches that
come along.&lt;/p&gt;

&lt;p&gt;Luddism doesn’t mesh well with software engineering because software technologies, tools, and
best practices are constantly evolving. Just because things like PHP and Java were state-of-the-art
20 years ago doesn’t mean that they’re still the best choices for every project today. Of course,
there are tradeoffs here- older technologies can still be very good, and there are definite
downsides to switching things around just for the sake of using the latest and greatest tech.&lt;/p&gt;

&lt;p&gt;The Luddite, however, is uniformly and stubbornly insistent that new projects, even ones that
are completely “greenfield”, make only minor adjustments on top of the company’s existing
standards and technologies.&lt;/p&gt;

&lt;p&gt;Over the last few years, I’ve sometimes hit this persona when trying
to roll out Kubernetes and other, big infrastructure improvements at a company:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Our current orchestration system is great, we don’t need Kubernetes.&lt;/p&gt;

  &lt;p&gt;Me: Well, it has a lot of issues. For instance, it takes 7 days and approvals from 3 people to
create a new service. And, the configs are spread across 6 repositories.&lt;/p&gt;

  &lt;p&gt;Them: We’re working on a big project to cut that down to 6 days, 2 people, and 5 repositories. It
will be ready at the end of next year.&lt;/p&gt;

  &lt;p&gt;Me: Umm, maybe there’s a better way? Please hear me out.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Often times, the resistance is rooted in personal feelings. The Luddite has invested a lot of time
and energy in the current ways of doing things, and they feel that adopting something new will
diminish their previous contributions. Or, they’re worried that new technology will take away
their control and thus reduce their future influence inside the organization.&lt;/p&gt;

&lt;h3 id=&quot;the-complainer&quot;&gt;The complainer&lt;/h3&gt;

&lt;p&gt;The complainer spends an inordinate amount of time complaining about the faults in other
people’s work in a way that blocks progress.&lt;/p&gt;

&lt;p&gt;Don’t get me wrong here- there’s something very cathartic about complaining, and I think we all
enjoy doing it every now and then. However, it becomes a problem when the person complaining
is giving feedback that’s not actionable or, if actionable, without any willingness to help make
things better.&lt;/p&gt;

&lt;p&gt;A quick story- at the beginning of my career, I was a product manager on Google’s system
for allocating compute and storage resources inside the company. Teams would get these resources
and then build the company’s externally-facing products (e.g., search, Gmail, YouTube, etc.) on top
of them.&lt;/p&gt;

&lt;p&gt;Our system, to put it mildly, was not the most popular among engineers at Google. I routinely heard
complaints that it “sucked” or “should be deleted”. One very senior person even told me that he
hated our system more than his recent experience of being stuck in the Atlanta
airport with a screaming toddler for 12 hours.&lt;/p&gt;

&lt;p&gt;None of these people really had any ideas for how to make our system better. Instead, they just
demoralized the team and blocked us from making progress since they would be fighting
against us as we tried to get more resources or push through incremental improvements.&lt;/p&gt;

&lt;p&gt;Since moving on from my stint in Google’s resource management organization, this level of
negativity has been pretty rare. However, I’m still sometimes blocked by complaints without much
willingness to help.&lt;/p&gt;

&lt;p&gt;One example is in the context of security reviews, which many companies
require for new product launches. At a previous job, my interactions with the security engineer
went like this:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Your service isn’t secure. You need to do more to ensure that only authorized users can
make requests to your API endpoints.&lt;/p&gt;

  &lt;p&gt;Me: Hmm, I’m not really an expert on security. Can you help me with this or at least point me
to an internal example that does things the “right” way?&lt;/p&gt;

  &lt;p&gt;Them: Oh no no, I’m way too busy to do that. You really need to figure it out yourself.&lt;/p&gt;

  &lt;p&gt;Me: &lt;em&gt;Sigh.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’ve also seen this behavior in interactions with lawyers (technically, they’re not engineers, but
they interact with us a lot, so I’m including the example):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Them: Your product feature is not compliant with EU regulation 124-XZ. I can’t let you launch it
in its current form since this would put the company at great legal risk.&lt;/p&gt;

  &lt;p&gt;Me: Ok, what specific things do I need to change to make the software compliant?&lt;/p&gt;

  &lt;p&gt;Them: Well, 124-XZ is really complicated, it’s hard to say. I’ll have to get back to you.
&lt;em&gt;Silence for weeks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Complaints are fine, but if they don’t come with any offer of help (or at least specific details
of what to fix), then they can really block progress on a project.&lt;/p&gt;

&lt;h3 id=&quot;the-nexus&quot;&gt;The nexus&lt;/h3&gt;

&lt;p&gt;The nexus wants to be at the center of all decisions, and gets upset when they’re not consulted
about each one.&lt;/p&gt;

&lt;p&gt;As described in the “overanalyzer” section above, software development involves making a lot of
decisions. Once you get beyond a small number of people, however, it’s really, really hard for any
one person to be involved in each one. At a certain point, you just have to relax, trust
other people to do the right thing, and realize that if someone does make a terrible decision
without your knowledge, you can usually fix it after-the-fact.&lt;/p&gt;

&lt;p&gt;The nexus, on the contrary, will insist that they be included in every meeting and code review
related to your project. By doing this, they necessarily slow down progress- nothing can be
done until they approve, and since they’re only one person, the progress of the team is slowed
down to the rate at which they’re able to process and critique each step of the project.&lt;/p&gt;

&lt;p&gt;If you go around them, the nexus may discover and get upset. Worse than that, though, they may
overcompensate by jumping in and second-guessing all of the decisions you made without them- e.g.,
“Why did you call this setting &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x&lt;/code&gt; as opposed to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;y&lt;/code&gt;?”- which slows you down even more than if
you had consulted them at the beginning.&lt;/p&gt;

&lt;p&gt;Unfortunately, nexus behavior is often mixed with the other traits described above. In combination,
these can be an especially big drain on engineering productivity.&lt;/p&gt;

&lt;h2 id=&quot;coping&quot;&gt;Coping&lt;/h2&gt;

&lt;p&gt;Here are some strategies for dealing with the above personas when they get in the way of your
work.&lt;/p&gt;

&lt;h3 id=&quot;be-direct&quot;&gt;Be direct&lt;/h3&gt;

&lt;p&gt;The most direct strategy is to call out these non-optimal traits when you see them.
If you’re in a code review, for instance, you can explicitly push back against the reviewer’s
feedback because it’s not constructive or is requesting an unrealistic amount of perfectionism in a
single change.&lt;/p&gt;

&lt;p&gt;The key here is to communicate sympathetically. You want to acknowledge the feedback and also
explain nicely why it’s not 100% reasonable. In many cases, the person will understand
what you’re saying and agree to back off.&lt;/p&gt;

&lt;h3 id=&quot;evade&quot;&gt;Evade&lt;/h3&gt;

&lt;p&gt;The more passive-aggressive approach is to evade the person with the unproductive trait(s) by
avoiding contact with them. If these traits come through in code or design reviews, for instance,
you can just request reviewers are who more likely to be helpful.&lt;/p&gt;

&lt;p&gt;This isn’t always doable (there may be only one person who can review your changes), but it
avoids conflict and helps move things forward. If the person you evaded discovers a serious
problem that their involvement would have detected, you can still apologize, beg for forgiveness,
and ask for their help.&lt;/p&gt;

&lt;h3 id=&quot;escalate&quot;&gt;Escalate&lt;/h3&gt;

&lt;p&gt;A third option, and sometimes the only one that works, is to escalate your concerns to
management. If someone is blocking progress and being completely unreasonable, managers have the
power to push them aside and/or elevate someone more reasonable to unblock you.&lt;/p&gt;

&lt;p&gt;It may take a while to get results and it may burn some bridges, but at a well-run company
management should be effective at removing blockers and ensuring that employees can be productive.
If they can’t do this, then it might be time to switch teams or switch companies.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Certain traits in coworkers can really get in the way of being happy and productive as a
software engineer.&lt;/p&gt;

&lt;p&gt;Many of these are actually beneficial in small doses (e.g., perfectionism), they’re just problematic
when taken to an extreme. Also, despite our best intentions, I think we all, myself included,
exhibit them sometimes in our interactions with colleagues.&lt;/p&gt;

&lt;p&gt;The important thing is to recognize when they’re reducing productivity and then make
the necessary structural or personnel changes to unblock progress.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Software engineers are an interesting bunch. While quirks are fine, and I have a few myself, there are certain traits I've encountered that are genuinely counterproductive to my team's work. In this post, I want to explain what these are and how I try to deal with people who exhibit them.</summary></entry><entry><title type="html">Golang: Some batteries not included</title><link href="https://yolken.net/blog/golang-batteries-not-included" rel="alternate" type="text/html" title="Golang: Some batteries not included" /><published>2021-01-31T16:55:00-08:00</published><updated>2021-01-31T16:55:00-08:00</updated><id>https://yolken.net/blog/golang-batteries-not-included</id><content type="html" xml:base="https://yolken.net/blog/golang-batteries-not-included">&lt;p&gt;I use &lt;a href=&quot;https://golang.org/&quot;&gt;golang&lt;/a&gt; (aka “go”) a lot for my day-to-day work. Like other programming
languages, it consists of a &lt;a href=&quot;https://golang.org/ref/spec&quot;&gt;&lt;em&gt;core language spec&lt;/em&gt;&lt;/a&gt;, describing,
for instance, how to declare variables, construct loops, etc., plus a
&lt;a href=&quot;https://golang.org/pkg/&quot;&gt;&lt;em&gt;standard library&lt;/em&gt;&lt;/a&gt; that implements higher-level functionality
needed for software that actually does useful things.&lt;/p&gt;

&lt;p&gt;The go standard library is fairly rich- in addition to basic input/output, it covers
HTTP client and server implementations, time and date processing, all of the standard cryptographic
algorithms (e.g., SHA256), data compression and decompression, and lots of other goodies.
However, there are certain pieces of functionality that are either missing or insufficient and
that, as a result, require the use of third-party libraries in nearly all of my projects.&lt;/p&gt;

&lt;p&gt;In this post, I want to go through the main “batteries not included” in the standard
library, and the alternatives that I typically use for each one. Note that I’m &lt;em&gt;not&lt;/em&gt; covering
missing language features like generics since those have been discussed extensively in
&lt;a href=&quot;https://hn.algolia.com/?dateRange=all&amp;amp;page=0&amp;amp;prefix=false&amp;amp;query=golang%20generics&amp;amp;sort=byPopularity&amp;amp;type=story&quot;&gt;other forums&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;aside-what-do-batteries-have-to-do-with-programming-languages&quot;&gt;Aside: What do batteries have to do with programming languages?&lt;/h3&gt;

&lt;p&gt;The term “batteries not included” was historically stamped on the boxes of electronic toys and other
consumer goods to indicate that the batteries needed for the item to work were not provided in the
box. When I was growing up, I remember getting gifts where the giver forgot to buy the batteries.
I would then feverishly run around the house looking for instances of the right kind (either AA,
AAA, C, D, or 9-volt) and raid my other toys or our TV remote controls as needed.&lt;/p&gt;

&lt;p&gt;The phrase is less common today because items often include batteries in the box or they use
built-in, rechargeable ones.&lt;/p&gt;

&lt;p&gt;In any case, at some point the &lt;a href=&quot;https://www.python.org/&quot;&gt;Python programming language&lt;/a&gt; adopted the
term “batteries included” to describe its standard library. This was a cheeky way of saying that
unlike those cheap toys from childhood, you didn’t need to build or bring extra items (i.e.,
libraries or tools) to make the language useful- it just worked “out of the box”.&lt;/p&gt;

&lt;p&gt;Nowadays, the idea of including a rich, fully functional standard library with a programming
language is pretty common. When Python was initially released in the early 1990’s, however, this
was considered quite revolutionary- the main languages at the time (e.g., C) did not have very
big standard libraries; if you wanted to do anything beyond the basics, you had to write it
yourself or import a third-party implementation.&lt;/p&gt;

&lt;p&gt;The “batteries included” philosophy for standard libraries has become common because it has
a lot of benefits:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It’s easier to get started in the language- no need to find, evaluate, and import third-party
  libraries for common use cases&lt;/li&gt;
  &lt;li&gt;It’s easier to distribute your code- people can just compile and/or run it with standard tooling&lt;/li&gt;
  &lt;li&gt;Code is more standardized- if everyone uses the standard library for something (e.g., making
  HTTP requests), then you’re unlikely to see lots of different implementations for it&lt;/li&gt;
  &lt;li&gt;Maintenance is less of a burden- standard libraries tend to be well-maintained and regularly
  patched for security issues. You don’t have to worry about the maintainer(s) disappearing and the
  library accumulating a large bug backlog.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unfortunately, there isn’t always agreement on which batteries to include and exactly how they
should work. Also, including too many things can lead to bloat, making the core language harder to
maintain and distribute. There are complex design and performance tradeoffs here, and as result
no language is 100% “batteries included” for 100% of use cases.&lt;/p&gt;

&lt;h2 id=&quot;the-missing-batteries&quot;&gt;The missing batteries&lt;/h2&gt;

&lt;p&gt;Now that we’ve reviewed what “batteries (not) included” means, let’s go into what I consider
the main missing batteries in the go standard library.&lt;/p&gt;

&lt;h3 id=&quot;flags&quot;&gt;Flags&lt;/h3&gt;

&lt;p&gt;Many of the applications that I write in go are command-line tools that use flags for
specifying options, e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mytool --option1=value1 --option2=value2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Golang includes a &lt;a href=&quot;https://golang.org/pkg/flag/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; package&lt;/a&gt; in its standard library for
defining and parsing these flags. However, it’s pretty basic as it has no built-in support
for accepting “complex” types like lists or time durations. Also, for whatever reason, it uses
single dashes instead of double dashes for long flags- like most people (I think?), I find &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt;
more canonical than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-help&lt;/code&gt; when interacting with a command-line tool.&lt;/p&gt;

&lt;p&gt;As a result, the first thing I import when I’m creating a new command-line tool in go is a better
flag library. Unfortunately, there isn’t a consistent standard on what to use here instead.
I originally used &lt;a href=&quot;https://github.com/alecthomas/kingpin&quot;&gt;kingpin&lt;/a&gt;, but then switched
to &lt;a href=&quot;https://github.com/spf13/cobra&quot;&gt;cobra&lt;/a&gt; a few years ago because that seemed to be more common in
the code bases I was working on.&lt;/p&gt;

&lt;p&gt;Recently, I discovered &lt;a href=&quot;https://github.com/segmentio/cli&quot;&gt;segmentio/cli&lt;/a&gt;, which I like a lot
because it’s so simple- you just tag a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;struct&lt;/code&gt;, and then you get the flag functionality for free:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Age&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;          &lt;span class=&quot;s&quot;&gt;`flag:&quot;--age&quot;     help:&quot;your age&quot;     default:&quot;55&quot;`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Hobbies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;`flag:&quot;--hobby&quot;   help:&quot;your hobbies&quot; default:&quot;-&quot;`&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;`flag:&quot;-n,--name&quot; help:&quot;your name&quot;    default:&quot;Joe&quot;`&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;fmt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello %s!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This works well for simple CLIs, but becomes a little messy for more complicated ones, e.g. when
the help text blurbs are really long or when you want to have multiple layers of subcommands.
Therefore, I still find myself reverting back to cobra sometimes.&lt;/p&gt;

&lt;h3 id=&quot;logging&quot;&gt;Logging&lt;/h3&gt;

&lt;p&gt;Log output, whether to the console or to an external log collection service, is really important
for understanding what’s going on in an application. As with flags,
golang includes a &lt;a href=&quot;https://golang.org/pkg/log/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; package&lt;/a&gt;, but it’s quite
basic and insufficient for many use cases. Among other problems, it doesn’t support log levels
(e.g., &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INFO&lt;/code&gt; vs. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DEBUG&lt;/code&gt;) or structured output formats like JSON.&lt;/p&gt;

&lt;p&gt;As with flags, there isn’t really a standard alternative here. I personally like
&lt;a href=&quot;https://github.com/sirupsen/logrus&quot;&gt;logrus&lt;/a&gt; a lot and include it in all of the tools I build.
Using it is as simple as importing the library and then calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Infof&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Debugf&lt;/code&gt;, etc.
in place of the standard library’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log.Printf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;github.com/sirupsen/logrus&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myFunc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;myArg&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debugf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting myFunc with myArg %s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;myArg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Warnf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Got an unexpected error: %+v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In addition to supporting levels better than the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;log&lt;/code&gt; library, it also exposes
a lot of controls over the output format.&lt;/p&gt;

&lt;p&gt;There are many other choices here, and some of these may be better than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;logrus&lt;/code&gt; depending on
your requirements. At Segment (my current employer), we use
&lt;a href=&quot;https://github.com/segmentio/events&quot;&gt;segmentio/events&lt;/a&gt; in
most of our backend systems. This library makes it easier to include structured key/value
pairs alongside the primary message for each log. The former aren’t super useful for command-line
tools but can be very helpful when trying to filter gigabytes of logs produced by replicated, remote
systems.&lt;/p&gt;

&lt;h3 id=&quot;test-assertions&quot;&gt;Test assertions&lt;/h3&gt;

&lt;p&gt;Go contains decent, built-in tooling for executing tests. However, it doesn’t include any of the
“assert” functions that are common in the unit testing libraries of other languages.
This means that a simple test that two slices are equal looks like:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DeepEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;Wrong value for my special slice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;expected&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;got&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Thankfully, you can avoid this messiness by using
&lt;a href=&quot;https://github.com/stretchr/testify&quot;&gt;stretchr/testify&lt;/a&gt;. With testify’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt; package, the
above becomes much more concise:&lt;/p&gt;

&lt;div class=&quot;language-golang highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;actual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;My special slice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;There’s also a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;require&lt;/code&gt; package that has the same interface as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;assert&lt;/code&gt;, but will stop the test
execution if the condition isn’t met.&lt;/p&gt;

&lt;p&gt;I use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testify&lt;/code&gt; without exception in any project that is doing unit tests. It seems weird to me
that some people still prefer the canonical manual check followed by a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;t.Error&lt;/code&gt; message,
but to each their own!&lt;/p&gt;

&lt;h3 id=&quot;yaml-parsing&quot;&gt;YAML parsing&lt;/h3&gt;

&lt;p&gt;Go includes a fully functional package for handling &lt;a href=&quot;https://en.wikipedia.org/wiki/JSON&quot;&gt;JSON&lt;/a&gt;-formatted
data but, like Python, doesn’t have any equivalent for &lt;a href=&quot;https://en.wikipedia.org/wiki/YAML&quot;&gt;YAML&lt;/a&gt;
in its standard library. Many of the tools that I’ve worked on have some sort of human-created
config file, and it’s much easier on users if these are YAML instead of JSON.&lt;/p&gt;

&lt;p&gt;The standard here is &lt;a href=&quot;https://github.com/go-yaml/yaml&quot;&gt;go-yaml&lt;/a&gt;, which has the same interface
as the standard &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt; library but uses special &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yaml&lt;/code&gt; struct tags instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;
ones. Personally, though, I prefer &lt;a href=&quot;https://github.com/ghodss/yaml&quot;&gt;ghodss/yaml&lt;/a&gt;, which wraps the
former, because it supports &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;json&lt;/code&gt;-compatible tags and thus makes everything more consistent.&lt;/p&gt;

&lt;h3 id=&quot;static-content-embedding&quot;&gt;Static content embedding&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Addendum:&lt;/strong&gt; Golang 1.16 finally added built-in &lt;a href=&quot;https://golang.org/pkg/embed/&quot;&gt;embedding support&lt;/a&gt;.
Yay!!! However, I’ll keep this section here for historical reasons.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One of the nice things about golang is that your entire program can be compiled into a single,
self-contained binary. Among other benefits, this makes it easier to distribute your application
or run it in bare-bones environments (e.g., scratch docker containers).&lt;/p&gt;

&lt;p&gt;Unfortunately, though, the standard go tooling only handles go code. It won’t include separate
static assets like text templates and images in your binary. I commonly use the former,
in conjunction with go’s excellent &lt;a href=&quot;https://golang.org/pkg/text/template/&quot;&gt;text/template&lt;/a&gt; package,
to generate HTML documents or YAML configs in my tools.&lt;/p&gt;

&lt;p&gt;To get around this, there’s a great tool called
&lt;a href=&quot;https://github.com/go-bindata/go-bindata&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;go-bindata&lt;/code&gt;&lt;/a&gt; that will automatically read
these external assets and embed them into a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.go&lt;/code&gt; file that can be included in your binary. It
then exposes an API for fetching the contents of each asset from your code.&lt;/p&gt;

&lt;p&gt;The original creator of the tool, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jteeuwen&lt;/code&gt;, stopped maintaining it and then completely
disappeared off Github a few years ago, which caused the proliferation of multiple,
not-fully-compatible forks. Thankfully, it seems like the community has
standardized on &lt;a href=&quot;https://github.com/go-bindata/go-bindata&quot;&gt;this one&lt;/a&gt;, which hopefully will be
actively maintained going forward.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Golang is great for many use cases, but you’ll probably want to bring in third-party libraries
for some things like flags, logging, and testing. It would be great if these
were improved in the standard library, but I’m not holding my breath- from what I’ve heard,
the go maintainers are pretty adamant about what’s in the standard library and what’s not.
Thankfully, the third-party solutions are pretty good at filling in the gaps.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">The go standard library is fairly rich. However, there are certain pieces of functionality that are either missing or insufficient and that, as a result, require the use of third-party libraries in nearly all of my projects. In this post, I want to go through the main &quot;batteries not included&quot; in the standard library, and the alternatives that I typically use for each one.</summary></entry><entry><title type="html">Starting a job</title><link href="https://yolken.net/blog/starting-a-job" rel="alternate" type="text/html" title="Starting a job" /><published>2021-01-24T14:20:00-08:00</published><updated>2021-01-24T14:20:00-08:00</updated><id>https://yolken.net/blog/starting-a-job</id><content type="html" xml:base="https://yolken.net/blog/starting-a-job">&lt;p&gt;In my &lt;a href=&quot;/blog/great-engineer-onboarding&quot;&gt;last post&lt;/a&gt;, I discussed how companies can
make their onboarding processes better for employees. In this post, I want to turn
the tables and talk about the strategies I use personally to get up-to-speed when
I’m starting at a new job.&lt;/p&gt;

&lt;h2 id=&quot;starting-is-hard&quot;&gt;Starting is hard&lt;/h2&gt;

&lt;p&gt;First off, it’s important for me to state that I find starting a new
job as a software engineer really, really hard.&lt;/p&gt;

&lt;p&gt;Even after many years of experience and even if the new company is using a tech
stack that I’m already familiar with, there is
just so much to learn about before one can become productive, including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Where the code lives and how it’s organized&lt;/li&gt;
  &lt;li&gt;The key software systems, their interfaces, and how they all fit together&lt;/li&gt;
  &lt;li&gt;Standards and tools for testing, logging, metrics, code reviews, deploys, etc.&lt;/li&gt;
  &lt;li&gt;What infrastructure the code is running on and how to interact with it&lt;/li&gt;
  &lt;li&gt;Who knows what and how to get questions answered&lt;/li&gt;
  &lt;li&gt;How planning is done, what the team’s current priorities are, what I should
  be working on to make the biggest impact, etc.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;On top of this giant pile of things to learn about, the start of a new job
is often when I’m feeling the most “buyer’s remorse” around my decision to
switch employers. This can include thoughts like “maybe I should have stayed at my
old job”. Or, I’ll be thinking that it was right to leave my old job, but that
maybe I should have picked one of the other offers I had.&lt;/p&gt;

&lt;p&gt;The end result is that the onboarding process is really stressful for me- I
often feel kind of crappy, and then I may have trouble sleeping, which makes
me feel even worse. Even if you’re not as uptight as I am, it’s generally not
the time in your career when you’re going to be at your peak happiness.&lt;/p&gt;

&lt;h2 id=&quot;coping-strategies&quot;&gt;Coping strategies&lt;/h2&gt;

&lt;p&gt;Over the course of starting many new jobs, I’ve developed a collection of strategies
for making the onboarding process less stressful and more productive. Here are the most
helpful ones.&lt;/p&gt;

&lt;h3 id=&quot;give-it-time&quot;&gt;Give it time&lt;/h3&gt;

&lt;p&gt;The most important coping strategy for me is to realize that it takes time to get
up-to-speed, and, at the same time, to realize that my colleagues know this
and will cut me some slack in the interim.&lt;/p&gt;

&lt;p&gt;The exact amount of time required varies from company to company, and it’s
something that I ask my manager about in our first 1:1 meeting. However,
at most of my previous jobs, the general guidance has been that it takes around
3 months to start making non-trivial contributions, and around 6-9 months before
new hires are expected to be fully productive.&lt;/p&gt;

&lt;p&gt;During those first couple of months, I tell myself that I can relax- it’s ok to make
mistakes, and it’s also perfectly fine to spend time doing background reading,
getting to know colleagues, and attending internal tech talks as opposed to focusing
completely on my team’s regular tasks.&lt;/p&gt;

&lt;h3 id=&quot;get-work-environment-right&quot;&gt;Get work environment right&lt;/h3&gt;

&lt;p&gt;I find that my work environment plays a big role in my productivity and happiness.
This is particularly true when I’m starting at a new job and dealing with the
firehose of technical things that I need to get up-to-speed on.&lt;/p&gt;

&lt;p&gt;The first thing I try to optimize is the company-provided hardware that I’m touching
or looking at for my day-to-day work, i.e. my laptop, mouse, keyboard, and monitor.
If any of these is not ideal, I press very hard to get replacements ordered during
my first few days on the job (within reasonable bounds, of course).&lt;/p&gt;

&lt;p&gt;Beyond that, I then work to improve the other aspects of my environment, including
my desk and chair, and the light, noise, and temperature of my immediate work area.
Now that I’m working from home these are all under my direct personal control, but
back when I was in an office I sometimes asked for help in dealing with noisy
officemates, weird vibrations in my desk, or a less-than-comfortable chair.&lt;/p&gt;

&lt;p&gt;Many of these things will take a while to resolve, so it’s important to raise
concerns early on to get the process started.&lt;/p&gt;

&lt;h3 id=&quot;do-coffee-chats&quot;&gt;Do coffee chats&lt;/h3&gt;

&lt;p&gt;Getting to know your manager and the peers on your team is a critical part
of the onboarding process that everyone does. Beyond this, though, I’ve found that
it’s really informative to meet with colleagues beyond my direct team, even if I’m
not going to be working with them at all. I usually just message these people
in the company’s chatting system and ask for permission to put 30 minutes into their
calendar (they almost always say yes!)&lt;/p&gt;

&lt;p&gt;Staff in the extended organization can provide “big picture” perspective
that’s useful to know about as I’m getting up-to-speed. Also, because they won’t
be working with me day-to-day, I’ve found that they tend to be more honest and less
inhibited when it comes to providing advice about how to be successful in the job.&lt;/p&gt;

&lt;p&gt;When possible, I like to structure these as “coffee chats” as opposed to formal
1:1’s. This makes them more fun and fosters an environment in which we can
talk honestly.&lt;/p&gt;

&lt;h3 id=&quot;create-personal-reference-document&quot;&gt;Create personal reference document&lt;/h3&gt;

&lt;p&gt;Starting on my first day, I create a document in whatever system the company
prefers for technical docs (e.g., Dropbox Paper, Quip, Google Docs, etc.) and
start jotting down anything that I think will be helpful to refer to later;
here are some made-up examples:&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Key documents:
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; Design doc for system X
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; Intro to technology Y
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; External tutorial on doing Z
...

How to deploy system X
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`cd ~/workspace/x`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`deploy -x -b 123abc --production`&lt;/span&gt;

Running tests for system Y
&lt;span class=&quot;p&quot;&gt;1.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`cd ~/workspace/y`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;2.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`docker-compose up -d`&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;3.&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`make tests`&lt;/span&gt;
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I treat this document as append-only- as I interact with more tools and systems, I
just keep adding more sections. Later, if I need to refer to anything, I can do a
quick search in the doc and then use the links or commands that I previously
jotted down to complete the task I’m doing.&lt;/p&gt;

&lt;p&gt;I keep adding to the document and referring back to it even after I’m fully onboarded. Over
time, it can get so big that it becomes painful to load and search in whatever tool I’m using to
host it. When this happens, I’ll just freeze the first document and start adding notes into
a new one. In my current job, I’m at the beginning of my second reference doc. In previous
jobs, I’ve gone through three or four of these over the course of a few years.&lt;/p&gt;

&lt;h3 id=&quot;personal-code-sandbox&quot;&gt;Personal code sandbox&lt;/h3&gt;

&lt;p&gt;In conjunction with my reference doc, I find it’s also helpful to have a personal
“sandbox” for code-related notes and experiments.&lt;/p&gt;

&lt;p&gt;At companies that use GitHub (including all of my recent employers), I just
set up a repo that’s under my work account but separate from the
company’s main GitHub organization. If I were at a company that didn’t have this
functionality in its code systems, I would just throw my changes into an
“experimental” branch that is never submitted for review.&lt;/p&gt;

&lt;p&gt;Wherever it lives, I use this sandbox as a place to put longer scripts, to become more
comfortable with the frameworks and technologies that the company uses, and to try out
new approaches to my team’s work. Doing these things in a personal space allows for me
to experiment and explore without judgement from colleagues.&lt;/p&gt;

&lt;p&gt;As with the reference doc, I keep adding to my personal code sandbox even after the
onboarding process is complete. However, I generally find that it becomes less useful over
time as I become more comfortable with the company’s tech stack and more confident in
my abilities to make changes out in the open directly.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Starting a new job is hard, but I’ve adopted a few strategies that have consistently helped.
The optimal onboarding path can vary a lot from person-to-person and from job-to-job, so these
may or may not be ideal for you. However, you may find some subset of them helpful the next time
you’re struggling to get up-to-speed at a new job.&lt;/p&gt;

&lt;p&gt;Good luck and, most importantly, don’t get too stressed!&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">In my last post, I discussed how companies can make their onboarding processes better for employees. In this post, I want to turn the tables and talk about the strategies I use personally to get up-to-speed when I'm starting at a new job.</summary></entry><entry><title type="html">Great engineer onboarding</title><link href="https://yolken.net/blog/great-engineer-onboarding" rel="alternate" type="text/html" title="Great engineer onboarding" /><published>2021-01-17T09:58:00-08:00</published><updated>2021-01-17T09:58:00-08:00</updated><id>https://yolken.net/blog/great-engineer-onboarding</id><content type="html" xml:base="https://yolken.net/blog/great-engineer-onboarding">&lt;p&gt;I’ve written a few posts previously about quitting a job
(see &lt;a href=&quot;/blog/leaving-a-job&quot;&gt;here&lt;/a&gt; and &lt;a href=&quot;/blog/quitting-a-new-job&quot;&gt;here&lt;/a&gt;).
Now, I want to turn my attention to a much happier and more exciting topic-
what happens when you show up for the first day at your next company.&lt;/p&gt;

&lt;p&gt;Starting a new software engineering job is hard, and making this process
successful requires a lot of effort from both the employer and the
employee. In this post, I want to focus on the former, and in particular
how companies can make their onboarding processes better. A follow-up post
will offer advice on getting up-to-speed from the employee perspective.&lt;/p&gt;

&lt;h2 id=&quot;onboarding-approaches&quot;&gt;Onboarding approaches&lt;/h2&gt;

&lt;p&gt;I’ve been through almost a dozen new hire ramp-ups in my career so far.
Although the details have varied a lot from company to company, I’ve broadly
seen four different styles of onboarding programs, each described below. Note
that these aren’t mutually exclusive- some companies have adopted hybrid
approaches that combine multiple styles.&lt;/p&gt;

&lt;h3 id=&quot;full-bootcamp&quot;&gt;Full bootcamp&lt;/h3&gt;

&lt;p&gt;The most intense onboarding process is what’s referred to as a new hire
bootcamp.&lt;/p&gt;

&lt;p&gt;The analogy here is to bootcamp or basic training programs in the
military. These work by taking a bunch of people from different backgrounds,
grinding them down, and then building them back up in a consistent, structured way
that lays the foundation for being a good soldier. Those who graduate then go on
to more specialized training for their specific roles (e.g., officer candidate
school).&lt;/p&gt;

&lt;p&gt;Tech onboarding bootcamps aren’t quite as intense (no head shaving or being
yelled at by a drill sergeant, fortunately!), but the general idea is the same-
to take a diverse set of new “recruits” and give them all the same, baseline
skills required to be a productive software engineer at the company.&lt;/p&gt;

&lt;p&gt;Typically the way it works is that each cohort of new hires is seated together
in the office. For several weeks, they attend classes together and do various,
small exercises (e.g., bug fixes) either alone or in smaller groups.&lt;/p&gt;

&lt;p&gt;Most new hires are not pre-assigned to teams. Instead, towards the latter half
of the bootcamp, a matching process takes place in which each person tries to find a
team that they’re interested in, that has available headcount, and whose hiring
manager is willing to bring them on. Hiring managers might assign small technical
tasks to test out potential team members and ensure that they’ll find the work
interesting.&lt;/p&gt;

&lt;p&gt;At the end of the bootcamp, those who have met the minimum requirements “graduate”
and move on to their chosen teams. The small subset of people who don’t graduate
with their cohort are typically given a bit more time to figure things out, but will
eventually be forced to leave the company if they don’t complete the program.&lt;/p&gt;

&lt;p&gt;Facebook is the best-known adopter of this approach. I haven’t worked
at Facebook, so I’m not familiar with all the details of their program,
but I went through a new hire bootcamp when I started at Airbnb, who modeled
theirs after the Facebook one.&lt;/p&gt;

&lt;h3 id=&quot;mini-project-bootcamp&quot;&gt;Mini-project bootcamp&lt;/h3&gt;

&lt;p&gt;A less intense variant of the full bootcamp is one in which the new engineers
are all pre-assigned to teams, so there’s no weed-out or team selection process.
Instead, the starting class is divided into smaller teams, each of which works
on a mini-project for a few weeks to get more familiar with the company’s tools,
systems, and products. After the project is done, the project teams are disbanded
and people begin onboarding with their assigned, long-term teams.&lt;/p&gt;

&lt;p&gt;I went through a process like this when I started at Stripe- they called it
“dev/start”, and it took around 5 weeks. I’ve heard of other companies having
programs like this, but they’re typically optional and intended primarily for
more junior engineers.&lt;/p&gt;

&lt;h3 id=&quot;lightweight-team-driven&quot;&gt;Lightweight, team-driven&lt;/h3&gt;

&lt;p&gt;An alternative to having structured, multi-week training programs is to push
most of the learning onto individual teams. After a few days of
general orientation, new engineers go and sit with their assigned teams and
start an onboarding process that’s customized by their manager for their specific
role.&lt;/p&gt;

&lt;p&gt;The details vary, but typically the manager will write up a personalized “new hire”
doc with a specific list of tasks that the person is expected to do (e.g., meet with person X, read this design doc, etc.). The new hire is typically also assigned a
“starter project” to get their feet wet and matched with a “new hire buddy” on the
team who can help answer low-level technical questions.&lt;/p&gt;

&lt;p&gt;The first few weeks may be interspersed with classes, social events, and other
activities that the new hires can participate in together. But, they’re generally
optional to attend and fairly low key.&lt;/p&gt;

&lt;p&gt;Many companies of lots of different sizes have adopted this approach. I went
through it at Google, and then more recently when I started at Segment.&lt;/p&gt;

&lt;h3 id=&quot;bare-bones&quot;&gt;Bare bones&lt;/h3&gt;

&lt;p&gt;The least intense onboarding is one that’s completely minimal. New hires
sign some forms, are shown to their desks, and then immediately dive in to their
work (with some manager guidance).&lt;/p&gt;

&lt;p&gt;This is typically the approach taken by smaller startups that don’t yet
have the critical mass to justify creating a formal onboarding program.
I experienced this when I joined MoPub, which at the time had only
around 45 employees.&lt;/p&gt;

&lt;h2 id=&quot;lightweight-is-best&quot;&gt;Lightweight is best&lt;/h2&gt;

&lt;p&gt;Based on my various job starting experiences, I personally feel that
the lightweight, team-based approach described above is far and away the best
choice for most companies.&lt;/p&gt;

&lt;p&gt;Here are some reasons why.&lt;/p&gt;

&lt;h3 id=&quot;onboarding-isnt-a-one-size-fits-all-activity&quot;&gt;Onboarding isn’t a one-size-fits-all activity&lt;/h3&gt;

&lt;p&gt;The members of a new hire cohort might range from new grads to industry veterans with
30+ years of experience. Even in small companies, people will most likely be assigned
to different teams working on different parts of the product and using different
technical stacks.&lt;/p&gt;

&lt;p&gt;In this environment, it’s impossible to have a multi-week, general training program
that’s optimal for everybody. Even if you break it up into subspecialties (e.g.,
“frontend bootcamp” vs. “backend bootcamp”), there’s still a tendency for it to be
too fast, too slow, too general, or too specialized for some subset of the
participants.&lt;/p&gt;

&lt;p&gt;A more efficient way to get engineers up-to-speed is to have them do
real project work that’s like the work they’ll be doing after orientation is over.
And, the best way to do this is to have engineers join their teams
early on in the process and lean on their managers and peers for guidance.&lt;/p&gt;

&lt;p&gt;The other nice thing about the guided, “dive in” approach is that it can be heavily
customized on a person-by-person basis. A new grad or someone who’s never worked
in the team’s tech stack might be given smaller, easier starter tasks than someone
who’s already an expert in the technology. New hires are able to get up-to-speed
at their own pace, without the wasted time or excess stress of a group training
program.&lt;/p&gt;

&lt;h3 id=&quot;group-classes-have-limited-utility&quot;&gt;Group classes have limited utility&lt;/h3&gt;

&lt;p&gt;Orientation classes can be fun at the beginning, but, after hours and hours
of sitting in a stuffy room and listening to presentations, attentions
wane and the sessions all start to blend together. In addition, by their very
structure these classes are very much “one-size-fits-all” activities that can’t
be easily customized for the requirements of each person’s job.&lt;/p&gt;

&lt;p&gt;Personally, I think a day or two of classes at the beginning is fine, provided
that these are devoted to things that are necessary and relevant for
all new hires (e.g., how to get paid, what the core values / operating principles
of the company are, etc.). But, beyond that, classes should be optional and also
non-continuous so that attendees can fit them in with their team-specific
onboarding tasks.&lt;/p&gt;

&lt;p&gt;An alternative to classes, and what I think is a much better use of resources,
is to create great onboarding &lt;em&gt;documentation&lt;/em&gt;. Unlike a presentation, which
tends to go in one ear and out the other, documentation sticks around forever and
can easily be consulted after the onboarding is done. People can also work
through documentation at their own pace and skip over topics that they already
know about or aren’t relevant for their work.&lt;/p&gt;

&lt;p&gt;Google had a particularly nice balance here. There were a few technical
onboarding classes, but they were extremely high-level and designed to be more
about the social and cultural aspects of engineering rather than the technical
ones (as I recall, they also had cute names like “life an engineer”). Technical
training, when needed, was instead done via written “code labs” that engineers
worked on individually.&lt;/p&gt;

&lt;h3 id=&quot;doing-team-assignments-during-onboarding-is-crazy&quot;&gt;Doing team assignments during onboarding is crazy&lt;/h3&gt;

&lt;p&gt;I went through a team matching process during my Airbnb onboarding, and it was
extremely stressful for everyone involved. Hiring managers, particularly those
on the less-desired teams, spent days marketing their teams and convincing (and sometimes begging) people to join them. On the other side, the members of my
starting class and I were bombarded with choices and forced to spend a lot of
time talking to hiring managers, doing mini-tasks for the teams we were
interested in, and, in general, stressing out over a decision that had to be made
quickly and would play a big role in our careers at the company.&lt;/p&gt;

&lt;p&gt;Everyone in my starting class was able to find a team that they liked and
“graduate” on-time. But, I’ve heard anecdotally about people arriving at
these bootcamp-style orientations only to learn that the team(s) that attracted
them to the company aren’t accepting any new hires. Or, on the flip side, I’ve
heard about hiring managers recruiting people with specialized skills that they
need (e.g., database performance optimization) only to have
these specialists choose completely different teams at the end of bootcamp.&lt;/p&gt;

&lt;p&gt;All of this craziness can be avoided by simply matching people to teams before
they arrive. Doing this reduces stress on both sides and ensures that candidates know
what they’re getting themselves into. People should be allowed to switch teams within
the first few weeks if they really need to, but this should be relatively rare.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The best approach to onboarding engineers is to quickly integrate them with
their preassigned teams. Organizing weeks of classes and/or letting new hires
pick teams during orientation may seem like a better onboarding experience, but
usually just wastes time and causes unnecessary stress.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Starting a new software engineering job is hard, and making this process successful requires a lot of effort from both the employer and the employee. In this post, I want to focus on the former, and in particular how companies can make their onboarding processes better.</summary></entry><entry><title type="html">How I made this blog</title><link href="https://yolken.net/blog/how-i-made-this-blog" rel="alternate" type="text/html" title="How I made this blog" /><published>2021-01-10T13:10:00-08:00</published><updated>2021-01-10T13:10:00-08:00</updated><id>https://yolken.net/blog/how-i-made-this-blog</id><content type="html" xml:base="https://yolken.net/blog/how-i-made-this-blog">&lt;p&gt;Every now and then, I get asked how I made this blog from a technical standpoint. In this
post, I want to share how my content is generated and hosted, and then describe some commonly-used,
alternative approaches that I decided not to take.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;I write each post in a separate &lt;a href=&quot;https://en.wikipedia.org/wiki/Markdown&quot;&gt;Markdown&lt;/a&gt; file.
Markdown is nice because it’s super lightweight, supports most of the formatting I need
(headers, bolding, bullets, etc.), and I’ve used it a lot for writing documentation at work, so
I feel very comfortable with the syntax.&lt;/p&gt;

&lt;p&gt;For example, here’s a sample of the Markdown for my recent post on
&lt;a href=&quot;/blog/quitting-a-new-job&quot;&gt;quitting a new job&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-markdown&quot; data-lang=&quot;markdown&quot;&gt;&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;post&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Quitting&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;job&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;   &lt;span class=&quot;s&quot;&gt;2021-01-01 18:40:00 -0700&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;career&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Two years ago, I did something ...&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;---&lt;/span&gt;

Two years ago, I did something that I'd never done in my career before-
I left a job (at &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Nuro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://nuro.ai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;) only a few months after starting
it. In this post, I want to explain what happened and what I learned from
the experience.

&lt;span class=&quot;gu&quot;&gt;## What happened&lt;/span&gt;

&lt;span class=&quot;gu&quot;&gt;#### The job switch&lt;/span&gt;

Back in the spring of 2019, I decided to leave &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Stripe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://www.stripe.com&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;,
where I'd been a software engineer for about a year and a half. The full
details are best left to a separate post, but at a high level I just wasn’t very
happy...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I then use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; to convert these Markdown files into a collection
of static HTML pages that can be rendered by web browsers. Jekyll is what’s known as a
“static site generator”; in addition to supporting higher-level formats like Markdown that are
easier to work with than HTML, these frameworks also automate setting the look-and-feel of each
page and inserting common content like headers and footers that would be tedious to add manually.&lt;/p&gt;

&lt;p&gt;Here’s what the &lt;a href=&quot;/blog/quitting-a-new-job&quot;&gt;quitting a new job&lt;/a&gt; Markdown looks like after
conversion to HTML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Quitting a new job | Benjamin Yolken&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;site-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trigger&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/blog&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Blog&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/pubs&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Publications&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;page-link&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/about&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;About&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
    ...
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;post-content e-content&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;itemprop=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;articleBody&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Two years ago, I did something that I’d never done in my career before-
      I left a job (at &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://nuro.ai&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Nuro&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;) only a few months
      after starting it. In this post, I want to explain what happened and
      what I learned from the experience.
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;what-happened&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;What happened&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h4&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the-job-switch&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;The job switch&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h4&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;Back in the spring of 2019, I decided to leave
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;a&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://www.stripe.com&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Stripe&lt;span class=&quot;nt&quot;&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;, where I’d been a software
      engineer for about a year and a half. The full details are best left to
      a separate post, but at a high level I just wasn’t very happy...&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, I push the generated HTML files, along with a stylesheet for the site, into the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; branch of my &lt;a href=&quot;https://github.com/yolken/yolken-blog&quot;&gt;GitHub repo&lt;/a&gt;. GitHub has a nice
feature called &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; that will take the contents of an arbitrary
branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt; by default) and serve them as static content behind a web server. It also
supports custom domains, which allows for my pages to be available though &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;yolken.net&lt;/code&gt; as opposed to
a shared domain like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github.com&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;GitHub has solid documentation on the entire process, including the content generation
steps, that you can read
&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/setting-up-a-github-pages-site-with-jekyll&quot;&gt;here&lt;/a&gt;. Everything is free if your repo is open-source
and you abide by the &lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages#guidelines-for-using-github-pages&quot;&gt;GitHub Pages guidelines&lt;/a&gt;, all of which
are pretty reasonable for most personal blogs.&lt;/p&gt;

&lt;h2 id=&quot;rejected-alternatives&quot;&gt;Rejected alternatives&lt;/h2&gt;

&lt;p&gt;There are several other approaches to publishing a blog online that I decided not to go with.
These weren’t ideal for me, but, depending on your specific requirements, may be reasonable
choices for your content.&lt;/p&gt;

&lt;h3 id=&quot;use-a-third-party-blogging-service&quot;&gt;Use a third-party blogging service&lt;/h3&gt;

&lt;p&gt;The easiest way to get a blog online is to use a third-party, hosted blogging service.
Back in the day, &lt;a href=&quot;https://www.blogger.com/&quot;&gt;Blogger&lt;/a&gt; was all the rage.
Now, it seems like &lt;a href=&quot;https://medium.com&quot;&gt;Medium&lt;/a&gt; is the hot platform to use. There are tons of other
choices here, including social networks like Facebook and LinkedIn, which have started supporting
blog-like user content.&lt;/p&gt;

&lt;p&gt;The main advantage of these services is that they’re super easy-to-use. You just type up your
content in a pretty, web-based editor and click a button to publish. They also provide features like
comments, searching, and subscriptions on top of your content without much effort.&lt;/p&gt;

&lt;p&gt;The downside of these services is that you’re handing over your content to a third-party,
who’s packaging it up with other people’s content, applying their own look-and-feel, and, in many
cases, trying to monetize it. Even though you’re the author, and even though you maintain
legal rights to your content in most cases, there’s a tendency for your work to become associated
more with the hosting service than with you.&lt;/p&gt;

&lt;p&gt;Personally, I’m fine with this when I’m sharing low-quality, short-form content like
my vacation photos. However, for something as important and personal as my blog, I wanted
to be in complete control and not share any ownership with a third-party.&lt;/p&gt;

&lt;p&gt;If you’re just writing occasionally, though, or really, really don’t want to deal with any
technical details, putting your content in a third-party service might be an acceptable
choice.&lt;/p&gt;

&lt;h3 id=&quot;host-in-a-cloud-provider&quot;&gt;Host in a cloud provider&lt;/h3&gt;

&lt;p&gt;GitHub Pages is very reliable and low-hassle but only handles static content and imposes
&lt;a href=&quot;https://docs.github.com/en/free-pro-team@latest/github/working-with-github-pages/about-github-pages#guidelines-for-using-github-pages&quot;&gt;some limitations&lt;/a&gt; on this content including its size and
update frequency. It also abstracts away the lower-level serving details, which are
sometimes useful to observe and adjust.&lt;/p&gt;

&lt;p&gt;An alternative is to host your blog using a cloud provider like AWS. The details
here vary a lot based on which provider you’re using and what you’re trying to do, but if
you have static content only, you can use a storage service like
&lt;a href=&quot;https://aws.amazon.com/s3/&quot;&gt;S3&lt;/a&gt; plus a content delivery network (CDN) like
&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; to handle caching and HTTPS termination closer
to end users.&lt;/p&gt;

&lt;p&gt;I decided to not take this approach because my blog comfortably fits within the limits of
GitHub Pages, and I also like that it’s totally free. This may change in the future, though, if I
outgrow GitHub Pages or get bored and want to handle more of the lower-level serving details
myself.&lt;/p&gt;

&lt;h3 id=&quot;run-your-own-content-management-system-cms&quot;&gt;Run your own content management system (CMS)&lt;/h3&gt;

&lt;p&gt;Static sites like the one for this blog are fairly limited; among other examples, you can’t
customize pages on a per-user basis, it’s hard to provide dynamic features like search,
and, since all posts are static files, it can become tedious to manage a large amount of content.&lt;/p&gt;

&lt;p&gt;An alternative is to run a service called a
&lt;a href=&quot;https://en.wikipedia.org/wiki/Content_management_system&quot;&gt;content management system (CMS)&lt;/a&gt;, which
stores the content in a database and dynamically generates pages in response to user requests.
Because the content is stored in a structured format and because the server can customize the
contents of each page, it’s much easier to incorporate Blogger or Medium-like features such as user
logins, search, and online post editing.&lt;/p&gt;

&lt;p&gt;There are a large number of fully-featured, open-source CMSes to choose from, including
&lt;a href=&quot;https://en.wikipedia.org/wiki/WordPress&quot;&gt;WordPress&lt;/a&gt; and
&lt;a href=&quot;https://en.wikipedia.org/wiki/Drupal&quot;&gt;Drupal&lt;/a&gt;. You can also write your own on top of a web
application framework like &lt;a href=&quot;https://www.djangoproject.com/&quot;&gt;Django&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Running these systems is a lot more complicated than throwing static HTML into
GitHub Pages or S3. In addition to choosing a hosting provider and configuring all of the
associated software, you also need to worry about things like monitoring (what if the site goes
down?) and capacity planning (what if a post goes viral and gets tens of thousands of views?).&lt;/p&gt;

&lt;p&gt;For me, the extra features of a CMS just weren’t worth the hassle. However, this may be a good
choice if you want to create a site with more than just a static list of posts. The more popular
CMSes like WordPress also have rich ecosystems of themes and plugins that you can use
to create prettier, more complex online destinations.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;This blog consists of static HTML served by GitHub Pages. Although it’s not the fanciest
approach, I’ve found that it provides a high degree of personal control while having
minimal maintenance overhead.&lt;/p&gt;</content><author><name></name></author><category term="general" /><category term="tech" /><summary type="html">Every now and then, I get asked how I made this blog from a technical standpoint. In this post, I want to share how my content is generated and hosted, and then describe some commonly-used, alternative approaches that I decided not to take.</summary></entry><entry><title type="html">Quitting a new job</title><link href="https://yolken.net/blog/quitting-a-new-job" rel="alternate" type="text/html" title="Quitting a new job" /><published>2021-01-01T17:40:00-08:00</published><updated>2021-01-01T17:40:00-08:00</updated><id>https://yolken.net/blog/quitting-a-new-job</id><content type="html" xml:base="https://yolken.net/blog/quitting-a-new-job">&lt;p&gt;Two years ago, I did something that I’d never done in my career before- I left a job
(at &lt;a href=&quot;https://nuro.ai&quot;&gt;Nuro&lt;/a&gt;) only a few months after starting it. In this post, I want to explain
what happened and what I learned from the experience.&lt;/p&gt;

&lt;h2 id=&quot;what-happened&quot;&gt;What happened&lt;/h2&gt;

&lt;h4 id=&quot;the-job-switch&quot;&gt;The job switch&lt;/h4&gt;

&lt;p&gt;Back in the spring of 2019, I decided to leave &lt;a href=&quot;https://www.stripe.com&quot;&gt;Stripe&lt;/a&gt;, where I’d
been a software engineer for about a year and a half. The full details are best left
to a separate post, but at a high level I just wasn’t very happy with my personal situation; the
work I was doing in compute infrastructure had the unfortunate combination of being both
overly stressful and underappreciated. At the same time, I felt like my career prospects
were limited because the upper rungs of Stripe’s engineering individual contributor (IC) ladder put
a lot of emphasis on cross-team coordination and other, managerial-like activities that I didn’t
enjoy and felt I wasn’t very good at.&lt;/p&gt;

&lt;p&gt;Given how hot the job market was at the time and the number of other, seemingly more interesting
opportunities available, I figured that I had nothing to lose by interviewing elsewhere.&lt;/p&gt;

&lt;p&gt;After a few weekends of furiously-paced &lt;a href=&quot;/blog/master-coding-interviews&quot;&gt;Leetcoding&lt;/a&gt;, I was ready.
Unlike my previous job searches, there wasn’t any particular company that I was aspiring
to get into; instead, I just went through my &lt;a href=&quot;/blog/six-years-of-emails&quot;&gt;backlog of recruiting emails&lt;/a&gt;
and wrote back to a bunch that looked interesting. Among the messages I responded to was one
about &lt;a href=&quot;https://nuro.ai&quot;&gt;Nuro&lt;/a&gt;, an autonomous vehicle startup that was attempting to do driverless
grocery delivery.&lt;/p&gt;

&lt;p&gt;Over the following weeks, I went through the full recruitment slog, starting with lots of
recruiter phone calls, then following up with technical phone screens for a subset of
those, then doing onsite interviews for a subset of those. In the end, I got offers from seven
places, including Nuro.&lt;/p&gt;

&lt;p&gt;During the process, I didn’t fall in love with any of the options. But, there
was something that made me feel more optimistic about Nuro than the other choices. Being a
hardware-oriented, robotics company, it was just really different from all of my previous employers,
and, after years of feeling stuck in my career, maybe different was good.&lt;/p&gt;

&lt;p&gt;The company was super secretive about its technology; I wasn’t allowed to tour the office, for
instance, because they had hardware prototypes lying around that only employees were allowed to
see. I also wasn’t invited to ride along in their test cars, which would have been both fun and
informative. The external signs were good, though- they had raised a billion dollars from Softbank
and others, and the employee reviews on &lt;a href=&quot;https://www.glassdoor.com&quot;&gt;Glassdoor&lt;/a&gt; were gushing.&lt;/p&gt;

&lt;p&gt;Aside from being in a somewhat different space than my previous employers, another potential
downside was the commute. Stripe and my three jobs before that were all within a 15 minute walk
of my apartment in San Francisco. Nuro’s office was 40 miles away in Mountain View, which was
more than an hour each way by train. But, I had done longer commutes earlier in my career and figured
that I could handle it.&lt;/p&gt;

&lt;p&gt;In the end, I went with my impulses and signed the offer. I had my last day at Stripe, took a short
vacation, and then showed up at the Nuro office, brimming with optimism, for my first day two weeks
later.&lt;/p&gt;

&lt;h4 id=&quot;realizing-my-mistake&quot;&gt;Realizing my mistake&lt;/h4&gt;

&lt;p&gt;Unfortunately, that optimism lasted for a grand total of 2 days. By Wednesday of my first week,
as I was riding the train home, I realized that I had made a mistake. My colleagues were
friendly and smart, and the company was doing interesting things, but the job just felt like a
lifestyle downgrade to me.&lt;/p&gt;

&lt;p&gt;At Stripe and each of my jobs before that, I had had a short commute to a beautiful office, and
got to experience the instant gratification associated with developing purely software-based
products. Now, I was stuck taking a crowded train to a dark office littered with hardware parts,
working on a product that would take many years to reach mass-market adoption due to pesky little
things like manufacturing and road safety.&lt;/p&gt;

&lt;p&gt;I had left Stripe seeking an upgrade, but instead I got a downgrade. And, while minor improvements
were possible, it seemed unlikely that things would completely change for the better in the near
term.&lt;/p&gt;

&lt;h4 id=&quot;getting-back-on-track&quot;&gt;Getting back on track&lt;/h4&gt;

&lt;p&gt;At this point, I had three choices:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Quit immediately&lt;/li&gt;
  &lt;li&gt;Start exploring new opportunities but don’t quit until something better is lined up&lt;/li&gt;
  &lt;li&gt;Stick it out for at least a year&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;My first instinct was to take option 1 and just go back to Stripe. When I reached out to my HR
contact, though, I found out that I’d have to go through team matching again and also get a new
offer; even though I’d left on good terms less than a month before, I couldn’t just revert back to
my previous position and pay. This was disappointing, but after giving it a little more thought,
I figured it was for the best because I had left Stripe for specific reasons; going back
to my old job wouldn’t fix those or make me feel better about them.&lt;/p&gt;

&lt;p&gt;Another variant of option 1 would be to quit and take one of the other offers I had gotten
during my search. But, I had already rejected those for what I thought were good reasons,
so this didn’t feel like the best way out.&lt;/p&gt;

&lt;p&gt;Option 3 was the one that would look the least bad from a resume perspective, and this seems to be
what a lot of people in tech do when they don’t like a job. But, life is short, I was really feeling
unhappy with the choice I had made, and I figured it wasn’t really fair to my colleagues at Nuro to
stick in a job that my heart wasn’t in.&lt;/p&gt;

&lt;p&gt;So, in the end, I decided that option 2 was the best fit for me. I continued at Nuro and did my best
to get up-to-speed and to contribute to my team’s work, but at the same time jumped right back
into the job market. In addition to keeping things open with Stripe, I
&lt;a href=&quot;/blog/triplebyte-review&quot;&gt;tried Triplebyte&lt;/a&gt;, responded to more recruiter emails, and also
reached out to some former colleagues about the companies they were now at.&lt;/p&gt;

&lt;p&gt;I then went through the whole recruitment process with a new set of companies. This time,
though, I was a lot pickier about where I interviewed (nothing in hardware or with long commutes!);
after a few weeks, I had four new choices including an updated offer from Stripe. After
a good amount of due diligence, significantly more than I had done in my previous search, I
decided to go to &lt;a href=&quot;https://segment.com&quot;&gt;Segment&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;When I put in my notice at Nuro, people were surprised that I was leaving so soon, but ultimately
were understanding. I left, took a short vacation, and then started at Segment. Thankfully,
the new job was a much better fit for me, and I’m much happier now!&lt;/p&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons learned&lt;/h2&gt;

&lt;h4 id=&quot;do-your-due-diligence&quot;&gt;Do your due diligence&lt;/h4&gt;

&lt;p&gt;Switching jobs is a big deal, and it shouldn’t be done impulsively. Ideally, your due
diligence before signing a new offer should include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Meeting with the team you’ll be working with in a low-stress, non-interview setting&lt;/li&gt;
  &lt;li&gt;Touring the office and understanding what your specific workspace will be like&lt;/li&gt;
  &lt;li&gt;Trying out the commute for a few days (if it’s significantly different than your current one)&lt;/li&gt;
  &lt;li&gt;Trying out any new languages/technologies that you’ll be using on the job&lt;/li&gt;
  &lt;li&gt;Getting hands-on demos of the company’s products (if they’re not freely accessible to consumers
  already)&lt;/li&gt;
  &lt;li&gt;Seeing a summary of the company’s income and expenses over time (if not public)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Learning about these things doesn’t guarantee that you’ll be happy in your new job, but it
at least reduces the risk of any unexpected surprises after you start.&lt;/p&gt;

&lt;h4 id=&quot;its-ok-to-quit-after-a-few-weeks-just-dont-make-it-a-pattern&quot;&gt;It’s ok to quit after a few weeks (just don’t make it a pattern)&lt;/h4&gt;

&lt;p&gt;When I started my second job search, I was worried that the short
tenure in the job I was trying to leave would be a turn-off to perspective employers. In reality,
however, it wasn’t a big deal- people asked about it, but seemed satisfied with my 20 second
summary and then moved on to other things.&lt;/p&gt;

&lt;p&gt;The sense I get is that you’re allowed to quit a new job once in your career without any
repercussions. If you do it multiple times, however, then recruiters and hiring managers might
have second thoughts about interviewing you without strong internal references or some other signal
that you’ll be a good employee.&lt;/p&gt;

&lt;h4 id=&quot;switch-teams-before-quitting&quot;&gt;Switch teams before quitting&lt;/h4&gt;

&lt;p&gt;As I noted in a &lt;a href=&quot;/blog/leaving-a-job&quot;&gt;previous post&lt;/a&gt;, switching teams is a lot easier than
switching jobs. I didn’t do this before I left Stripe because there weren’t any other teams that I
was super enthusiastic about at the time. But, in retrospect, I probably should have given this a
try before quitting.&lt;/p&gt;

&lt;p&gt;Even if the new team hadn’t been a perfect fit, it would have at least bought some time and given
me some additional experience that could help in future work. This is what I did at Google
and Airbnb, and in both cases the “second team” was what really opened up new opportunities for me.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;addendum&quot;&gt;Addendum&lt;/h3&gt;

&lt;p&gt;This post was submitted to Hacker News after publication and got
&lt;a href=&quot;https://news.ycombinator.com/item?id=25637922&quot;&gt;a lot of comments&lt;/a&gt;! Feel free to add more there.&lt;/p&gt;</content><author><name></name></author><category term="career" /><summary type="html">Two years ago, I did something that I'd never done in my career before- I left a job (at Nuro) only a few months after starting it. In this post, I want to explain what happened and what I learned from the experience.</summary></entry><entry><title type="html">Going into tech with a PhD</title><link href="https://yolken.net/blog/phd-to-tech" rel="alternate" type="text/html" title="Going into tech with a PhD" /><published>2020-12-25T12:04:00-08:00</published><updated>2020-12-25T12:04:00-08:00</updated><id>https://yolken.net/blog/phd-to-tech</id><content type="html" xml:base="https://yolken.net/blog/phd-to-tech">&lt;p&gt;I spent 5 years of my life getting a PhD, but like many others who’ve gotten this degree,
I decided to leave academia after graduation. At the time, I explored several career choices
but ultimately decided to take a Product Manager job at Google.&lt;/p&gt;

&lt;p&gt;Since then, I’ve &lt;a href=&quot;/blog/switching-from-product-to-eng&quot;&gt;switched ladders once&lt;/a&gt; and
&lt;a href=&quot;https://www.linkedin.com/in/yolken/&quot;&gt;switched companies a few times&lt;/a&gt;, but overall have absolutely
no regrets about going into tech versus the other paths that I could have taken.&lt;/p&gt;

&lt;p&gt;In this post, I want to discuss why I think it’s a great destination for people with technical PhDs
and also dig into the “career ladders” that most tech companies have.&lt;/p&gt;

&lt;h4 id=&quot;quick-note-on-terminology&quot;&gt;Quick note on terminology&lt;/h4&gt;

&lt;p&gt;I’m using “tech” to mean computer software and/or hardware technology companies. There’s
also biotech, but given that I haven’t done anything bio-related since my high school science
classes, I’m not really qualified to discuss that side of the world.&lt;/p&gt;

&lt;p&gt;Also, the intended audience here is “technical” PhDs, i.e. those in the sciences and engineering.
You can certainly go into tech with a PhD in French Literature, but the degree will be less of a
benefit, and you’ll have to prove your technical skills in some other way.&lt;/p&gt;

&lt;h2 id=&quot;why-tech&quot;&gt;Why tech&lt;/h2&gt;

&lt;p&gt;Tech jobs are a great fit with technical PhDs because they both require a similar set of skills
to succeed:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ability to break down large technical problems into smaller chunks, work on them over many
  years despite roadblocks&lt;/li&gt;
  &lt;li&gt;Comfort with complex quantitative analysis, particularly when the underlying data are messy or
  incomplete&lt;/li&gt;
  &lt;li&gt;Strong communication skills&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In some cases, the degree might also provide knowledge that’s directly relevant for a job- for
instance, if your PhD was in software compiler design and your job is on the compiler team at a
company.&lt;/p&gt;

&lt;p&gt;That’s great if you’re able to find such a fit, and it will definitely help your career
at the beginning, but it’s not a requirement, and seems to be more the exception than the rule.
My research, for instance, was on &lt;a href=&quot;/pubs&quot;&gt;using game theory for resource allocation&lt;/a&gt;, but
aside from a little bit in my first job, my work has been completely unrelated.&lt;/p&gt;

&lt;p&gt;In addition to the natural skills fit, there are a number of other great things about tech, which
apply whether you’re a PhD or not:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Great salaries, benefits, and work environment (casual, friendly, flexible hours, etc.)&lt;/li&gt;
  &lt;li&gt;Fast-moving, constantly changing, hard to get bored for too long&lt;/li&gt;
  &lt;li&gt;Ability to build and create things that people actually use&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;alternative-paths&quot;&gt;Alternative paths&lt;/h2&gt;

&lt;p&gt;Before digging into the details of various tech career ladders, it’s worth briefly discussing some
non-tech destinations that are also popular among technical PhDs.&lt;/p&gt;

&lt;h3 id=&quot;corporate-research-labs&quot;&gt;Corporate research labs&lt;/h3&gt;

&lt;p&gt;A few companies such as &lt;a href=&quot;https://www.research.ibm.com/&quot;&gt;IBM&lt;/a&gt;,
&lt;a href=&quot;https://www.microsoft.com/en-us/research/&quot;&gt;Microsoft&lt;/a&gt;, and
&lt;a href=&quot;https://www8.hp.com/us/en/hp-labs/&quot;&gt;HP&lt;/a&gt;, run “labs” or “research” divisions that are sort of a
cross between a research university and a large corporation. Staff in these places
do research, write papers, and present at academic conferences like professors but are expected
to work on problems that are relevant to the businesses of their parent companies.&lt;/p&gt;

&lt;p&gt;I briefly worked at &lt;a href=&quot;https://www.research.ibm.com/labs/almaden/&quot;&gt;IBM’s Almaden Lab&lt;/a&gt; (and hated it-
details to be covered in a future post!) and have met a few people at some of the other labs
in the SF Bay Area. I think it can be a good fit if you absolutely love research but don’t want
to deal with writing grants, teaching students, or doing the other, non-research-related work of a
professor. On the other hand, you have less freedom than an academic researcher, and the work can
be more boring and slower-paced than what you’d be doing in a more conventional tech job.&lt;/p&gt;

&lt;h3 id=&quot;management-consulting&quot;&gt;Management consulting&lt;/h3&gt;

&lt;p&gt;The big, traditional management consulting companies (e.g., &lt;a href=&quot;https://www.mckinsey.com/&quot;&gt;McKinsey&lt;/a&gt;)
love hiring PhDs, particularly those from prestigious schools. I halfheartedly applied to a few of
these jobs as I was finishing up my degree, but didn’t get any offers and then never considered
them again.&lt;/p&gt;

&lt;p&gt;From what I’ve heard, these jobs can involve a rough lifestyle (lots of travel and long hours)
and the work is often boring and repetitive. Every person I’ve known who’s gone into consulting
has left the profession after 2-3 years, which I think says a lot about it as a career path.&lt;/p&gt;

&lt;p&gt;On the other hand, the jobs are considered prestigious, and they can serve as stepping stones
into high-level leadership roles in lots of different industries, including tech.&lt;/p&gt;

&lt;h3 id=&quot;finance&quot;&gt;Finance&lt;/h3&gt;

&lt;p&gt;Several of my schoolmates ended up as “quants” at hedge funds and other financial firms.
I don’t have any personal experience with these jobs, but from what I’ve heard they can be
extremely lucrative. I’m personally not very interested in finance or the idea of crunching
numbers all day, but if you are it might be a career path to explore.&lt;/p&gt;

&lt;p&gt;If you’re interested in finance, I’d highly recommend reading
&lt;a href=&quot;https://www.amazon.com/My-Life-Quant-Reflections-Physics/dp/0470192739&quot;&gt;this memoir&lt;/a&gt; to
get a somewhat dated (but still relevant) perspective on transitioning from academic research to
Wall Street.&lt;/p&gt;

&lt;h2 id=&quot;ladders&quot;&gt;Ladders&lt;/h2&gt;

&lt;p&gt;Once you’ve decided to go into tech, the next step is to figure out which “career ladder”
is the best fit for you. The members of the various ladders collaborate and there’s often some
overlap in the work, but the choice of ladder determines how the interview process works
and how you’re evaluated once you’re on the job.&lt;/p&gt;

&lt;p&gt;The ladder names and associated job titles will vary from company to company, but there
are generally three main buckets that technical PhDs are hired into. The following sections
describe each in more detail.&lt;/p&gt;

&lt;h3 id=&quot;engineering&quot;&gt;Engineering&lt;/h3&gt;

&lt;p&gt;Engineers, whether in software (like me) or hardware, are the people responsible for most of
the hands-on technical work. This work, to put it colloquially, is a mixture of creating new
things, updating existing things, fixing problems in existing things, and/or managing people
doing any of the previous.&lt;/p&gt;

&lt;p&gt;In addition to being the most hands-on of the ladder choices, engineering is also the intellectual
core of a tech company. As a result, it’s often the “power center” where decisions
are made and upper management is drawn from. This is not always the case, though- at a few
tech companies, it’s product or design that runs the show.&lt;/p&gt;

&lt;p&gt;The downside of engineering, particularly at larger companies, is that you’re typically focused
on a very narrow slice of the company’s technology. This gets better as you become more senior,
but other ladders like product management offer more breadth starting from the beginning.&lt;/p&gt;

&lt;p&gt;Another limitation of engineering is that very specific skills are required, e.g. coding for
software jobs. Many PhDs don’t have the necessary background here or enjoy these activities
enough to do them every day.&lt;/p&gt;

&lt;h3 id=&quot;product-management&quot;&gt;Product management&lt;/h3&gt;

&lt;p&gt;Product managers are responsible for ensuring the high-level success of the products they work on.
They do this by talking to customers, writing up requirements documents, setting priorities
for engineering work, and developing relationships with other teams inside the company, among
other activities. The work can be all over the place, and really varies a lot based on the needs of
the product and the structure of the teams you’re working with.&lt;/p&gt;

&lt;p&gt;The nice thing about product management, and the reason that I went into it originally, is that
it’s super flexible and broad, even early on in your career. As an entry-level PM at Google,
I not only interacted with lots of senior engineers, but also got exposure to legal, PR,
design, internationalization, research, and other specializations within the company.&lt;/p&gt;

&lt;p&gt;The downside of product management, and the reason that I eventually switched into engineering,
is that it’s less technical and more relationship-oriented than the other ladders. Some people love
this kind of work, though, so don’t let me dissuade you if you have the right personality for it.&lt;/p&gt;

&lt;h3 id=&quot;data-science&quot;&gt;Data science&lt;/h3&gt;

&lt;p&gt;Data science, at least when called as such, is the newest of the ladder choices. Data scientists
do quantitative analysis to support product development. The exact day-to-day projects vary a lot,
but some examples here include designing and evaluating product experiments, building models
to detect malicious user behavior, and forecasting the company’s future product demand.&lt;/p&gt;

&lt;p&gt;When I started my career 12 years ago, most of the jobs in this space were much more specialized,
e.g. “financial analyst” or “experimental statistician”, so I didn’t apply for them. Since
then, the more general field of “data science” has developed and become broad enough that it’s a
good fit for many technical PhDs.&lt;/p&gt;

&lt;p&gt;Data science is the most quantitative and “researchy” of the ladders, so it’s probably the one
where PhDs have the biggest advantage over those with non-PhD backgrounds. On the other hand,
it’s usually less about building new things and more about analyzing existing things (e.g.,
whether an experiment around a product feature was successful), so I think the potential
scope and impact of the work is more limited compared to the other ladders.&lt;/p&gt;

&lt;p&gt;Another downside of data science is that many tech companies don’t have a data science ladder.
Or, if they do, it might be limited to just a very small part of the overall business. This will
probably improve in the future, though.&lt;/p&gt;

&lt;h2 id=&quot;applying-and-leveling-as-a-phd&quot;&gt;Applying and leveling as a PhD&lt;/h2&gt;

&lt;p&gt;Unlike academic jobs, most of the positions in the tech ladders above don’t require a PhD. Instead,
it might be listed as “desired” or “a plus” in the associated job descriptions. The impact
of having a PhD versus not having one in the interview process will vary a lot based on the
company and specific position you’re applying for. You might be asked to give a seminar on your
research, or, as is the case for many software engineering jobs, it might make zero difference
in how you’re interviewed.&lt;/p&gt;

&lt;p&gt;Once you pass the interviews, having a PhD should improve the initial level you’re assigned
and the associated compensation you’re offered (see
&lt;a href=&quot;/blog/stop-hiding-levels&quot;&gt;this previous post on levels&lt;/a&gt;). When I started at Google, for instance,
my PhD allowed me to skip the first two rungs on the PM ladder even though I had little prior
job experience. This put me several years ahead of new grads entering with only bachelor’s
degrees.&lt;/p&gt;

&lt;p&gt;Wherever you end up, you’re likely to be working with and working for many people who don’t have
PhDs. It’s nice being special, and people will definitely notice your PhD when you’re applying for
new positions, but once you’re settled in a job, having the degree isn’t a big deal.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Tech can be a great place for PhDs, and, although I’m a bit biased, I think it’s better than the
alternative career choices for many people. If you’re finishing up a PhD or stuck in an
unfulfilling academic job, it’s totally worth exploring your options in the space.&lt;/p&gt;</content><author><name></name></author><category term="interviews" /><summary type="html">I spent 5 years of my life getting a PhD, but like many others who've gotten this degree, I decided to leave academia after graduation. At the time, I explored several career choices but ultimately decided to take a Product Manager job at Google. In this post, I want to discuss why I think tech is a great destination for people with technical PhDs.</summary></entry><entry><title type="html">How to do an architecture interview</title><link href="https://yolken.net/blog/architecture-interviews" rel="alternate" type="text/html" title="How to do an architecture interview" /><published>2020-12-24T11:26:00-08:00</published><updated>2020-12-24T11:26:00-08:00</updated><id>https://yolken.net/blog/architecture-interviews</id><content type="html" xml:base="https://yolken.net/blog/architecture-interviews">&lt;p&gt;Many software engineering interview loops include an “architecture interview”, where the
candidate is asked to develop a high-level design for a software system. Over the last few
years, I’ve given many, many of these interviews, so I’ve seen a wide range of performances
across the spectrum, from “absolutely terrible” to “we need to hire this person now!”.&lt;/p&gt;

&lt;p&gt;Based on these experiences, I’d like to share what it takes to succeed in these interviews as
the candidate, and some common behaviors to avoid.&lt;/p&gt;

&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;/h2&gt;

&lt;p&gt;Although the exact format can vary, most architecture interviews begin with an open-ended
prompt of the form “design &lt;em&gt;X&lt;/em&gt;”. The &lt;em&gt;X&lt;/em&gt; can be filled in with a generic software system,
for instance:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A distributed &lt;a href=&quot;https://en.wikipedia.org/wiki/Key%E2%80%93value_database&quot;&gt;key/value store&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_crawler&quot;&gt;web crawler&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A video streaming system&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;An alternative, which I think is the more interesting approach, is to fill in the blank with
a well-known product or product feature; some examples here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Generating the Facebook news feed&lt;/li&gt;
  &lt;li&gt;Executing a Robinhood user’s trade flow&lt;/li&gt;
  &lt;li&gt;Matching Uber drivers and riders&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The target design, whether generic or product-based, might be something related to the company’s
own systems or products, but it’s often not.&lt;/p&gt;

&lt;p&gt;The question is left open-ended and high-level deliberately. The interviewer is not looking for
a specific answer (usually), but rather wants to observe the process by which you break down
the problem, dig into the pieces, and justify your decisions. As you discuss your solution,
the interviewer will ask questions, steer you towards or away from specific areas, and really try
to understand what it would be like to collaborate with you on the design of a real project.&lt;/p&gt;

&lt;h2 id=&quot;structure-is-key&quot;&gt;Structure is key&lt;/h2&gt;

&lt;p&gt;Because the questions are so open-ended, and because you’re being evaluated as much on your
process as your specific solution, structuring your answer is really, really important. Here’s
a structure that I think works well for most of these questions.&lt;/p&gt;

&lt;h3 id=&quot;step-1-clarification&quot;&gt;Step 1: Clarification&lt;/h3&gt;

&lt;p&gt;Once you get the question, the first step is to make sure you understand what you’re being asked
to design. For the “design a system to match Uber drivers and riders” example, for instance,
if you’ve never used Uber before it’s probably good to say that and ask for more details.
Even if you’re familiar with the thing being asked about, it’s helpful to draw a simple picture
with stick figures to make sure that you and the interviewer are on the same page.&lt;/p&gt;

&lt;p&gt;This is also the time to ask about rough orders of magnitude scale (e.g., how many requests
per second are expected, etc.). However, I wouldn’t get too bogged down in these numbers- a
good design should have lots of room for growth and not be built to a specific set of static
dimensions.&lt;/p&gt;

&lt;h3 id=&quot;step-2-high-level-drawing&quot;&gt;Step 2: High-level drawing&lt;/h3&gt;

&lt;p&gt;Next, you should draw out a high-level diagram that shows the major pieces and how they’re
connected. As discussed later on, the idea here is to be high-level and not over-engineer at
this phase. You should mention that you’re deliberately being simple and high-level,
and that you’ll dig into improvements later so the interview knows that you’re not being sloppy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/simple_architecture_diagram.png&quot; alt=&quot;Simple architecture diagram&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the Uber case, as in many others, you’ll probably have clients, a layer of web servers,
and some sort of storage layer that keeps track of the states of the users and other entities
in the system.&lt;/p&gt;

&lt;h3 id=&quot;step-3-interface-details&quot;&gt;Step 3: Interface details&lt;/h3&gt;

&lt;p&gt;Once you have a picture of the main pieces, I think it’s really useful to describe the system
interface, i.e. what are the specific inputs and outputs, independent
of any internal implementation details. In the case of a client/server type design (most common),
these map to the requests that the clients make and the responses that they get.&lt;/p&gt;

&lt;p&gt;Being really specific about these (the different types, what they include, etc.) ensures that
you and the interviewer are on the same page and also guides the discussion of the implementation
details in later steps.&lt;/p&gt;

&lt;p&gt;In the Uber example, you’ll have requests from the rider client (i.e., app) for a ride, requests
from the driver client to change status, to accept a potential ride or not, etc. In this specific
example, the request flows can be fairly complex and are probably an important part of the design.&lt;/p&gt;

&lt;h3 id=&quot;step-4-implementation-details&quot;&gt;Step 4: Implementation details&lt;/h3&gt;

&lt;p&gt;Once you’ve defined the high-level pieces and the interfaces, it’s time to dig into the internal
implementation details. There are many different things you could focus on here, so it’s really
important to lean on your interviewer for guidance. Some potential topics to cover here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Tradeoffs in choices around specific components (e.g., using a relational DB vs. a
  &lt;a href=&quot;https://en.wikipedia.org/wiki/NoSQL&quot;&gt;NoSQL&lt;/a&gt; solution)&lt;/li&gt;
  &lt;li&gt;How a specific request type is handled end-to-end (including DB changes, etc.)&lt;/li&gt;
  &lt;li&gt;Schemas for any data stores&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;step-5-enhancements-for-scalability-performance-etc&quot;&gt;Step 5: Enhancements for scalability, performance, etc.&lt;/h3&gt;

&lt;p&gt;Once your interface and basic implementation are in place, you can then discuss how to increase the
maximum load that your system can handle. This is also a good time to talk about the reliability of
your design and what you could do to improve it, if applicable.&lt;/p&gt;

&lt;p&gt;As with the previous step, it’s really important to lean on your interviewer here and try to
dig into the areas that they feel are the most interesting to cover.&lt;/p&gt;

&lt;p&gt;Although the exact solutions will vary based on the context, some general approaches that may
be helpful here include:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Replication:&lt;/strong&gt; Stateless components can be replicated to handle more traffic and be
  resilient to failures in individual instances. This may also help for stateful things like DBs if
  you send the reads and writes to different instances and can hand-wave away
  &lt;a href=&quot;https://en.wikipedia.org/wiki/Data_consistency&quot;&gt;consistency&lt;/a&gt; issues.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sharding:&lt;/strong&gt; Splitting up your traffic by geography, user id, etc. and allocating each bucket to
  a semi-independent copy of your system may allow you to increase scale without redesigning
  everything from scratch.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Caching:&lt;/strong&gt; Adding caches in front of read-only data can significantly improve performance in
  many cases and reduce DB load.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Queueing:&lt;/strong&gt; Adding queues in your system may improve reliability and shield downstream
  components from load spikes. However, it can increase latency and also is hard to implement in
  synchronous request flows, so it’s most appropriate for asynchronous data pipelines.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;common-mistakes&quot;&gt;Common mistakes&lt;/h2&gt;

&lt;p&gt;Even with good structure, there are some very common traps that candidates fall into that
reduce the quality of their answers in my view.&lt;/p&gt;

&lt;h3 id=&quot;being-too-service-oriented&quot;&gt;Being too service-oriented&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service-oriented-architecture (SOA)&lt;/a&gt;
is a design pattern which eschews monolithic components for more specialized, distributed ones.
Over time, it’s evolved into the idea of breaking up monolithic systems into lots of tiny
&lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices&quot;&gt;microservices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So, for instance, instead of having a single server that both accepts requests from clients
and updates the DB, you might introduce a “database service” between the app server and the
database. Now, you have two services instead of one. Over time, the original app server is split
out further and further until it’s just a router without any business logic in it.&lt;/p&gt;

&lt;p&gt;While SOA and its microservices variant have benefits in some cases, they’re super easy to abuse,
make designs significantly more complex, and, without more understanding of the motivations, might
not be necessary in a real-world, large-scale system at all.&lt;/p&gt;

&lt;p&gt;Here’s an extreme example of what I don’t want to see:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/excessive_soa.png&quot; alt=&quot;Excessive SOA&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Err on the side of being monolithic, then split things out later in the interview if and only if
there’s a good reason to do so.&lt;/p&gt;

&lt;h3 id=&quot;over-engineering-too-early&quot;&gt;Over-engineering too early&lt;/h3&gt;

&lt;p&gt;Related to SOA abuse is over-engineering your solution too early in the process. Yes,
having 3 layers of caching, or a queue between your app servers and your DB, or a fancy sharded
data store might make your system more scalable. However, it’s unlikely that you’ll need those
in the first iteration, they make your design significantly more complex, and, without more testing
and iteration, it’s impossible to know how much these things will actually help.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, start simple and then add complexity later in your answer if needed.
Adding complexity is easier than removing it, and this also matches how many real-world systems
are implemented.&lt;/p&gt;

&lt;h3 id=&quot;using-components-you-dont-fully-understand&quot;&gt;Using components you don’t fully understand&lt;/h3&gt;

&lt;p&gt;Don’t include overly-hyped technologies in your solution (“Kafka!”, “Cassandra!”,
“machine learning!”) unless you really understand them and have day-to-day experience using them.
Otherwise, you’re likely to use them in the wrong way or look like an idiot when the interviewer
asks you follow-ups about how they work.&lt;/p&gt;

&lt;p&gt;It’s much better to stick to less-sexy things that you actually know, e.g. MySQL, which can still be
(and actually are) the basis for many real-world, large scale systems. In the course of your
answer, it’s fine to mention other technologies that might be relevant, but you should explain that
you don’t have a lot of experience with them so you’d need to do more investigation before including
them in your design.&lt;/p&gt;

&lt;h3 id=&quot;getting-specific-in-the-wrong-areas&quot;&gt;Getting specific in the wrong areas&lt;/h3&gt;

&lt;p&gt;It’s impossible to cover all of the details of a complex system like Uber’s ride matching
in a 45-60 minute interview. When you focus too much on one specific thing (e.g., the database
schema), you’re necessarily omitting the chance to cover other aspects of the problem in a very
detailed way.&lt;/p&gt;

&lt;p&gt;As mentioned earlier, start at a high-level and then dig into the lower-level components that your
interviewer steers you towards. Don’t waste time on details that your interviewer doesn’t care
about.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Doing well in an architecture interview is prerequisite for many software positions, particularly
the higher-level ones. Having a solid structure, starting from a high-level, avoiding
over-engineering, and sticking to what you know are the keys to success.&lt;/p&gt;</content><author><name></name></author><category term="interviews" /><summary type="html">Many software engineering interview loops include an &quot;architecture interview&quot;, where the candidate is asked to develop a high-level design for a software system. Over the last few years, I've given many, many of these interviews. Based on these experiences, I'd like to share what it takes to succeed in them, and some common behaviors to avoid.</summary></entry></feed>